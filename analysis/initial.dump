In order, the following will be built (use -v for more details):
 - initial-0.1.0.0 (lib) +dump (first run)
Configuring library for initial-0.1.0.0..
Preprocessing library for initial-0.1.0.0..
Building library for initial-0.1.0.0..
[ 1 of 20] Compiling Interpret.Eval   ( src/Interpret/Eval.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Interpret/Eval.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 101, types: 63, coercions: 0, joins: 1/2}

-- RHS size: {terms: 29, types: 34, coercions: 0, joins: 1/2}
mkEval :: forall tm. [EvalRule tm] -> tm -> tm
mkEval
  = \ (@ tm) (rules :: [EvalRule tm]) (eta :: tm) ->
      letrec {
        eval :: tm -> tm
        eval
          = \ (tm1 :: tm) ->
              joinrec {
                go :: [EvalRule tm] -> tm
                go (ds :: [EvalRule tm])
                  = case ds of {
                      [] -> tm1;
                      : y ys ->
                        case y of { EvalRule f ->
                        case f eval tm1 of {
                          Nothing -> jump go ys;
                          Just ipv -> eval ipv
                        }
                        }
                    }; } in
              jump go rules; } in
      eval eta

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Interpret.Eval"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep :: KindRep
$krep = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep1 :: KindRep
$krep1 = KindRepFun $krep $krep

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2 :: [KindRep]
$krep2 = : @ KindRep $krep ([] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3 :: KindRep
$krep3 = KindRepTyConApp $tcMaybe $krep2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4 :: KindRep
$krep4 = KindRepFun $krep $krep3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5 :: KindRep
$krep5 = KindRepFun $krep1 $krep4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcEvalRule2 :: Addr#
$tcEvalRule2 = "EvalRule"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcEvalRule1 :: TrName
$tcEvalRule1 = TrNameS $tcEvalRule2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcEvalRule :: TyCon
$tcEvalRule
  = TyCon
      10994308217929540355##
      14081087777498451726##
      $trModule
      $tcEvalRule1
      0#
      krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6 :: KindRep
$krep6 = KindRepTyConApp $tcEvalRule $krep2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'EvalRule1 :: KindRep
$tc'EvalRule1 = KindRepFun $krep5 $krep6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'EvalRule3 :: Addr#
$tc'EvalRule3 = "'EvalRule"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'EvalRule2 :: TrName
$tc'EvalRule2 = TrNameS $tc'EvalRule3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'EvalRule :: TyCon
$tc'EvalRule
  = TyCon
      10608724785699535600##
      7970352128635118612##
      $trModule
      $tc'EvalRule2
      1#
      $tc'EvalRule1



[ 2 of 20] Compiling Interpret.Print  ( src/Interpret/Print.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Interpret/Print.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 112, types: 78, coercions: 0, joins: 1/2}

-- RHS size: {terms: 28, types: 38, coercions: 0, joins: 1/2}
mkPrint :: forall tm. [PrintRule tm] -> tm -> Maybe String
mkPrint
  = \ (@ tm) (rules :: [PrintRule tm]) (eta :: tm) ->
      letrec {
        pr :: tm -> Maybe String
        pr
          = \ (tm1 :: tm) ->
              joinrec {
                go :: [PrintRule tm] -> Maybe String
                go (ds :: [PrintRule tm])
                  = case ds of {
                      [] -> Nothing @ String;
                      : y ys ->
                        case y of { PrintRule f ->
                        case f pr tm1 of wild2 {
                          Nothing -> jump go ys;
                          Just ipv -> wild2
                        }
                        }
                    }; } in
              jump go rules; } in
      pr eta

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Interpret.Print"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep :: KindRep
$krep = KindRepTyConApp $tcChar ([] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1 :: [KindRep]
$krep1 = : @ KindRep $krep ([] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2 :: KindRep
$krep2 = KindRepTyConApp $tc[] $krep1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3 :: [KindRep]
$krep3 = : @ KindRep $krep2 ([] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4 :: KindRep
$krep4 = KindRepTyConApp $tcMaybe $krep3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep5 :: KindRep
$krep5 = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6 :: KindRep
$krep6 = KindRepFun $krep5 $krep4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7 :: KindRep
$krep7 = KindRepFun $krep6 $krep6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcPrintRule2 :: Addr#
$tcPrintRule2 = "PrintRule"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcPrintRule1 :: TrName
$tcPrintRule1 = TrNameS $tcPrintRule2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcPrintRule :: TyCon
$tcPrintRule
  = TyCon
      10958941186998107431##
      2343640925495199680##
      $trModule
      $tcPrintRule1
      0#
      krep$*Arr*

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8 :: [KindRep]
$krep8 = : @ KindRep $krep5 ([] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9 :: KindRep
$krep9 = KindRepTyConApp $tcPrintRule $krep8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'PrintRule1 :: KindRep
$tc'PrintRule1 = KindRepFun $krep7 $krep9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'PrintRule3 :: Addr#
$tc'PrintRule3 = "'PrintRule"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'PrintRule2 :: TrName
$tc'PrintRule2 = TrNameS $tc'PrintRule3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'PrintRule :: TyCon
$tc'PrintRule
  = TyCon
      13532533845655252715##
      5022127262841619329##
      $trModule
      $tc'PrintRule2
      1#
      $tc'PrintRule1



[ 3 of 20] Compiling Term             ( src/Term.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Term.o )

==================== Simplified expression ====================
makeWrapped
  (mkNameG_tc
     (unpackCString# "initial-0.1.0.0-inplace"#)
     (unpackCString# "Term"#)
     (unpackCString# "Term"#))



==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 146, types: 474, coercions: 399, joins: 0/0}

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
$fRewrappedTermt4
  :: forall (f :: (* -> *) -> * -> *) a. Term f a -> Term f a
$fRewrappedTermt4
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (ds :: Term f a) -> ds

-- RHS size: {terms: 4, types: 14, coercions: 0, joins: 0/0}
$fRewrappedTermt3
  :: forall (f :: (* -> *) -> * -> *) a. f (Term f) a -> f (Term f) a
$fRewrappedTermt3
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (v :: f (Term f) a) -> v

-- RHS size: {terms: 12, types: 53, coercions: 16, joins: 0/0}
$fRewrappedTermt2
  :: forall (f1 :: (* -> *) -> * -> *) a (p :: * -> * -> *) (f2 :: *
                                                                   -> *).
     (Profunctor p, Functor f2) =>
     p (f1 (Term f1) a) (f2 (f1 (Term f1) a))
     -> p (Term f1 a) (f2 (Term f1 a))
$fRewrappedTermt2
  = \ (@ (f :: (* -> *) -> * -> *))
      (@ a)
      (@ (p :: * -> * -> *))
      (@ (f1 :: * -> *))
      ($dProfunctor :: Profunctor p)
      ($dFunctor :: Functor f1) ->
      dimap
        @ p
        $dProfunctor
        @ (Term f a)
        @ (f (Term f) a)
        @ (f1 (f (Term f) a))
        @ (f1 (Term f a))
        (($fRewrappedTermt4 @ f @ a)
         `cast` (<Term f a>_R -> N:Term[0] <f>_N <a>_N
                 :: ((Term f a -> Term f a) :: *)
                    ~R#
                    ((Term f a -> f (Term f) a) :: *)))
        (fmap
           @ f1
           $dFunctor
           @ (f (Term f) a)
           @ (Term f a)
           (($fRewrappedTermt3 @ f @ a)
            `cast` (<f (Term f) a>_R -> Sym (N:Term[0] <f>_N) <a>_N
                    :: ((f (Term f) a -> f (Term f) a) :: *)
                       ~R#
                       ((f (Term f) a -> Term f a) :: *))))

-- RHS size: {terms: 1, types: 0, coercions: 55, joins: 0/0}
$fWrappedTerm
  :: forall (f :: (* -> *) -> * -> *) a. Wrapped (Term f a)
$fWrappedTerm
  = $fRewrappedTermt2
    `cast` (forall (f :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            (forall (p :: <* -> * -> *>_N).
             forall (f1 :: <* -> *>_N).
             <Profunctor p>_R
             -> <Functor f1>_R
             -> <p>_R (Sym (D:R:UnwrappedTerm[0] <f>_N <a>_N)) (<f1>_N (Sym
                                                                          (D:R:UnwrappedTerm[0]
                                                                             <f>_N <a>_N)))
             -> <p (Term f a) (f1 (Term f a))>_R)
            ; Sym (N:Wrapped[0] <Term f a>_N)
            :: ((forall (f :: (* -> *) -> * -> *) a (p :: * -> * -> *) (f1 :: *
                                                                              -> *).
                 (Profunctor p, Functor f1) =>
                 p (f (Term f) a) (f1 (f (Term f) a))
                 -> p (Term f a) (f1 (Term f a))) :: *)
               ~R#
               ((forall (f :: (* -> *) -> * -> *) a.
                 Wrapped (Term f a)) :: Constraint))

-- RHS size: {terms: 17, types: 64, coercions: 26, joins: 0/0}
$fRewrappedTermt1
  :: forall (f1 :: (* -> *) -> * -> *) a1 t (f2 :: (* -> *)
                                                   -> * -> *) a2.
     (Term f1 a1 :: *) ~ (t :: *) =>
     forall (p :: * -> * -> *) (f3 :: * -> *).
     (Profunctor p, Functor f3) =>
     p (Unwrapped (Term f2 a2)) (f3 (Unwrapped (Term f2 a2)))
     -> p (Term f2 a2) (f3 (Term f2 a2))
$fRewrappedTermt1
  = \ (@ (f :: (* -> *) -> * -> *))
      (@ a)
      (@ t)
      (@ (f1 :: (* -> *) -> * -> *))
      (@ a1)
      ($d~ :: (Term f a :: *) ~ (t :: *))
      (@ (p :: * -> * -> *))
      (@ (f2 :: * -> *))
      (eta :: Profunctor p)
      (eta1 :: Functor f2) ->
      case HEq_sc
             @ *
             @ *
             @ (Term f a)
             @ t
             ($d~
              `cast` (N:~[0] <*>_N <Term f a>_N <t>_N
                      :: ((Term f a :: *) ~ (t :: *) :: Constraint)
                         ~R#
                         ((Term f a :: *) ~~ (t :: *) :: Constraint)))
      of cobox
      { __DEFAULT ->
      ($fRewrappedTermt2 @ f1 @ a1 @ p @ f2 eta eta1)
      `cast` (<p>_R (Sym
                       (D:R:UnwrappedTerm[0] <f1>_N <a1>_N)) (<f2>_N (Sym
                                                                        (D:R:UnwrappedTerm[0]
                                                                           <f1>_N <a1>_N)))
              -> <p (Term f1 a1) (f2 (Term f1 a1))>_R
              :: ((p (f1 (Term f1) a1) (f2 (f1 (Term f1) a1))
                   -> p (Term f1 a1) (f2 (Term f1 a1))) :: *)
                 ~R#
                 ((p (Unwrapped (Term f1 a1)) (f2 (Unwrapped (Term f1 a1)))
                   -> p (Term f1 a1) (f2 (Term f1 a1))) :: *))
      }

-- RHS size: {terms: 1, types: 0, coercions: 55, joins: 0/0}
$fRewrappedTermt
  :: forall (f1 :: (* -> *) -> * -> *) a1 t (f2 :: (* -> *)
                                                   -> * -> *) a2.
     (Term f1 a1 :: *) ~ (t :: *) =>
     Rewrapped (Term f2 a2) t
$fRewrappedTermt
  = $fRewrappedTermt1
    `cast` (forall (f :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            forall (t :: <*>_N).
            forall (f1 :: <(* -> *) -> * -> *>_N).
            forall (a1 :: <*>_N).
            (<(Term f a :: *) ~ (t :: *)>_R
             -> Sym (N:Wrapped[0] <Term f1 a1>_N))
            ; (<(Term f a :: *) ~ (t :: *)>_R
               -> Sym (N:Rewrapped[0] <Term f1 a1>_N <t>_N))
            :: ((forall (f :: (* -> *) -> * -> *) a t (f1 :: (* -> *)
                                                             -> * -> *) a1.
                 (Term f a :: *) ~ (t :: *) =>
                 Iso' (Term f1 a1) (Unwrapped (Term f1 a1))) :: *)
               ~R#
               ((forall (f :: (* -> *) -> * -> *) a t (f1 :: (* -> *)
                                                             -> * -> *) a1.
                 (Term f a :: *) ~ (t :: *) =>
                 Rewrapped (Term f1 a1) t) :: *))

-- RHS size: {terms: 5, types: 16, coercions: 0, joins: 0/0}
$fGenericTerm1
  :: forall (f :: (* -> *) -> * -> *) a x.
     Rep (Term f a) x -> Rep (Term f a) x
$fGenericTerm1
  = \ (@ (f :: (* -> *) -> * -> *))
      (@ a)
      (@ x)
      (ds :: Rep (Term f a) x) ->
      ds

-- RHS size: {terms: 5, types: 14, coercions: 0, joins: 0/0}
$fGenericTerm2
  :: forall (f :: (* -> *) -> * -> *) a x. Term f a -> Term f a
$fGenericTerm2
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (@ x) (x1 :: Term f a) ->
      x1

-- RHS size: {terms: 5, types: 17, coercions: 228, joins: 0/0}
$fGenericTerm
  :: forall (f :: (* -> *) -> * -> *) a. Generic (Term f a)
$fGenericTerm
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) ->
      C:Generic
        @ (Term f a)
        (($fGenericTerm2 @ f @ a)
         `cast` (forall (x :: <*>_N).
                 <Term f a>_R
                 -> N:Term[0] <f>_N <a>_N
                    ; Sym (N:K1[0] <*>_N <R>_P <f (Term f) a>_R <x>_P)
                    ; Sym
                        (N:M1[0]
                           <*>_N
                           <S>_P
                           <'MetaSel
                              ('Just "unTerm")
                              'NoSourceUnpackedness
                              'NoSourceStrictness
                              'DecidedLazy>_P
                           <K1 R (f (Term f) a)>_R)
                      ; Sym
                          (N:M1[0]
                             <*>_N
                             <C>_P
                             <'MetaCons "Term" 'PrefixI 'True>_P
                             <M1
                                S
                                ('MetaSel
                                   ('Just "unTerm")
                                   'NoSourceUnpackedness
                                   'NoSourceStrictness
                                   'DecidedLazy)
                                (K1 R (f (Term f) a))>_R)
                      ; Sym
                          (N:M1[0]
                             <*>_N
                             <D>_P
                             <'MetaData "Term" "Term" "initial-0.1.0.0-inplace" 'True>_P
                             <M1
                                C
                                ('MetaCons "Term" 'PrefixI 'True)
                                (M1
                                   S
                                   ('MetaSel
                                      ('Just "unTerm")
                                      'NoSourceUnpackedness
                                      'NoSourceStrictness
                                      'DecidedLazy)
                                   (K1 R (f (Term f) a)))>_R)
                      ; Sub (Sym (Rep_Term[0] <f>_N <a>_N)) <x>_N
                 :: ((forall x. Term f a -> Term f a) :: *)
                    ~R#
                    ((forall x. Term f a -> Rep (Term f a) x) :: *)))
        (($fGenericTerm1 @ f @ a)
         `cast` (forall (x :: <*>_N).
                 <Rep (Term f a) x>_R
                 -> Sub (Rep_Term[0] <f>_N <a>_N)
                    ; N:M1[0]
                        <*>_N
                        <D>_P
                        <'MetaData "Term" "Term" "initial-0.1.0.0-inplace" 'True>_P
                        <M1
                           C
                           ('MetaCons "Term" 'PrefixI 'True)
                           (M1
                              S
                              ('MetaSel
                                 ('Just "unTerm")
                                 'NoSourceUnpackedness
                                 'NoSourceStrictness
                                 'DecidedLazy)
                              (K1 R (f (Term f) a)))>_R
                    ; N:M1[0]
                        <*>_N
                        <C>_P
                        <'MetaCons "Term" 'PrefixI 'True>_P
                        <M1
                           S
                           ('MetaSel
                              ('Just "unTerm")
                              'NoSourceUnpackedness
                              'NoSourceStrictness
                              'DecidedLazy)
                           (K1 R (f (Term f) a))>_R
                    ; N:M1[0]
                        <*>_N
                        <S>_P
                        <'MetaSel
                           ('Just "unTerm")
                           'NoSourceUnpackedness
                           'NoSourceStrictness
                           'DecidedLazy>_P
                        <K1 R (f (Term f) a)>_R <x>_N
                    ; N:K1[0] <*>_N <R>_P <f (Term f) a>_R <x>_P
                    ; Sym (N:Term[0] <f>_N) <a>_N
                 :: ((forall x. Rep (Term f a) x -> Rep (Term f a) x) :: *)
                    ~R#
                    ((forall x. Rep (Term f a) x -> Term f a) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 19, joins: 0/0}
unTerm
  :: forall (f :: (* -> *) -> * -> *) a. Term f a -> f (Term f) a
unTerm
  = $fRewrappedTermt4
    `cast` (forall (f :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N). <Term f a>_R -> N:Term[0] <f>_N <a>_N
            :: ((forall (f :: (* -> *) -> * -> *) a.
                 Term f a -> Term f a) :: *)
               ~R#
               ((forall (f :: (* -> *) -> * -> *) a.
                 Term f a -> f (Term f) a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Term"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep :: KindRep
$krep = KindRepFun krep$*Arr* krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcTerm1 :: KindRep
$tcTerm1 = KindRepFun $krep krep$*Arr*

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1 :: KindRep
$krep1 = KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep2 :: KindRep
$krep2 = KindRepVar 0#

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcTerm :: TyCon
$tcTerm
  = TyCon
      15756675435763705103##
      1974243616314611459##
      $trModule
      $trModule1
      0#
      $tcTerm1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3 :: [KindRep]
$krep3 = : @ KindRep $krep2 ([] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4 :: KindRep
$krep4 = KindRepTyConApp $tcTerm $krep3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5 :: KindRep
$krep5 = KindRepApp $krep2 $krep4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6 :: KindRep
$krep6 = KindRepApp $krep5 $krep1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7 :: [KindRep]
$krep7 = : @ KindRep $krep1 ([] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep8 :: [KindRep]
$krep8 = : @ KindRep $krep2 $krep7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9 :: KindRep
$krep9 = KindRepTyConApp $tcTerm $krep8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Term1 :: KindRep
$tc'Term1 = KindRepFun $krep6 $krep9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Term3 :: Addr#
$tc'Term3 = "'Term"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Term2 :: TrName
$tc'Term2 = TrNameS $tc'Term3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Term :: TyCon
$tc'Term
  = TyCon
      16382515239660425439##
      10304933754316970846##
      $trModule
      $tc'Term2
      2#
      $tc'Term1



[ 4 of 20] Compiling Mul.Type         ( src/Mul/Type.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Mul/Type.o )

==================== Simplified expression ====================
makePrisms
  (mkNameG_tc
     (unpackCString# "initial-0.1.0.0-inplace"#)
     (unpackCString# "Mul.Type"#)
     (unpackCString# "MulF"#))



==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 687, types: 1,702, coercions: 728, joins: 0/7}

-- RHS size: {terms: 3, types: 10, coercions: 2, joins: 0/0}
_MulF
  :: forall (tm :: (* -> *) -> * -> *).
     HasMulF tm =>
     forall (f :: * -> *) a. Prism' (tm f a) (MulF f a)
_MulF
  = \ (@ (tm :: (* -> *) -> * -> *)) (v :: HasMulF tm) ->
      v
      `cast` (N:HasMulF[0] <tm>_N
              :: (HasMulF tm :: Constraint)
                 ~R#
                 ((forall (f :: * -> *) a. Prism' (tm f a) (MulF f a)) :: *))

-- RHS size: {terms: 7, types: 28, coercions: 0, joins: 0/0}
$fHasMulFMulF_$c_MulF
  :: forall (f :: * -> *) a. Prism' (MulF f a) (MulF f a)
$fHasMulFMulF_$c_MulF
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (p :: * -> * -> *))
      (@ (f1 :: * -> *))
      _
      _ ->
      id @ (p (MulF f a) (f1 (MulF f a)))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasMulFMulF :: HasMulF MulF
$fHasMulFMulF
  = $fHasMulFMulF_$c_MulF
    `cast` (Sym (N:HasMulF[0] <MulF>_N)
            :: ((forall (f :: * -> *) a. Prism' (MulF f a) (MulF f a)) :: *)
               ~R#
               (HasMulF MulF :: Constraint))

-- RHS size: {terms: 10, types: 84, coercions: 152, joins: 0/0}
$fGenericMulF_$cto
  :: forall (f :: * -> *) a x. Rep (MulF f a) x -> MulF f a
$fGenericMulF_$cto
  = \ (@ (f :: * -> *)) (@ a) (@ x) (ds :: Rep (MulF f a) x) ->
      case ds
           `cast` (Sub (Rep_MulF[0] <f>_N <a>_N)
                   ; N:M1[0]
                       <*>_N
                       <D>_P
                       <'MetaData "MulF" "Mul.Type" "initial-0.1.0.0-inplace" 'False>_P
                       <M1
                          C
                          ('MetaCons "TmMul" 'PrefixI 'False)
                          (M1
                             S
                             ('MetaSel
                                'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                             (K1 R (f a))
                           :*: M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (f a)))>_R
                   ; N:M1[0]
                       <*>_N
                       <C>_P
                       <'MetaCons "TmMul" 'PrefixI 'False>_P
                       <M1
                          S
                          ('MetaSel
                             'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                          (K1 R (f a))
                        :*: M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (f a))>_R <x>_N
                   :: (Rep (MulF f a) x :: *)
                      ~R#
                      ((:*:)
                         (M1
                            S
                            ('MetaSel
                               'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                            (K1 R (f a)))
                         (M1
                            S
                            ('MetaSel
                               'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                            (K1 R (f a)))
                         x :: *))
      of
      { :*: ds1 ds2 ->
      TmMul
        @ f
        @ a
        (ds1
         `cast` (N:M1[0]
                   <*>_N
                   <S>_P
                   <'MetaSel
                      'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                   <K1 R (f a)>_R <x>_N
                 ; N:K1[0] <*>_N <R>_P <f a>_R <x>_P
                 :: (M1
                       S
                       ('MetaSel
                          'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                       (K1 R (f a))
                       x :: *)
                    ~R#
                    (f a :: *)))
        (ds2
         `cast` (N:M1[0]
                   <*>_N
                   <S>_P
                   <'MetaSel
                      'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                   <K1 R (f a)>_R <x>_N
                 ; N:K1[0] <*>_N <R>_P <f a>_R <x>_P
                 :: (M1
                       S
                       ('MetaSel
                          'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                       (K1 R (f a))
                       x :: *)
                    ~R#
                    (f a :: *)))
      }

-- RHS size: {terms: 10, types: 52, coercions: 99, joins: 0/0}
$fGenericMulF1
  :: forall (f :: * -> *) a x.
     MulF f a
     -> M1
          C
          ('MetaCons "TmMul" 'PrefixI 'False)
          (M1
             S
             ('MetaSel
                'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
             (K1 R (f a))
           :*: M1
                 S
                 ('MetaSel
                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                 (K1 R (f a)))
          x
$fGenericMulF1
  = \ (@ (f :: * -> *)) (@ a) (@ x) (x1 :: MulF f a) ->
      case x1 of { TmMul g1 g2 ->
      (:*:
         @ *
         @ (M1
              S
              ('MetaSel
                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
              (K1 R (f a)))
         @ (M1
              S
              ('MetaSel
                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
              (K1 R (f a)))
         @ x
         (g1
          `cast` (Sym (N:K1[0] <*>_N <R>_P <f a>_R <x>_P)
                  ; Sym
                      (N:M1[0]
                         <*>_N
                         <S>_P
                         <'MetaSel
                            'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                         <K1 R (f a)>_R) <x>_N
                  :: (f a :: *)
                     ~R#
                     (M1
                        S
                        ('MetaSel
                           'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                        (K1 R (f a))
                        x :: *)))
         (g2
          `cast` (Sym (N:K1[0] <*>_N <R>_P <f a>_R <x>_P)
                  ; Sym
                      (N:M1[0]
                         <*>_N
                         <S>_P
                         <'MetaSel
                            'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                         <K1 R (f a)>_R) <x>_N
                  :: (f a :: *)
                     ~R#
                     (M1
                        S
                        ('MetaSel
                           'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                        (K1 R (f a))
                        x :: *))))
      `cast` (Sym
                (N:M1[0]
                   <*>_N
                   <C>_P
                   <'MetaCons "TmMul" 'PrefixI 'False>_P
                   <M1
                      S
                      ('MetaSel
                         'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                      (K1 R (f a))
                    :*: M1
                          S
                          ('MetaSel
                             'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                          (K1 R (f a))>_R) <x>_N
              :: ((:*:)
                    (M1
                       S
                       ('MetaSel
                          'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                       (K1 R (f a)))
                    (M1
                       S
                       ('MetaSel
                          'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                       (K1 R (f a)))
                    x :: *)
                 ~R#
                 (M1
                    C
                    ('MetaCons "TmMul" 'PrefixI 'False)
                    (M1
                       S
                       ('MetaSel
                          'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                       (K1 R (f a))
                     :*: M1
                           S
                           ('MetaSel
                              'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                           (K1 R (f a)))
                    x :: *))
      }

-- RHS size: {terms: 5, types: 13, coercions: 66, joins: 0/0}
$fGenericMulF :: forall (f :: * -> *) a. Generic (MulF f a)
$fGenericMulF
  = \ (@ (f :: * -> *)) (@ a) ->
      C:Generic
        @ (MulF f a)
        (($fGenericMulF1 @ f @ a)
         `cast` (forall (x :: <*>_N).
                 <MulF f a>_R
                 -> Sym
                      (N:M1[0]
                         <*>_N
                         <D>_P
                         <'MetaData "MulF" "Mul.Type" "initial-0.1.0.0-inplace" 'False>_P
                         <M1
                            C
                            ('MetaCons "TmMul" 'PrefixI 'False)
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R (f a))
                             :*: M1
                                   S
                                   ('MetaSel
                                      'Nothing
                                      'NoSourceUnpackedness
                                      'NoSourceStrictness
                                      'DecidedLazy)
                                   (K1 R (f a)))>_R)
                    ; Sub (Sym (Rep_MulF[0] <f>_N <a>_N)) <x>_N
                 :: ((forall x.
                      MulF f a
                      -> M1
                           C
                           ('MetaCons "TmMul" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (f a))
                            :*: M1
                                  S
                                  ('MetaSel
                                     'Nothing
                                     'NoSourceUnpackedness
                                     'NoSourceStrictness
                                     'DecidedLazy)
                                  (K1 R (f a)))
                           x) :: *)
                    ~R#
                    ((forall x. MulF f a -> Rep (MulF f a) x) :: *)))
        ($fGenericMulF_$cto @ f @ a)

-- RHS size: {terms: 13, types: 20, coercions: 6, joins: 0/0}
$fNFDataMulF_$crnf
  :: forall (f :: * -> *) a. NFData (f a) => MulF f a -> ()
$fNFDataMulF_$crnf
  = \ (@ (f :: * -> *))
      (@ a)
      ($dNFData :: NFData (f a))
      (eta :: MulF f a) ->
      case eta of { TmMul g1 g2 ->
      case ($dNFData
            `cast` (N:NFData[0] <f a>_N
                    :: (NFData (f a) :: Constraint) ~R# ((f a -> ()) :: *)))
             g1
      of
      { () ->
      ($dNFData
       `cast` (N:NFData[0] <f a>_N
               :: (NFData (f a) :: Constraint) ~R# ((f a -> ()) :: *)))
        g2
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
$fNFDataMulF
  :: forall (f :: * -> *) a. NFData (f a) => NFData (MulF f a)
$fNFDataMulF
  = $fNFDataMulF_$crnf
    `cast` (forall (f :: <* -> *>_N).
            forall (a :: <*>_N).
            <NFData (f a)>_R -> Sym (N:NFData[0] <MulF f a>_N)
            :: ((forall (f :: * -> *) a. NFData (f a) => MulF f a -> ()) :: *)
               ~R#
               ((forall (f :: * -> *) a. NFData (f a) => NFData (MulF f a)) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowMulF3 :: Int
$fShowMulF3 = I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowMulF2 :: Addr#
$fShowMulF2 = "TmMul "#

-- RHS size: {terms: 43, types: 30, coercions: 0, joins: 0/2}
$w$cshowsPrec
  :: forall (f :: * -> *) a.
     Show (f a) =>
     Int# -> f a -> f a -> ShowS
$w$cshowsPrec
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Show (f a))
      (ww :: Int#)
      (ww1 :: f a)
      (ww2 :: f a) ->
      let {
        f1 :: String -> String
        f1 = showsPrec @ (f a) w $fShowMulF3 ww1 } in
      let {
        g :: String -> String
        g = showsPrec @ (f a) w $fShowMulF3 ww2 } in
      case tagToEnum# @ Bool (>=# ww 11#) of {
        False ->
          \ (x :: String) ->
            unpackAppendCString# $fShowMulF2 (f1 (: @ Char showSpace1 (g x)));
        True ->
          \ (x :: String) ->
            : @ Char
              $fShow(,)4
              (unpackAppendCString#
                 $fShowMulF2 (f1 (: @ Char showSpace1 (g (: @ Char $fShow(,)2 x)))))
      }

-- RHS size: {terms: 16, types: 24, coercions: 0, joins: 0/0}
$fShowMulF_$cshowsPrec
  :: forall (f :: * -> *) a. Show (f a) => Int -> MulF f a -> ShowS
$fShowMulF_$cshowsPrec
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Show (f a))
      (w1 :: Int)
      (w2 :: MulF f a) ->
      case w1 of { I# ww1 ->
      case w2 of { TmMul ww3 ww4 -> $w$cshowsPrec @ f @ a w ww1 ww3 ww4 }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowMulF1 :: Int
$fShowMulF1 = I# 0#

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
$fShowMulF_$cshow
  :: forall (f :: * -> *) a. Show (f a) => MulF f a -> String
$fShowMulF_$cshow
  = \ (@ (f :: * -> *))
      (@ a)
      ($dShow :: Show (f a))
      (x :: MulF f a) ->
      case x of { TmMul ww1 ww2 ->
      $w$cshowsPrec @ f @ a $dShow 0# ww1 ww2 ([] @ Char)
      }

-- RHS size: {terms: 17, types: 29, coercions: 0, joins: 0/0}
$fShowMulF_$cshowList
  :: forall (f :: * -> *) a. Show (f a) => [MulF f a] -> ShowS
$fShowMulF_$cshowList
  = \ (@ (f :: * -> *))
      (@ a)
      ($dShow :: Show (f a))
      (eta :: [MulF f a])
      (eta1 :: String) ->
      showList__
        @ (MulF f a)
        (\ (w :: MulF f a) ->
           case w of { TmMul ww1 ww2 ->
           $w$cshowsPrec @ f @ a $dShow 0# ww1 ww2
           })
        eta
        eta1

-- RHS size: {terms: 10, types: 18, coercions: 0, joins: 0/0}
$fShowMulF :: forall (f :: * -> *) a. Show (f a) => Show (MulF f a)
$fShowMulF
  = \ (@ (f :: * -> *)) (@ a) ($dShow :: Show (f a)) ->
      C:Show
        @ (MulF f a)
        ($fShowMulF_$cshowsPrec @ f @ a $dShow)
        ($fShowMulF_$cshow @ f @ a $dShow)
        ($fShowMulF_$cshowList @ f @ a $dShow)

-- RHS size: {terms: 21, types: 22, coercions: 0, joins: 0/0}
$w$c<
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     f a -> f a -> f a -> f a -> Bool
$w$c<
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (ww :: f a)
      (ww1 :: f a)
      (ww2 :: f a)
      (ww3 :: f a) ->
      case compare @ (f a) w ww ww2 of {
        LT -> True;
        EQ -> < @ (f a) w ww1 ww3;
        GT -> False
      }

-- RHS size: {terms: 17, types: 31, coercions: 0, joins: 0/0}
$fOrdMulF_$c<
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     MulF f a -> MulF f a -> Bool
$fOrdMulF_$c<
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (w1 :: MulF f a)
      (w2 :: MulF f a) ->
      case w1 of { TmMul ww1 ww2 ->
      case w2 of { TmMul ww4 ww5 -> $w$c< @ f @ a w ww1 ww2 ww4 ww5 }
      }

-- RHS size: {terms: 21, types: 22, coercions: 0, joins: 0/0}
$w$ccompare
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     f a -> f a -> f a -> f a -> Ordering
$w$ccompare
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (ww :: f a)
      (ww1 :: f a)
      (ww2 :: f a)
      (ww3 :: f a) ->
      case compare @ (f a) w ww ww2 of {
        LT -> LT;
        EQ -> compare @ (f a) w ww1 ww3;
        GT -> GT
      }

-- RHS size: {terms: 17, types: 31, coercions: 0, joins: 0/0}
$fOrdMulF_$ccompare
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     MulF f a -> MulF f a -> Ordering
$fOrdMulF_$ccompare
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (w1 :: MulF f a)
      (w2 :: MulF f a) ->
      case w1 of { TmMul ww1 ww2 ->
      case w2 of { TmMul ww4 ww5 ->
      $w$ccompare @ f @ a w ww1 ww2 ww4 ww5
      }
      }

-- RHS size: {terms: 19, types: 22, coercions: 0, joins: 0/0}
$w$c==
  :: forall (f :: * -> *) a.
     Eq (f a) =>
     f a -> f a -> f a -> f a -> Bool
$w$c==
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Eq (f a))
      (ww :: f a)
      (ww1 :: f a)
      (ww2 :: f a)
      (ww3 :: f a) ->
      case == @ (f a) w ww ww2 of {
        False -> False;
        True -> == @ (f a) w ww1 ww3
      }

-- RHS size: {terms: 17, types: 31, coercions: 0, joins: 0/0}
$fEqMulF_$c==
  :: forall (f :: * -> *) a. Eq (f a) => MulF f a -> MulF f a -> Bool
$fEqMulF_$c==
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Eq (f a))
      (w1 :: MulF f a)
      (w2 :: MulF f a) ->
      case w1 of { TmMul ww1 ww2 ->
      case w2 of { TmMul ww4 ww5 -> $w$c== @ f @ a w ww1 ww2 ww4 ww5 }
      }

-- RHS size: {terms: 28, types: 35, coercions: 0, joins: 0/0}
$fEqMulF_$c/=
  :: forall (f :: * -> *) a. Eq (f a) => MulF f a -> MulF f a -> Bool
$fEqMulF_$c/=
  = \ (@ (f :: * -> *))
      (@ a)
      ($dEq :: Eq (f a))
      (a1 :: MulF f a)
      (b :: MulF f a) ->
      case a1 of { TmMul ww1 ww2 ->
      case b of { TmMul ww4 ww5 ->
      case == @ (f a) $dEq ww1 ww4 of {
        False -> True;
        True ->
          case == @ (f a) $dEq ww2 ww5 of {
            False -> True;
            True -> False
          }
      }
      }
      }

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
$fEqMulF :: forall (f :: * -> *) a. Eq (f a) => Eq (MulF f a)
$fEqMulF
  = \ (@ (f :: * -> *)) (@ a) ($dEq :: Eq (f a)) ->
      C:Eq
        @ (MulF f a)
        ($fEqMulF_$c== @ f @ a $dEq)
        ($fEqMulF_$c/= @ f @ a $dEq)

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
$fOrdMulF_$cp1Ord
  :: forall (f :: * -> *) a. Ord (f a) => Eq (MulF f a)
$fOrdMulF_$cp1Ord
  = \ (@ (f :: * -> *)) (@ a) ($dOrd :: Ord (f a)) ->
      $fEqMulF @ f @ a ($p1Ord @ (f a) $dOrd)

-- RHS size: {terms: 26, types: 23, coercions: 0, joins: 0/0}
$w$c<=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     f a -> f a -> f a -> f a -> Bool
$w$c<=
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (ww :: f a)
      (ww1 :: f a)
      (ww2 :: f a)
      (ww3 :: f a) ->
      case compare @ (f a) w ww2 ww of {
        LT -> False;
        EQ ->
          case < @ (f a) w ww3 ww1 of {
            False -> True;
            True -> False
          };
        GT -> True
      }

-- RHS size: {terms: 17, types: 31, coercions: 0, joins: 0/0}
$fOrdMulF_$c<=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     MulF f a -> MulF f a -> Bool
$fOrdMulF_$c<=
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (w1 :: MulF f a)
      (w2 :: MulF f a) ->
      case w1 of { TmMul ww1 ww2 ->
      case w2 of { TmMul ww4 ww5 -> $w$c<= @ f @ a w ww1 ww2 ww4 ww5 }
      }

-- RHS size: {terms: 30, types: 35, coercions: 0, joins: 0/0}
$fOrdMulF_$cmax
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     MulF f a -> MulF f a -> MulF f a
$fOrdMulF_$cmax
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (w1 :: MulF f a)
      (w2 :: MulF f a) ->
      case w1 of ww { TmMul ww1 ww2 ->
      case w2 of ww3 { TmMul ww4 ww5 ->
      case compare @ (f a) w ww4 ww1 of {
        LT -> ww;
        EQ ->
          case < @ (f a) w ww5 ww2 of {
            False -> ww3;
            True -> ww
          };
        GT -> ww3
      }
      }
      }

-- RHS size: {terms: 26, types: 23, coercions: 0, joins: 0/0}
$w$c>=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     f a -> f a -> f a -> f a -> Bool
$w$c>=
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (ww :: f a)
      (ww1 :: f a)
      (ww2 :: f a)
      (ww3 :: f a) ->
      case compare @ (f a) w ww ww2 of {
        LT -> False;
        EQ ->
          case < @ (f a) w ww1 ww3 of {
            False -> True;
            True -> False
          };
        GT -> True
      }

-- RHS size: {terms: 17, types: 31, coercions: 0, joins: 0/0}
$fOrdMulF_$c>=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     MulF f a -> MulF f a -> Bool
$fOrdMulF_$c>=
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (w1 :: MulF f a)
      (w2 :: MulF f a) ->
      case w1 of { TmMul ww1 ww2 ->
      case w2 of { TmMul ww4 ww5 -> $w$c>= @ f @ a w ww1 ww2 ww4 ww5 }
      }

-- RHS size: {terms: 30, types: 35, coercions: 0, joins: 0/0}
$fOrdMulF_$cmin
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     MulF f a -> MulF f a -> MulF f a
$fOrdMulF_$cmin
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Ord (f a))
      (w1 :: MulF f a)
      (w2 :: MulF f a) ->
      case w1 of ww { TmMul ww1 ww2 ->
      case w2 of ww3 { TmMul ww4 ww5 ->
      case compare @ (f a) w ww4 ww1 of {
        LT -> ww3;
        EQ ->
          case < @ (f a) w ww5 ww2 of {
            False -> ww;
            True -> ww3
          };
        GT -> ww
      }
      }
      }

-- RHS size: {terms: 24, types: 34, coercions: 0, joins: 0/0}
$fOrdMulF :: forall (f :: * -> *) a. Ord (f a) => Ord (MulF f a)
$fOrdMulF
  = \ (@ (f :: * -> *)) (@ a) ($dOrd :: Ord (f a)) ->
      C:Ord
        @ (MulF f a)
        ($fOrdMulF_$cp1Ord @ f @ a $dOrd)
        ($fOrdMulF_$ccompare @ f @ a $dOrd)
        ($fOrdMulF_$c< @ f @ a $dOrd)
        ($fOrdMulF_$c<= @ f @ a $dOrd)
        (\ (a1 :: MulF f a) (b :: MulF f a) ->
           $fOrdMulF_$c< @ f @ a $dOrd b a1)
        ($fOrdMulF_$c>= @ f @ a $dOrd)
        ($fOrdMulF_$cmax @ f @ a $dOrd)
        ($fOrdMulF_$cmin @ f @ a $dOrd)

-- RHS size: {terms: 9, types: 20, coercions: 0, joins: 0/0}
_Mul2 :: forall (f :: * -> *) a. MulF f a -> (f a, f a)
_Mul2
  = \ (@ (f :: * -> *)) (@ a) (ds :: MulF f a) ->
      case ds of { TmMul x1 x2 -> (x1, x2) }

-- RHS size: {terms: 9, types: 22, coercions: 0, joins: 0/0}
_Mul1 :: forall (f :: * -> *) a. (f a, f a) -> MulF f a
_Mul1
  = \ (@ (f :: * -> *)) (@ a) (ds :: (f a, f a)) ->
      case ds of { (x1, x2) -> TmMul @ f @ a x1 x2 }

-- RHS size: {terms: 14, types: 58, coercions: 0, joins: 0/0}
_TmMul
  :: forall (f1 :: * -> *) a1 (f2 :: * -> *) a2.
     Iso (MulF f2 a2) (MulF f1 a1) (f2 a2, f2 a2) (f1 a1, f1 a1)
_TmMul
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (f1 :: * -> *))
      (@ a1)
      (@ (p :: * -> * -> *))
      (@ (f2 :: * -> *))
      ($dProfunctor :: Profunctor p)
      ($dFunctor :: Functor f2) ->
      dimap
        @ p
        $dProfunctor
        @ (MulF f1 a1)
        @ (f1 a1, f1 a1)
        @ (f2 (f a, f a))
        @ (f2 (MulF f a))
        (_Mul2 @ f1 @ a1)
        (fmap @ f2 $dFunctor @ (f a, f a) @ (MulF f a) (_Mul1 @ f @ a))

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
_Mul4
  :: forall (tm :: (* -> *) -> * -> *) a. Term tm a -> Term tm a
_Mul4
  = \ (@ (tm :: (* -> *) -> * -> *)) (@ a) (x :: Term tm a) -> x

-- RHS size: {terms: 4, types: 14, coercions: 0, joins: 0/0}
_Mul3
  :: forall (tm :: (* -> *) -> * -> *) a.
     Unwrapped (Term tm a) -> Unwrapped (Term tm a)
_Mul3
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      (x :: Unwrapped (Term tm a)) ->
      x

-- RHS size: {terms: 36, types: 189, coercions: 383, joins: 0/5}
_Mul
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasMulF tm =>
     Prism' (Term tm a) (Term tm a, Term tm a)
_Mul
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasMulF :: HasMulF tm)
      (@ (p :: * -> * -> *))
      (@ (f :: * -> *))
      ($dChoice :: Choice p)
      ($dApplicative :: Applicative f) ->
      let {
        $dProfunctor :: Profunctor p
        $dProfunctor = $p1Choice @ p $dChoice } in
      let {
        $dFunctor :: Functor f
        $dFunctor = $p1Applicative @ f $dApplicative } in
      let {
        f1
          :: p (Unwrapped (Term tm a)) (f (Unwrapped (Term tm a)))
             -> p (Term tm a) (f (Term tm a))
        f1
          = dimap
              @ p
              $dProfunctor
              @ (Term tm a)
              @ (Unwrapped (Term tm a))
              @ (f (Unwrapped (Term tm a)))
              @ (f (Term tm a))
              ((_Mul4 @ tm @ a)
               `cast` (<Term tm a>_R
                       -> N:Term[0] <tm>_N <a>_N
                          ; Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))
                       :: ((Term tm a -> Term tm a) :: *)
                          ~R#
                          ((Term tm a -> Unwrapped (Term tm a)) :: *)))
              (fmap
                 @ f
                 $dFunctor
                 @ (Unwrapped (Term tm a))
                 @ (Term tm a)
                 ((_Mul3 @ tm @ a)
                  `cast` ((<Unwrapped (Term tm a)>_R
                           -> Nth:2
                                ((<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term tm a)>_R
                                    -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                              ; Nth:3
                                  ((<Unwrapped (Term tm a)>_R
                                    -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; (Nth:1
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor (p1 |> <* -> * -> *>_N)>_R
                                                       -> <Functor (f2 |> <* -> *>_N)>_R
                                                       -> <(p1 |> <*
                                                                   -> *
                                                                   -> *>_N)>_R (D:R:UnwrappedTerm[0]
                                                                                  <tm>_N
                                                                                  <a>_N) (<(f2 |> <*
                                                                                                   -> *>_N)>_N (D:R:UnwrappedTerm[0]
                                                                                                                  <tm>_N
                                                                                                                  <a>_N))
                                                       -> <(p1 |> <* -> * -> *>_N) (Term
                                                                                      tm
                                                                                      a) ((f2 |> <*
                                                                                                  -> *>_N) (Term
                                                                                                              tm
                                                                                                              a))>_R))@<Exchange
                                                                                                                          (Unwrapped
                                                                                                                             (Term
                                                                                                                                tm
                                                                                                                                a))
                                                                                                                          (Unwrapped
                                                                                                                             (Term
                                                                                                                                tm
                                                                                                                                a))>_N)@<Identity>_N))))
                                      -> Nth:3
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term tm a>_N <Term tm a>_N)
                                                       ; Nth:3
                                                           ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term tm a>_N <Term tm a>_N)
                                                            ; (<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Wrapped[0] <Term tm a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor (p1 |> <* -> * -> *>_N)>_R
                                                          -> <Functor (f2 |> <* -> *>_N)>_R
                                                          -> <(p1 |> <*
                                                                      -> *
                                                                      -> *>_N)>_R (D:R:UnwrappedTerm[0]
                                                                                     <tm>_N
                                                                                     <a>_N) (<(f2 |> <*
                                                                                                      -> *>_N)>_N (D:R:UnwrappedTerm[0]
                                                                                                                     <tm>_N
                                                                                                                     <a>_N))
                                                          -> <(p1 |> <* -> * -> *>_N) (Term
                                                                                         tm
                                                                                         a) ((f2 |> <*
                                                                                                     -> *>_N) (Term
                                                                                                                 tm
                                                                                                                 a))>_R))@<Exchange
                                                                                                                             (Unwrapped
                                                                                                                                (Term
                                                                                                                                   tm
                                                                                                                                   a))
                                                                                                                             (Unwrapped
                                                                                                                                (Term
                                                                                                                                   tm
                                                                                                                                   a))>_N)@<Identity>_N))))))
                              ; Nth:2
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                              ; Nth:3
                                  ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                   ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                      -> Sym (N:Identity[0] <Term tm a>_R))))
                          ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                          :: ((Unwrapped (Term tm a) -> Unwrapped (Term tm a)) :: *)
                             ~R#
                             ((Unwrapped (Term tm a) -> Term tm a) :: *)))) } in
      let {
        f2
          :: p (MulF (Term tm) a) (f (MulF (Term tm) a))
             -> p (tm (Term tm) a) (f (tm (Term tm) a))
        f2
          = ($dHasMulF
             `cast` (N:HasMulF[0] <tm>_N
                     :: (HasMulF tm :: Constraint)
                        ~R#
                        ((forall (f :: * -> *) a. Prism' (tm f a) (MulF f a)) :: *)))
              @ (Term tm) @ a @ p @ f $dChoice $dApplicative } in
      let {
        g :: p (Term tm a, Term tm a) (f (Term tm a, Term tm a))
             -> p (MulF (Term tm) a) (f (MulF (Term tm) a))
        g = dimap
              @ p
              $dProfunctor
              @ (MulF (Term tm) a)
              @ (Term tm a, Term tm a)
              @ (f (Term tm a, Term tm a))
              @ (f (MulF (Term tm) a))
              (_Mul2 @ (Term tm) @ a)
              (fmap
                 @ f
                 $dFunctor
                 @ (Term tm a, Term tm a)
                 @ (MulF (Term tm) a)
                 (_Mul1 @ (Term tm) @ a)) } in
      \ (x :: p (Term tm a, Term tm a) (f (Term tm a, Term tm a))) ->
        f1
          ((f2 (g x))
           `cast` (<p>_R (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N)) (<f>_N (Sym
                                                                             (D:R:UnwrappedTerm[0]
                                                                                <tm>_N <a>_N)))
                   :: (p (tm (Term tm) a) (f (tm (Term tm) a)) :: *)
                      ~R#
                      (p (Unwrapped (Term tm a)) (f (Unwrapped (Term tm a))) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Mul.Type"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep :: KindRep
$krep = KindRepTyConApp $tcConstraint ([] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcMulF1 :: KindRep
$tcMulF1 = KindRepFun krep$*Arr* krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcHasMulF1 :: KindRep
$tcHasMulF1 = KindRepFun $tcMulF1 $krep

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1 :: KindRep
$krep1 = KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep2 :: KindRep
$krep2 = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3 :: KindRep
$krep3 = KindRepApp $krep2 $krep1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcMulF3 :: Addr#
$tcMulF3 = "MulF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcMulF2 :: TrName
$tcMulF2 = TrNameS $tcMulF3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcMulF :: TyCon
$tcMulF
  = TyCon
      4149507353333929091##
      1246214443398506002##
      $trModule
      $tcMulF2
      0#
      $tcMulF1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4 :: [KindRep]
$krep4 = : @ KindRep $krep1 ([] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5 :: [KindRep]
$krep5 = : @ KindRep $krep2 $krep4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6 :: KindRep
$krep6 = KindRepTyConApp $tcMulF $krep5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7 :: KindRep
$krep7 = KindRepFun $krep3 $krep6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'TmMul1 :: KindRep
$tc'TmMul1 = KindRepFun $krep3 $krep7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'TmMul3 :: Addr#
$tc'TmMul3 = "'TmMul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'TmMul2 :: TrName
$tc'TmMul2 = TrNameS $tc'TmMul3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'TmMul :: TyCon
$tc'TmMul
  = TyCon
      14380589956823869737##
      11960804867761406589##
      $trModule
      $tc'TmMul2
      2#
      $tc'TmMul1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcHasMulF3 :: Addr#
$tcHasMulF3 = "HasMulF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcHasMulF2 :: TrName
$tcHasMulF2 = TrNameS $tcHasMulF3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcHasMulF :: TyCon
$tcHasMulF
  = TyCon
      12787519524745627131##
      12586991464795375984##
      $trModule
      $tcHasMulF2
      0#
      $tcHasMulF1



[ 5 of 20] Compiling Mul.Print        ( src/Mul/Print.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Mul/Print.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 85, types: 291, coercions: 77, joins: 0/1}

-- RHS size: {terms: 4, types: 25, coercions: 0, joins: 0/0}
printRules5
  :: forall (f :: (* -> *) -> * -> *) a.
     Applicative (Const (First (Term f a, Term f a)))
printRules5
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) ->
      $fApplicativeConst
        @ (First (Term f a, Term f a))
        ($fMonoidFirst @ (Term f a, Term f a))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
printRules4 :: Addr#
printRules4 = "("#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
printRules3 :: Addr#
printRules3 = " * "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
printRules2 :: Addr#
printRules2 = ")"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
printRules1 :: [Char]
printRules1 = unpackCString# printRules2

-- RHS size: {terms: 45, types: 154, coercions: 77, joins: 0/1}
$wprintRules
  :: forall (f :: (* -> *) -> * -> *) a.
     HasMulF f =>
     (# PrintRule (Term f a), [PrintRule (Term f a)] #)
$wprintRules
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (w :: HasMulF f) ->
      let {
        lvl
          :: ((Term f a, Term f a)
              -> Const (First (Term f a, Term f a)) (Term f a, Term f a))
             -> Term f a -> Const (First (Term f a, Term f a)) (Term f a)
        lvl
          = _Mul
              @ f
              @ a
              w
              @ (->)
              @ (Const (First (Term f a, Term f a)))
              $fChoice(->)
              (printRules5 @ f @ a) } in
      (# PrintRule
           @ (Term f a)
           (\ (p :: Term f a -> Maybe [Char]) (tm :: Term f a) ->
              case (lvl
                      ((Just @ (Term f a, Term f a))
                       `cast` ((<(Term f a, Term f a)>_R
                                -> Sym N:First[0] <(Term f a, Term f a)>_N)
                               ; (<(Term f a, Term f a)>_R
                                  -> Sym
                                       (N:Const[0]
                                          <*>_N
                                          <First (Term f a, Term f a)>_R
                                          <(Term f a, Term f a)>_P))
                               :: (((Term f a, Term f a) -> Maybe (Term f a, Term f a)) :: *)
                                  ~R#
                                  (((Term f a, Term f a)
                                    -> Const
                                         (First (Term f a, Term f a)) (Term f a, Term f a)) :: *)))
                      tm)
                   `cast` (Nth:3
                             ((<Term f a>_R
                               -> N:Const[0] <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)
                              ; (<Term f a>_R -> N:First[0] <(Term f a, Term f a)>_N))
                           :: (Const (First (Term f a, Term f a)) (Term f a) :: *)
                              ~R#
                              (Maybe (Term f a, Term f a) :: *))
              of {
                Nothing -> Nothing @ [Char];
                Just x ->
                  case x of { (tm1, tm2) ->
                  case p tm1 of {
                    Nothing -> Nothing @ [Char];
                    Just x1 ->
                      case p tm2 of {
                        Nothing -> Nothing @ [Char];
                        Just x2 ->
                          Just
                            @ [Char]
                            (unpackAppendCString#
                               printRules4
                               (++
                                  @ Char
                                  x1
                                  (unpackAppendCString# printRules3 (++ @ Char x2 printRules1))))
                      }
                  }
                  }
              }),
         [] @ (PrintRule (Term f a)) #)

-- RHS size: {terms: 10, types: 39, coercions: 0, joins: 0/0}
printRules
  :: forall (f :: (* -> *) -> * -> *) a.
     HasMulF f =>
     [PrintRule (Term f a)]
printRules
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (w :: HasMulF f) ->
      case $wprintRules @ f @ a w of { (# ww1, ww2 #) ->
      : @ (PrintRule (Term f a)) ww1 ww2
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Mul.Print"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[ 6 of 20] Compiling Mul              ( src/Mul.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Mul.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 29, types: 84, coercions: 246, joins: 0/0}

-- RHS size: {terms: 12, types: 30, coercions: 113, joins: 0/0}
mul1
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasMulF tm =>
     Term tm a -> Term tm a -> Tagged (Term tm a) (Identity (Term tm a))
mul1
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasMulF :: HasMulF tm)
      (tm1 :: Term tm a)
      (tm2 :: Term tm a) ->
      _Mul
        @ tm
        @ a
        $dHasMulF
        @ Tagged
        @ Identity
        $fChoiceTagged
        $fApplicativeIdentity
        ((tm1, tm2)
         `cast` (Nth:2
                   ((Sym (N:Identity[0] <(Term tm a, Term tm a)>_R) -> <Term tm a>_R)
                    ; ((Sym
                          (N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <(Term tm a, Term tm a)>_P
                               <Identity (Term tm a, Term tm a)>_R))
                       -> <Term tm a>_R)
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> Sym (N:Identity[0] <Term tm a>_R))
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> N:Identity[0]
                            (Sym (N:Identity[0] <Term tm a>_R)
                             ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                 :: ((Term tm a, Term tm a) :: *)
                    ~R#
                    (Tagged
                       (Term tm a, Term tm a) (Identity (Term tm a, Term tm a)) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 133, joins: 0/0}
mul
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasMulF tm =>
     Term tm a -> Term tm a -> Term tm a
mul
  = mul1
    `cast` (forall (tm :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            <HasMulF tm>_R
            -> <Term tm a>_R
            -> <Term tm a>_R
            -> Nth:3
                 ((<Tagged
                      (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                   -> Sym
                        (N:Identity[0]
                           (Sym (N:Identity[0] <Term tm a>_R)
                            ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                  ; (<Tagged
                        (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                     -> N:Identity[0] <Term tm a>_R)
                  ; ((N:Tagged[0]
                        <*>_N
                        <(Term tm a, Term tm a)>_P
                        <Identity (Term tm a, Term tm a)>_R
                      ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                     -> <Term tm a>_R)
                  ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
            :: ((forall (tm :: (* -> *) -> * -> *) a.
                 HasMulF tm =>
                 Term tm a
                 -> Term tm a -> Tagged (Term tm a) (Identity (Term tm a))) :: *)
               ~R#
               ((forall (tm :: (* -> *) -> * -> *) a.
                 HasMulF tm =>
                 Term tm a -> Term tm a -> Term tm a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Mul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[ 7 of 20] Compiling Base.Type        ( src/Base/Type.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Base/Type.o )

==================== Simplified expression ====================
makePrisms
  (mkNameG_tc
     (unpackCString# "initial-0.1.0.0-inplace"#)
     (unpackCString# "Base.Type"#)
     (unpackCString# "BaseF"#))



==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 735, types: 2,196, coercions: 1,260, joins: 0/12}

-- RHS size: {terms: 3, types: 10, coercions: 2, joins: 0/0}
_BaseF
  :: forall (tm :: (* -> *) -> * -> *).
     HasBaseF tm =>
     forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)
_BaseF
  = \ (@ (tm :: (* -> *) -> * -> *)) (v :: HasBaseF tm) ->
      v
      `cast` (N:HasBaseF[0] <tm>_N
              :: (HasBaseF tm :: Constraint)
                 ~R#
                 ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *))

-- RHS size: {terms: 7, types: 28, coercions: 0, joins: 0/0}
$fHasBaseFBaseF_$c_BaseF
  :: forall (f :: * -> *) a. Prism' (BaseF f a) (BaseF f a)
$fHasBaseFBaseF_$c_BaseF
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (p :: * -> * -> *))
      (@ (f1 :: * -> *))
      _
      _ ->
      id @ (p (BaseF f a) (f1 (BaseF f a)))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasBaseFBaseF :: HasBaseF BaseF
$fHasBaseFBaseF
  = $fHasBaseFBaseF_$c_BaseF
    `cast` (Sym (N:HasBaseF[0] <BaseF>_N)
            :: ((forall (f :: * -> *) a. Prism' (BaseF f a) (BaseF f a)) :: *)
               ~R#
               (HasBaseF BaseF :: Constraint))

-- RHS size: {terms: 16, types: 224, coercions: 225, joins: 0/0}
$fGenericBaseF_$cto
  :: forall (f :: * -> *) a x. Rep (BaseF f a) x -> BaseF f a
$fGenericBaseF_$cto
  = \ (@ (f :: * -> *)) (@ a) (@ x) (ds :: Rep (BaseF f a) x) ->
      case ds
           `cast` (Sub (Rep_BaseF[0] <f>_N <a>_N)
                   ; N:M1[0]
                       <*>_N
                       <D>_P
                       <'MetaData "BaseF" "Base.Type" "initial-0.1.0.0-inplace" 'False>_P
                       <M1
                          C
                          ('MetaCons "TmLit" 'PrefixI 'False)
                          (M1
                             S
                             ('MetaSel
                                'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                             (K1 R Int))
                        :+: M1
                              C
                              ('MetaCons "TmAdd" 'PrefixI 'False)
                              (M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (f a))
                               :*: M1
                                     S
                                     ('MetaSel
                                        'Nothing
                                        'NoSourceUnpackedness
                                        'NoSourceStrictness
                                        'DecidedLazy)
                                     (K1 R (f a)))>_R <x>_N
                   :: (Rep (BaseF f a) x :: *)
                      ~R#
                      ((:+:)
                         (M1
                            C
                            ('MetaCons "TmLit" 'PrefixI 'False)
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R Int)))
                         (M1
                            C
                            ('MetaCons "TmAdd" 'PrefixI 'False)
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R (f a))
                             :*: M1
                                   S
                                   ('MetaSel
                                      'Nothing
                                      'NoSourceUnpackedness
                                      'NoSourceStrictness
                                      'DecidedLazy)
                                   (K1 R (f a))))
                         x :: *))
      of {
        L1 ds1 ->
          TmLit
            @ f
            @ a
            (ds1
             `cast` (N:M1[0]
                       <*>_N
                       <C>_P
                       <'MetaCons "TmLit" 'PrefixI 'False>_P
                       <M1
                          S
                          ('MetaSel
                             'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                          (K1 R Int)>_R
                     ; N:M1[0]
                         <*>_N
                         <S>_P
                         <'MetaSel
                            'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                         <K1 R Int>_R <x>_N
                     ; N:K1[0] <*>_N <R>_P <Int>_R <x>_P
                     :: (M1
                           C
                           ('MetaCons "TmLit" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R Int))
                           x :: *)
                        ~R#
                        (Int :: *)));
        R1 ds1 ->
          case ds1
               `cast` (N:M1[0]
                         <*>_N
                         <C>_P
                         <'MetaCons "TmAdd" 'PrefixI 'False>_P
                         <M1
                            S
                            ('MetaSel
                               'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                            (K1 R (f a))
                          :*: M1
                                S
                                ('MetaSel
                                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                (K1 R (f a))>_R <x>_N
                       :: (M1
                             C
                             ('MetaCons "TmAdd" 'PrefixI 'False)
                             (M1
                                S
                                ('MetaSel
                                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                (K1 R (f a))
                              :*: M1
                                    S
                                    ('MetaSel
                                       'Nothing
                                       'NoSourceUnpackedness
                                       'NoSourceStrictness
                                       'DecidedLazy)
                                    (K1 R (f a)))
                             x :: *)
                          ~R#
                          ((:*:)
                             (M1
                                S
                                ('MetaSel
                                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                (K1 R (f a)))
                             (M1
                                S
                                ('MetaSel
                                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                (K1 R (f a)))
                             x :: *))
          of
          { :*: ds2 ds3 ->
          TmAdd
            @ f
            @ a
            (ds2
             `cast` (N:M1[0]
                       <*>_N
                       <S>_P
                       <'MetaSel
                          'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                       <K1 R (f a)>_R <x>_N
                     ; N:K1[0] <*>_N <R>_P <f a>_R <x>_P
                     :: (M1
                           S
                           ('MetaSel
                              'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                           (K1 R (f a))
                           x :: *)
                        ~R#
                        (f a :: *)))
            (ds3
             `cast` (N:M1[0]
                       <*>_N
                       <S>_P
                       <'MetaSel
                          'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                       <K1 R (f a)>_R <x>_N
                     ; N:K1[0] <*>_N <R>_P <f a>_R <x>_P
                     :: (M1
                           S
                           ('MetaSel
                              'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                           (K1 R (f a))
                           x :: *)
                        ~R#
                        (f a :: *)))
          }
      }

-- RHS size: {terms: 14, types: 191, coercions: 149, joins: 0/0}
$fGenericBaseF1
  :: forall (f :: * -> *) a x.
     BaseF f a
     -> (:+:)
          (M1
             C
             ('MetaCons "TmLit" 'PrefixI 'False)
             (M1
                S
                ('MetaSel
                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                (K1 R Int)))
          (M1
             C
             ('MetaCons "TmAdd" 'PrefixI 'False)
             (M1
                S
                ('MetaSel
                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                (K1 R (f a))
              :*: M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R (f a))))
          x
$fGenericBaseF1
  = \ (@ (f :: * -> *)) (@ a) (@ x) (x1 :: BaseF f a) ->
      case x1 of {
        TmLit g1 ->
          L1
            @ *
            @ (M1
                 C
                 ('MetaCons "TmLit" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R Int)))
            @ (M1
                 C
                 ('MetaCons "TmAdd" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R (f a))
                  :*: M1
                        S
                        ('MetaSel
                           'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                        (K1 R (f a))))
            @ x
            (g1
             `cast` (Sym (N:K1[0] <*>_N <R>_P <Int>_R <x>_P)
                     ; Sym
                         (N:M1[0]
                            <*>_N
                            <S>_P
                            <'MetaSel
                               'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                            <K1 R Int>_R)
                       ; Sym
                           (N:M1[0]
                              <*>_N
                              <C>_P
                              <'MetaCons "TmLit" 'PrefixI 'False>_P
                              <M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R Int)>_R) <x>_N
                     :: (Int :: *)
                        ~R#
                        (M1
                           C
                           ('MetaCons "TmLit" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R Int))
                           x :: *)));
        TmAdd g1 g2 ->
          R1
            @ *
            @ (M1
                 C
                 ('MetaCons "TmLit" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R Int)))
            @ (M1
                 C
                 ('MetaCons "TmAdd" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R (f a))
                  :*: M1
                        S
                        ('MetaSel
                           'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                        (K1 R (f a))))
            @ x
            ((:*:
                @ *
                @ (M1
                     S
                     ('MetaSel
                        'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                     (K1 R (f a)))
                @ (M1
                     S
                     ('MetaSel
                        'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                     (K1 R (f a)))
                @ x
                (g1
                 `cast` (Sym (N:K1[0] <*>_N <R>_P <f a>_R <x>_P)
                         ; Sym
                             (N:M1[0]
                                <*>_N
                                <S>_P
                                <'MetaSel
                                   'Nothing
                                   'NoSourceUnpackedness
                                   'NoSourceStrictness
                                   'DecidedLazy>_P
                                <K1 R (f a)>_R) <x>_N
                         :: (f a :: *)
                            ~R#
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R (f a))
                               x :: *)))
                (g2
                 `cast` (Sym (N:K1[0] <*>_N <R>_P <f a>_R <x>_P)
                         ; Sym
                             (N:M1[0]
                                <*>_N
                                <S>_P
                                <'MetaSel
                                   'Nothing
                                   'NoSourceUnpackedness
                                   'NoSourceStrictness
                                   'DecidedLazy>_P
                                <K1 R (f a)>_R) <x>_N
                         :: (f a :: *)
                            ~R#
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R (f a))
                               x :: *))))
             `cast` (Sym
                       (N:M1[0]
                          <*>_N
                          <C>_P
                          <'MetaCons "TmAdd" 'PrefixI 'False>_P
                          <M1
                             S
                             ('MetaSel
                                'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                             (K1 R (f a))
                           :*: M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (f a))>_R) <x>_N
                     :: ((:*:)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (f a)))
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (f a)))
                           x :: *)
                        ~R#
                        (M1
                           C
                           ('MetaCons "TmAdd" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (f a))
                            :*: M1
                                  S
                                  ('MetaSel
                                     'Nothing
                                     'NoSourceUnpackedness
                                     'NoSourceStrictness
                                     'DecidedLazy)
                                  (K1 R (f a)))
                           x :: *)))
      }

-- RHS size: {terms: 5, types: 13, coercions: 92, joins: 0/0}
$fGenericBaseF :: forall (f :: * -> *) a. Generic (BaseF f a)
$fGenericBaseF
  = \ (@ (f :: * -> *)) (@ a) ->
      C:Generic
        @ (BaseF f a)
        (($fGenericBaseF1 @ f @ a)
         `cast` (forall (x :: <*>_N).
                 <BaseF f a>_R
                 -> Sym
                      (N:M1[0]
                         <*>_N
                         <D>_P
                         <'MetaData "BaseF" "Base.Type" "initial-0.1.0.0-inplace" 'False>_P
                         <M1
                            C
                            ('MetaCons "TmLit" 'PrefixI 'False)
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R Int))
                          :+: M1
                                C
                                ('MetaCons "TmAdd" 'PrefixI 'False)
                                (M1
                                   S
                                   ('MetaSel
                                      'Nothing
                                      'NoSourceUnpackedness
                                      'NoSourceStrictness
                                      'DecidedLazy)
                                   (K1 R (f a))
                                 :*: M1
                                       S
                                       ('MetaSel
                                          'Nothing
                                          'NoSourceUnpackedness
                                          'NoSourceStrictness
                                          'DecidedLazy)
                                       (K1 R (f a)))>_R)
                    ; Sub (Sym (Rep_BaseF[0] <f>_N <a>_N)) <x>_N
                 :: ((forall x.
                      BaseF f a
                      -> (:+:)
                           (M1
                              C
                              ('MetaCons "TmLit" 'PrefixI 'False)
                              (M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R Int)))
                           (M1
                              C
                              ('MetaCons "TmAdd" 'PrefixI 'False)
                              (M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (f a))
                               :*: M1
                                     S
                                     ('MetaSel
                                        'Nothing
                                        'NoSourceUnpackedness
                                        'NoSourceStrictness
                                        'DecidedLazy)
                                     (K1 R (f a))))
                           x) :: *)
                    ~R#
                    ((forall x. BaseF f a -> Rep (BaseF f a) x) :: *)))
        ($fGenericBaseF_$cto @ f @ a)

-- RHS size: {terms: 18, types: 23, coercions: 6, joins: 0/0}
$fNFDataBaseF_$crnf
  :: forall (f :: * -> *) a. NFData (f a) => BaseF f a -> ()
$fNFDataBaseF_$crnf
  = \ (@ (f :: * -> *))
      (@ a)
      ($dNFData :: NFData (f a))
      (eta :: BaseF f a) ->
      case eta of {
        TmLit g1 -> case g1 of { I# ipv -> () };
        TmAdd g1 g2 ->
          case ($dNFData
                `cast` (N:NFData[0] <f a>_N
                        :: (NFData (f a) :: Constraint) ~R# ((f a -> ()) :: *)))
                 g1
          of
          { () ->
          ($dNFData
           `cast` (N:NFData[0] <f a>_N
                   :: (NFData (f a) :: Constraint) ~R# ((f a -> ()) :: *)))
            g2
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
$fNFDataBaseF
  :: forall (f :: * -> *) a. NFData (f a) => NFData (BaseF f a)
$fNFDataBaseF
  = $fNFDataBaseF_$crnf
    `cast` (forall (f :: <* -> *>_N).
            forall (a :: <*>_N).
            <NFData (f a)>_R -> Sym (N:NFData[0] <BaseF f a>_N)
            :: ((forall (f :: * -> *) a. NFData (f a) => BaseF f a -> ()) :: *)
               ~R#
               ((forall (f :: * -> *) a.
                 NFData (f a) =>
                 NFData (BaseF f a)) :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowBaseF3 :: Int
$fShowBaseF3 = I# 11#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowBaseF4 :: Addr#
$fShowBaseF4 = "TmLit "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowBaseF2 :: Addr#
$fShowBaseF2 = "TmAdd "#

-- RHS size: {terms: 87, types: 67, coercions: 0, joins: 0/2}
$w$cshowsPrec
  :: forall (f :: * -> *) a. Show (f a) => Int# -> BaseF f a -> ShowS
$w$cshowsPrec
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Show (f a))
      (ww :: Int#)
      (w1 :: BaseF f a) ->
      case w1 of {
        TmLit b1 ->
          case tagToEnum# @ Bool (>=# ww 11#) of {
            False ->
              \ (x :: String) ->
                unpackAppendCString#
                  $fShowBaseF4
                  (case b1 of { I# ww3 ->
                   case $wshowSignedInt 11# ww3 x of { (# ww5, ww6 #) ->
                   : @ Char ww5 ww6
                   }
                   });
            True ->
              \ (x :: String) ->
                : @ Char
                  $fShow(,)4
                  (unpackAppendCString#
                     $fShowBaseF4
                     (case b1 of { I# ww3 ->
                      case $wshowSignedInt 11# ww3 (: @ Char $fShow(,)2 x) of
                      { (# ww5, ww6 #) ->
                      : @ Char ww5 ww6
                      }
                      }))
          };
        TmAdd b1 b2 ->
          let {
            f1 :: String -> String
            f1 = showsPrec @ (f a) w $fShowBaseF3 b1 } in
          let {
            g :: String -> String
            g = showsPrec @ (f a) w $fShowBaseF3 b2 } in
          case tagToEnum# @ Bool (>=# ww 11#) of {
            False ->
              \ (x :: String) ->
                unpackAppendCString# $fShowBaseF2 (f1 (: @ Char showSpace1 (g x)));
            True ->
              \ (x :: String) ->
                : @ Char
                  $fShow(,)4
                  (unpackAppendCString#
                     $fShowBaseF2
                     (f1 (: @ Char showSpace1 (g (: @ Char $fShow(,)2 x)))))
          }
      }

-- RHS size: {terms: 12, types: 17, coercions: 0, joins: 0/0}
$fShowBaseF_$cshowsPrec
  :: forall (f :: * -> *) a. Show (f a) => Int -> BaseF f a -> ShowS
$fShowBaseF_$cshowsPrec
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Show (f a))
      (w1 :: Int)
      (w2 :: BaseF f a) ->
      case w1 of { I# ww1 -> $w$cshowsPrec @ f @ a w ww1 w2 }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowBaseF1 :: Int
$fShowBaseF1 = I# 0#

-- RHS size: {terms: 9, types: 15, coercions: 0, joins: 0/0}
$fShowBaseF_$cshow
  :: forall (f :: * -> *) a. Show (f a) => BaseF f a -> String
$fShowBaseF_$cshow
  = \ (@ (f :: * -> *))
      (@ a)
      ($dShow :: Show (f a))
      (x :: BaseF f a) ->
      $w$cshowsPrec @ f @ a $dShow 0# x ([] @ Char)

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
$fShowBaseF_$cshowList
  :: forall (f :: * -> *) a. Show (f a) => [BaseF f a] -> ShowS
$fShowBaseF_$cshowList
  = \ (@ (f :: * -> *))
      (@ a)
      ($dShow :: Show (f a))
      (eta :: [BaseF f a])
      (eta1 :: String) ->
      showList__
        @ (BaseF f a)
        (\ (w :: BaseF f a) -> $w$cshowsPrec @ f @ a $dShow 0# w)
        eta
        eta1

-- RHS size: {terms: 10, types: 18, coercions: 0, joins: 0/0}
$fShowBaseF
  :: forall (f :: * -> *) a. Show (f a) => Show (BaseF f a)
$fShowBaseF
  = \ (@ (f :: * -> *)) (@ a) ($dShow :: Show (f a)) ->
      C:Show
        @ (BaseF f a)
        ($fShowBaseF_$cshowsPrec @ f @ a $dShow)
        ($fShowBaseF_$cshow @ f @ a $dShow)
        ($fShowBaseF_$cshowList @ f @ a $dShow)

-- RHS size: {terms: 36, types: 44, coercions: 0, joins: 0/0}
$fOrdBaseF_$c<
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     BaseF f a -> BaseF f a -> Bool
$fOrdBaseF_$c<
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: BaseF f a)
      (b :: BaseF f a) ->
      case a1 of {
        TmLit a2 ->
          case b of {
            TmLit b1 -> ltInt a2 b1;
            TmAdd ipv ipv1 -> True
          };
        TmAdd a2 a3 ->
          case b of {
            TmLit ipv -> False;
            TmAdd b1 b2 ->
              case compare @ (f a) $dOrd a2 b1 of {
                LT -> True;
                EQ -> < @ (f a) $dOrd a3 b2;
                GT -> False
              }
          }
      }

-- RHS size: {terms: 36, types: 44, coercions: 0, joins: 0/0}
$fOrdBaseF_$ccompare
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     BaseF f a -> BaseF f a -> Ordering
$fOrdBaseF_$ccompare
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: BaseF f a)
      (b :: BaseF f a) ->
      case a1 of {
        TmLit a2 ->
          case b of {
            TmLit b1 -> compareInt a2 b1;
            TmAdd ipv ipv1 -> LT
          };
        TmAdd a2 a3 ->
          case b of {
            TmLit ipv -> GT;
            TmAdd b1 b2 ->
              case compare @ (f a) $dOrd a2 b1 of {
                LT -> LT;
                EQ -> compare @ (f a) $dOrd a3 b2;
                GT -> GT
              }
          }
      }

-- RHS size: {terms: 34, types: 44, coercions: 0, joins: 0/0}
$fEqBaseF_$c==
  :: forall (f :: * -> *) a.
     Eq (f a) =>
     BaseF f a -> BaseF f a -> Bool
$fEqBaseF_$c==
  = \ (@ (f :: * -> *))
      (@ a)
      ($dEq :: Eq (f a))
      (ds :: BaseF f a)
      (ds1 :: BaseF f a) ->
      case ds of {
        TmLit a1 ->
          case ds1 of {
            TmLit b1 -> eqInt a1 b1;
            TmAdd ipv ipv1 -> False
          };
        TmAdd a1 a2 ->
          case ds1 of {
            TmLit ipv -> False;
            TmAdd b1 b2 ->
              case == @ (f a) $dEq a1 b1 of {
                False -> False;
                True -> == @ (f a) $dEq a2 b2
              }
          }
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fEqBaseF_$c/=
  :: forall (f :: * -> *) a.
     Eq (f a) =>
     BaseF f a -> BaseF f a -> Bool
$fEqBaseF_$c/=
  = \ (@ (f :: * -> *))
      (@ a)
      ($dEq :: Eq (f a))
      (a1 :: BaseF f a)
      (b :: BaseF f a) ->
      case $fEqBaseF_$c== @ f @ a $dEq a1 b of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
$fEqBaseF :: forall (f :: * -> *) a. Eq (f a) => Eq (BaseF f a)
$fEqBaseF
  = \ (@ (f :: * -> *)) (@ a) ($dEq :: Eq (f a)) ->
      C:Eq
        @ (BaseF f a)
        ($fEqBaseF_$c== @ f @ a $dEq)
        ($fEqBaseF_$c/= @ f @ a $dEq)

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
$fOrdBaseF_$cp1Ord
  :: forall (f :: * -> *) a. Ord (f a) => Eq (BaseF f a)
$fOrdBaseF_$cp1Ord
  = \ (@ (f :: * -> *)) (@ a) ($dOrd :: Ord (f a)) ->
      $fEqBaseF @ f @ a ($p1Ord @ (f a) $dOrd)

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdBaseF_$c<=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     BaseF f a -> BaseF f a -> Bool
$fOrdBaseF_$c<=
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: BaseF f a)
      (b :: BaseF f a) ->
      case $fOrdBaseF_$c< @ f @ a $dOrd b a1 of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdBaseF_$cmax
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     BaseF f a -> BaseF f a -> BaseF f a
$fOrdBaseF_$cmax
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (x :: BaseF f a)
      (y :: BaseF f a) ->
      case $fOrdBaseF_$c< @ f @ a $dOrd y x of {
        False -> y;
        True -> x
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdBaseF_$c>=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     BaseF f a -> BaseF f a -> Bool
$fOrdBaseF_$c>=
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: BaseF f a)
      (b :: BaseF f a) ->
      case $fOrdBaseF_$c< @ f @ a $dOrd a1 b of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdBaseF_$cmin
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     BaseF f a -> BaseF f a -> BaseF f a
$fOrdBaseF_$cmin
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (x :: BaseF f a)
      (y :: BaseF f a) ->
      case $fOrdBaseF_$c< @ f @ a $dOrd y x of {
        False -> x;
        True -> y
      }

-- RHS size: {terms: 24, types: 34, coercions: 0, joins: 0/0}
$fOrdBaseF :: forall (f :: * -> *) a. Ord (f a) => Ord (BaseF f a)
$fOrdBaseF
  = \ (@ (f :: * -> *)) (@ a) ($dOrd :: Ord (f a)) ->
      C:Ord
        @ (BaseF f a)
        ($fOrdBaseF_$cp1Ord @ f @ a $dOrd)
        ($fOrdBaseF_$ccompare @ f @ a $dOrd)
        ($fOrdBaseF_$c< @ f @ a $dOrd)
        ($fOrdBaseF_$c<= @ f @ a $dOrd)
        (\ (a1 :: BaseF f a) (b :: BaseF f a) ->
           $fOrdBaseF_$c< @ f @ a $dOrd b a1)
        ($fOrdBaseF_$c>= @ f @ a $dOrd)
        ($fOrdBaseF_$cmax @ f @ a $dOrd)
        ($fOrdBaseF_$cmin @ f @ a $dOrd)

-- RHS size: {terms: 11, types: 25, coercions: 0, joins: 0/0}
_TmLit1
  :: forall (f :: * -> *) a. BaseF f a -> Either (BaseF f a) Int
_TmLit1
  = \ (@ (f :: * -> *)) (@ a) (x :: BaseF f a) ->
      case x of wild {
        TmLit y1 -> Right @ (BaseF f a) @ Int y1;
        TmAdd ipv ipv1 -> Left @ (BaseF f a) @ Int wild
      }

-- RHS size: {terms: 31, types: 108, coercions: 0, joins: 0/2}
_TmLit :: forall (f :: * -> *) a. Prism' (BaseF f a) Int
_TmLit
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (p :: * -> * -> *))
      (@ (f1 :: * -> *))
      ($dChoice :: Choice p)
      ($dApplicative :: Applicative f1) ->
      let {
        f2
          :: p (Either (BaseF f a) Int) (Either (BaseF f a) (f1 Int))
             -> p (BaseF f a) (f1 (BaseF f a))
        f2
          = dimap
              @ p
              ($p1Choice @ p $dChoice)
              @ (BaseF f a)
              @ (Either (BaseF f a) Int)
              @ (Either (BaseF f a) (f1 Int))
              @ (f1 (BaseF f a))
              (_TmLit1 @ f @ a)
              (let {
                 ds :: f1 Int -> f1 (BaseF f a)
                 ds
                   = fmap
                       @ f1
                       ($p1Applicative @ f1 $dApplicative)
                       @ Int
                       @ (BaseF f a)
                       (TmLit @ f @ a) } in
               \ (ds1 :: Either (BaseF f a) (f1 Int)) ->
                 case ds1 of {
                   Left x -> pure @ f1 $dApplicative @ (BaseF f a) x;
                   Right y -> ds y
                 }) } in
      \ (x :: p Int (f1 Int)) ->
        f2 (right' @ p $dChoice @ Int @ (f1 Int) @ (BaseF f a) x)

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
_Add2
  :: forall (tm :: (* -> *) -> * -> *) a. Term tm a -> Term tm a
_Add2
  = \ (@ (tm :: (* -> *) -> * -> *)) (@ a) (x :: Term tm a) -> x

-- RHS size: {terms: 4, types: 14, coercions: 0, joins: 0/0}
_Add1
  :: forall (tm :: (* -> *) -> * -> *) a.
     Unwrapped (Term tm a) -> Unwrapped (Term tm a)
_Add1
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      (x :: Unwrapped (Term tm a)) ->
      x

-- RHS size: {terms: 29, types: 123, coercions: 383, joins: 0/3}
_Lit
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasBaseF tm =>
     Prism' (Term tm a) Int
_Lit
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF tm)
      (@ (p :: * -> * -> *))
      (@ (f :: * -> *))
      ($dChoice :: Choice p)
      ($dApplicative :: Applicative f) ->
      let {
        f1
          :: p (Unwrapped (Term tm a)) (f (Unwrapped (Term tm a)))
             -> p (Term tm a) (f (Term tm a))
        f1
          = dimap
              @ p
              ($p1Choice @ p $dChoice)
              @ (Term tm a)
              @ (Unwrapped (Term tm a))
              @ (f (Unwrapped (Term tm a)))
              @ (f (Term tm a))
              ((_Add2 @ tm @ a)
               `cast` (<Term tm a>_R
                       -> N:Term[0] <tm>_N <a>_N
                          ; Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))
                       :: ((Term tm a -> Term tm a) :: *)
                          ~R#
                          ((Term tm a -> Unwrapped (Term tm a)) :: *)))
              (fmap
                 @ f
                 ($p1Applicative @ f $dApplicative)
                 @ (Unwrapped (Term tm a))
                 @ (Term tm a)
                 ((_Add1 @ tm @ a)
                  `cast` ((<Unwrapped (Term tm a)>_R
                           -> Nth:2
                                ((<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term tm a)>_R
                                    -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                              ; Nth:3
                                  ((<Unwrapped (Term tm a)>_R
                                    -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; (Nth:1
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor (p1 |> <* -> * -> *>_N)>_R
                                                       -> <Functor (f2 |> <* -> *>_N)>_R
                                                       -> <(p1 |> <*
                                                                   -> *
                                                                   -> *>_N)>_R (D:R:UnwrappedTerm[0]
                                                                                  <tm>_N
                                                                                  <a>_N) (<(f2 |> <*
                                                                                                   -> *>_N)>_N (D:R:UnwrappedTerm[0]
                                                                                                                  <tm>_N
                                                                                                                  <a>_N))
                                                       -> <(p1 |> <* -> * -> *>_N) (Term
                                                                                      tm
                                                                                      a) ((f2 |> <*
                                                                                                  -> *>_N) (Term
                                                                                                              tm
                                                                                                              a))>_R))@<Exchange
                                                                                                                          (Unwrapped
                                                                                                                             (Term
                                                                                                                                tm
                                                                                                                                a))
                                                                                                                          (Unwrapped
                                                                                                                             (Term
                                                                                                                                tm
                                                                                                                                a))>_N)@<Identity>_N))))
                                      -> Nth:3
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term tm a>_N <Term tm a>_N)
                                                       ; Nth:3
                                                           ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term tm a>_N <Term tm a>_N)
                                                            ; (<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Wrapped[0] <Term tm a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor (p1 |> <* -> * -> *>_N)>_R
                                                          -> <Functor (f2 |> <* -> *>_N)>_R
                                                          -> <(p1 |> <*
                                                                      -> *
                                                                      -> *>_N)>_R (D:R:UnwrappedTerm[0]
                                                                                     <tm>_N
                                                                                     <a>_N) (<(f2 |> <*
                                                                                                      -> *>_N)>_N (D:R:UnwrappedTerm[0]
                                                                                                                     <tm>_N
                                                                                                                     <a>_N))
                                                          -> <(p1 |> <* -> * -> *>_N) (Term
                                                                                         tm
                                                                                         a) ((f2 |> <*
                                                                                                     -> *>_N) (Term
                                                                                                                 tm
                                                                                                                 a))>_R))@<Exchange
                                                                                                                             (Unwrapped
                                                                                                                                (Term
                                                                                                                                   tm
                                                                                                                                   a))
                                                                                                                             (Unwrapped
                                                                                                                                (Term
                                                                                                                                   tm
                                                                                                                                   a))>_N)@<Identity>_N))))))
                              ; Nth:2
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                              ; Nth:3
                                  ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                   ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                      -> Sym (N:Identity[0] <Term tm a>_R))))
                          ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                          :: ((Unwrapped (Term tm a) -> Unwrapped (Term tm a)) :: *)
                             ~R#
                             ((Unwrapped (Term tm a) -> Term tm a) :: *)))) } in
      let {
        f2
          :: p (BaseF (Term tm) a) (f (BaseF (Term tm) a))
             -> p (tm (Term tm) a) (f (tm (Term tm) a))
        f2
          = ($dHasBaseF
             `cast` (N:HasBaseF[0] <tm>_N
                     :: (HasBaseF tm :: Constraint)
                        ~R#
                        ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
              @ (Term tm) @ a @ p @ f $dChoice $dApplicative } in
      let {
        g :: p Int (f Int) -> p (BaseF (Term tm) a) (f (BaseF (Term tm) a))
        g = _TmLit @ (Term tm) @ a @ p @ f $dChoice $dApplicative } in
      \ (x :: p Int (f Int)) ->
        f1
          ((f2 (g x))
           `cast` (<p>_R (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N)) (<f>_N (Sym
                                                                             (D:R:UnwrappedTerm[0]
                                                                                <tm>_N <a>_N)))
                   :: (p (tm (Term tm) a) (f (tm (Term tm) a)) :: *)
                      ~R#
                      (p (Unwrapped (Term tm a)) (f (Unwrapped (Term tm a))) :: *)))

-- RHS size: {terms: 16, types: 45, coercions: 0, joins: 0/0}
_TmAdd2
  :: forall (f1 :: * -> *) a1 (f2 :: * -> *) a2.
     BaseF f1 a1 -> Either (BaseF f2 a2) (f1 a1, f1 a1)
_TmAdd2
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (f1 :: * -> *))
      (@ a1)
      (x :: BaseF f a) ->
      case x of {
        TmLit y1 -> Left @ (BaseF f1 a1) @ (f a, f a) (TmLit @ f1 @ a1 y1);
        TmAdd y1 y2 -> Right @ (BaseF f1 a1) @ (f a, f a) (y1, y2)
      }

-- RHS size: {terms: 9, types: 22, coercions: 0, joins: 0/0}
_TmAdd1 :: forall (f :: * -> *) a. (f a, f a) -> BaseF f a
_TmAdd1
  = \ (@ (f :: * -> *)) (@ a) (ds :: (f a, f a)) ->
      case ds of { (x1, x2) -> TmAdd @ f @ a x1 x2 }

-- RHS size: {terms: 33, types: 168, coercions: 0, joins: 0/2}
_TmAdd
  :: forall (f1 :: * -> *) a1 (f2 :: * -> *) a2.
     Prism (BaseF f2 a2) (BaseF f1 a1) (f2 a2, f2 a2) (f1 a1, f1 a1)
_TmAdd
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (f1 :: * -> *))
      (@ a1)
      (@ (p :: * -> * -> *))
      (@ (f2 :: * -> *))
      ($dChoice :: Choice p)
      ($dApplicative :: Applicative f2) ->
      let {
        f3
          :: p (Either (BaseF f a) (f1 a1, f1 a1)) (Either
                                                      (BaseF f a) (f2 (f a, f a)))
             -> p (BaseF f1 a1) (f2 (BaseF f a))
        f3
          = dimap
              @ p
              ($p1Choice @ p $dChoice)
              @ (BaseF f1 a1)
              @ (Either (BaseF f a) (f1 a1, f1 a1))
              @ (Either (BaseF f a) (f2 (f a, f a)))
              @ (f2 (BaseF f a))
              (_TmAdd2 @ f1 @ a1 @ f @ a)
              (let {
                 ds :: f2 (f a, f a) -> f2 (BaseF f a)
                 ds
                   = fmap
                       @ f2
                       ($p1Applicative @ f2 $dApplicative)
                       @ (f a, f a)
                       @ (BaseF f a)
                       (_TmAdd1 @ f @ a) } in
               \ (ds1 :: Either (BaseF f a) (f2 (f a, f a))) ->
                 case ds1 of {
                   Left x -> pure @ f2 $dApplicative @ (BaseF f a) x;
                   Right y -> ds y
                 }) } in
      \ (x :: p (f1 a1, f1 a1) (f2 (f a, f a))) ->
        f3
          (right'
             @ p $dChoice @ (f1 a1, f1 a1) @ (f2 (f a, f a)) @ (BaseF f a) x)

-- RHS size: {terms: 29, types: 150, coercions: 383, joins: 0/3}
_Add
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasBaseF tm =>
     Prism' (Term tm a) (Term tm a, Term tm a)
_Add
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF tm)
      (@ (p :: * -> * -> *))
      (@ (f :: * -> *))
      ($dChoice :: Choice p)
      ($dApplicative :: Applicative f) ->
      let {
        f1
          :: p (Unwrapped (Term tm a)) (f (Unwrapped (Term tm a)))
             -> p (Term tm a) (f (Term tm a))
        f1
          = dimap
              @ p
              ($p1Choice @ p $dChoice)
              @ (Term tm a)
              @ (Unwrapped (Term tm a))
              @ (f (Unwrapped (Term tm a)))
              @ (f (Term tm a))
              ((_Add2 @ tm @ a)
               `cast` (<Term tm a>_R
                       -> N:Term[0] <tm>_N <a>_N
                          ; Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))
                       :: ((Term tm a -> Term tm a) :: *)
                          ~R#
                          ((Term tm a -> Unwrapped (Term tm a)) :: *)))
              (fmap
                 @ f
                 ($p1Applicative @ f $dApplicative)
                 @ (Unwrapped (Term tm a))
                 @ (Term tm a)
                 ((_Add1 @ tm @ a)
                  `cast` ((<Unwrapped (Term tm a)>_R
                           -> Nth:2
                                ((<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term tm a)>_R
                                    -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                              ; Nth:3
                                  ((<Unwrapped (Term tm a)>_R
                                    -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; (Nth:1
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor (p1 |> <* -> * -> *>_N)>_R
                                                       -> <Functor (f2 |> <* -> *>_N)>_R
                                                       -> <(p1 |> <*
                                                                   -> *
                                                                   -> *>_N)>_R (D:R:UnwrappedTerm[0]
                                                                                  <tm>_N
                                                                                  <a>_N) (<(f2 |> <*
                                                                                                   -> *>_N)>_N (D:R:UnwrappedTerm[0]
                                                                                                                  <tm>_N
                                                                                                                  <a>_N))
                                                       -> <(p1 |> <* -> * -> *>_N) (Term
                                                                                      tm
                                                                                      a) ((f2 |> <*
                                                                                                  -> *>_N) (Term
                                                                                                              tm
                                                                                                              a))>_R))@<Exchange
                                                                                                                          (Unwrapped
                                                                                                                             (Term
                                                                                                                                tm
                                                                                                                                a))
                                                                                                                          (Unwrapped
                                                                                                                             (Term
                                                                                                                                tm
                                                                                                                                a))>_N)@<Identity>_N))))
                                      -> Nth:3
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term tm a>_N <Term tm a>_N)
                                                       ; Nth:3
                                                           ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term tm a>_N <Term tm a>_N)
                                                            ; (<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Wrapped[0] <Term tm a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor (p1 |> <* -> * -> *>_N)>_R
                                                          -> <Functor (f2 |> <* -> *>_N)>_R
                                                          -> <(p1 |> <*
                                                                      -> *
                                                                      -> *>_N)>_R (D:R:UnwrappedTerm[0]
                                                                                     <tm>_N
                                                                                     <a>_N) (<(f2 |> <*
                                                                                                      -> *>_N)>_N (D:R:UnwrappedTerm[0]
                                                                                                                     <tm>_N
                                                                                                                     <a>_N))
                                                          -> <(p1 |> <* -> * -> *>_N) (Term
                                                                                         tm
                                                                                         a) ((f2 |> <*
                                                                                                     -> *>_N) (Term
                                                                                                                 tm
                                                                                                                 a))>_R))@<Exchange
                                                                                                                             (Unwrapped
                                                                                                                                (Term
                                                                                                                                   tm
                                                                                                                                   a))
                                                                                                                             (Unwrapped
                                                                                                                                (Term
                                                                                                                                   tm
                                                                                                                                   a))>_N)@<Identity>_N))))))
                              ; Nth:2
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                              ; Nth:3
                                  ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                   ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                      -> Sym (N:Identity[0] <Term tm a>_R))))
                          ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                          :: ((Unwrapped (Term tm a) -> Unwrapped (Term tm a)) :: *)
                             ~R#
                             ((Unwrapped (Term tm a) -> Term tm a) :: *)))) } in
      let {
        f2
          :: p (BaseF (Term tm) a) (f (BaseF (Term tm) a))
             -> p (tm (Term tm) a) (f (tm (Term tm) a))
        f2
          = ($dHasBaseF
             `cast` (N:HasBaseF[0] <tm>_N
                     :: (HasBaseF tm :: Constraint)
                        ~R#
                        ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
              @ (Term tm) @ a @ p @ f $dChoice $dApplicative } in
      let {
        g :: p (Term tm a, Term tm a) (f (Term tm a, Term tm a))
             -> p (BaseF (Term tm) a) (f (BaseF (Term tm) a))
        g = _TmAdd
              @ (Term tm) @ a @ (Term tm) @ a @ p @ f $dChoice $dApplicative } in
      \ (x :: p (Term tm a, Term tm a) (f (Term tm a, Term tm a))) ->
        f1
          ((f2 (g x))
           `cast` (<p>_R (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N)) (<f>_N (Sym
                                                                             (D:R:UnwrappedTerm[0]
                                                                                <tm>_N <a>_N)))
                   :: (p (tm (Term tm) a) (f (tm (Term tm) a)) :: *)
                      ~R#
                      (p (Unwrapped (Term tm a)) (f (Unwrapped (Term tm a))) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Base.Type"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep :: KindRep
$krep = KindRepTyConApp $tcInt ([] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1 :: KindRep
$krep1 = KindRepTyConApp $tcConstraint ([] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcBaseF1 :: KindRep
$tcBaseF1 = KindRepFun krep$*Arr* krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcHasBaseF1 :: KindRep
$tcHasBaseF1 = KindRepFun $tcBaseF1 $krep1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep2 :: KindRep
$krep2 = KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3 :: KindRep
$krep3 = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4 :: KindRep
$krep4 = KindRepApp $krep3 $krep2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcBaseF3 :: Addr#
$tcBaseF3 = "BaseF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcBaseF2 :: TrName
$tcBaseF2 = TrNameS $tcBaseF3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcBaseF :: TyCon
$tcBaseF
  = TyCon
      5710402104387038467##
      1385426594668003690##
      $trModule
      $tcBaseF2
      0#
      $tcBaseF1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5 :: [KindRep]
$krep5 = : @ KindRep $krep2 ([] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6 :: [KindRep]
$krep6 = : @ KindRep $krep3 $krep5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7 :: KindRep
$krep7 = KindRepTyConApp $tcBaseF $krep6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8 :: KindRep
$krep8 = KindRepFun $krep4 $krep7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'TmAdd1 :: KindRep
$tc'TmAdd1 = KindRepFun $krep4 $krep8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'TmAdd3 :: Addr#
$tc'TmAdd3 = "'TmAdd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'TmAdd2 :: TrName
$tc'TmAdd2 = TrNameS $tc'TmAdd3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'TmAdd :: TyCon
$tc'TmAdd
  = TyCon
      18055387651722055321##
      14156134494288808707##
      $trModule
      $tc'TmAdd2
      2#
      $tc'TmAdd1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'TmLit1 :: KindRep
$tc'TmLit1 = KindRepFun $krep $krep7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'TmLit3 :: Addr#
$tc'TmLit3 = "'TmLit"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'TmLit2 :: TrName
$tc'TmLit2 = TrNameS $tc'TmLit3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'TmLit :: TyCon
$tc'TmLit
  = TyCon
      1739297698197566515##
      4377365426959515487##
      $trModule
      $tc'TmLit2
      2#
      $tc'TmLit1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcHasBaseF3 :: Addr#
$tcHasBaseF3 = "HasBaseF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcHasBaseF2 :: TrName
$tcHasBaseF2 = TrNameS $tcHasBaseF3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcHasBaseF :: TyCon
$tcHasBaseF
  = TyCon
      3644673707559412914##
      8728320531909697975##
      $trModule
      $tcHasBaseF2
      0#
      $tcHasBaseF1



[ 8 of 20] Compiling Mul.Eval         ( src/Mul/Eval.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Mul/Eval.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 115, types: 411, coercions: 1,014, joins: 0/1}

-- RHS size: {terms: 7, types: 17, coercions: 12, joins: 0/0}
lvl
  :: forall a b.
     Const (First Int) a -> Const (First Int) b -> First Int
lvl
  = \ (@ a)
      (@ b)
      (ds :: Const (First Int) a)
      (ds1 :: Const (First Int) b) ->
      $fMonoidFirst_$cmappend
        @ Int
        (ds
         `cast` (N:Const[0] <*>_N <First Int>_R <a>_P
                 :: (Const (First Int) a :: *) ~R# (First Int :: *)))
        (ds1
         `cast` (N:Const[0] <*>_N <First Int>_R <b>_P
                 :: (Const (First Int) b :: *) ~R# (First Int :: *)))

-- RHS size: {terms: 9, types: 22, coercions: 12, joins: 0/0}
lvl1
  :: forall a b c.
     (a -> b -> c)
     -> Const (First Int) a -> Const (First Int) b -> First Int
lvl1
  = \ (@ a)
      (@ b)
      (@ c)
      _
      (ds1 :: Const (First Int) a)
      (ds2 :: Const (First Int) b) ->
      $fMonoidFirst_$cmappend
        @ Int
        (ds1
         `cast` (N:Const[0] <*>_N <First Int>_R <a>_P
                 :: (Const (First Int) a :: *) ~R# (First Int :: *)))
        (ds2
         `cast` (N:Const[0] <*>_N <First Int>_R <b>_P
                 :: (Const (First Int) b :: *) ~R# (First Int :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
lvl2 :: forall a. a -> Maybe Int
lvl2 = \ (@ a) _ -> Nothing @ Int

-- RHS size: {terms: 9, types: 12, coercions: 136, joins: 0/0}
$s$fApplicativeConst :: Applicative (Const (First Int))
$s$fApplicativeConst
  = C:Applicative
      @ (Const (First Int))
      ($fFunctorConst @ (First Int))
      (lvl2
       `cast` (forall (a :: <*>_N).
               (<a>_R -> Sym N:First[0] <Int>_N)
               ; (<a>_R -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P))
               :: ((forall a. a -> Maybe Int) :: *)
                  ~R#
                  ((forall a. a -> Const (First Int) a) :: *)))
      ((\ (@ a) (@ b) -> $fMonoidFirst_$cmappend @ Int)
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               Sym (N:Const[0] <*>_N <First Int>_R <a -> b>_P)
               -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P)
               -> Sym (N:Const[0] <*>_N <First Int>_R <b>_P)
               :: ((forall a b. First Int -> First Int -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) (a -> b)
                    -> Const (First Int) a -> Const (First Int) b) :: *)))
      (lvl1
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               forall (c :: <*>_N).
               <a -> b -> c>_R
               -> <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <c>_P)
               :: ((forall a b c.
                    (a -> b -> c)
                    -> Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b c.
                    (a -> b -> c)
                    -> Const (First Int) a
                    -> Const (First Int) b
                    -> Const (First Int) c) :: *)))
      (lvl
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <b>_P)
               :: ((forall a b.
                    Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) a
                    -> Const (First Int) b -> Const (First Int) b) :: *)))
      (lvl
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P)
               :: ((forall a b.
                    Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) a
                    -> Const (First Int) b -> Const (First Int) a) :: *)))

-- RHS size: {terms: 4, types: 25, coercions: 0, joins: 0/0}
poly_$dApplicative
  :: forall (f :: (* -> *) -> * -> *) a.
     Applicative (Const (First (Term f a, Term f a)))
poly_$dApplicative
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) ->
      $fApplicativeConst
        @ (First (Term f a, Term f a))
        ($fMonoidFirst @ (Term f a, Term f a))

-- RHS size: {terms: 10, types: 27, coercions: 48, joins: 0/0}
lvl3
  :: forall (f :: (* -> *) -> * -> *) a.
     BaseF (Term f) a -> Const (First Int) (BaseF (Term f) a)
lvl3
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (x :: BaseF (Term f) a) ->
      case x of {
        TmLit y1 ->
          (Just @ Int y1)
          `cast` (Nth:3
                    ((<Int>_R -> Sym N:First[0] <Int>_N)
                     ; (<Int>_R -> Sym (N:Const[0] <*>_N <First Int>_R <Int>_P)))
                  ; N:Const[0] <*>_N <First Int>_R <Int>_P
                  ; Sym (N:Const[0] <*>_N <First Int>_R <BaseF (Term f) a>_P)
                  :: (Maybe Int :: *)
                     ~R#
                     (Const (First Int) (BaseF (Term f) a) :: *));
        TmAdd ipv ipv1 ->
          (Nothing @ Int)
          `cast` (Sym N:First[0] <Int>_N
                  ; Sym (N:Const[0] <*>_N <First Int>_R <BaseF (Term f) a>_P)
                  :: (Maybe Int :: *)
                     ~R#
                     (Const (First Int) (BaseF (Term f) a) :: *))
      }

-- RHS size: {terms: 52, types: 183, coercions: 806, joins: 0/1}
evalRules
  :: forall (f :: (* -> *) -> * -> *) a.
     (HasBaseF f, HasMulF f) =>
     [EvalRule (Term f a)]
evalRules
  = \ (@ (f :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF f)
      ($dHasMulF :: HasMulF f) ->
      let {
        lvl4
          :: ((Term f a, Term f a)
              -> Const (First (Term f a, Term f a)) (Term f a, Term f a))
             -> Term f a -> Const (First (Term f a, Term f a)) (Term f a)
        lvl4
          = _Mul
              @ f
              @ a
              $dHasMulF
              @ (->)
              @ (Const (First (Term f a, Term f a)))
              $fChoice(->)
              (poly_$dApplicative @ f @ a) } in
      : @ (EvalRule (Term f a))
        (EvalRule
           @ (Term f a)
           (\ (e :: Term f a -> Term f a) (tm :: Term f a) ->
              case (lvl4
                      ((Just @ (Term f a, Term f a))
                       `cast` ((<(Term f a, Term f a)>_R
                                -> Sym N:First[0] <(Term f a, Term f a)>_N)
                               ; (<(Term f a, Term f a)>_R
                                  -> Sym
                                       (N:Const[0]
                                          <*>_N
                                          <First (Term f a, Term f a)>_R
                                          <(Term f a, Term f a)>_P))
                               :: (((Term f a, Term f a) -> Maybe (Term f a, Term f a)) :: *)
                                  ~R#
                                  (((Term f a, Term f a)
                                    -> Const
                                         (First (Term f a, Term f a)) (Term f a, Term f a)) :: *)))
                      tm)
                   `cast` (Nth:3
                             ((<Term f a>_R
                               -> N:Const[0] <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)
                              ; (<Term f a>_R -> N:First[0] <(Term f a, Term f a)>_N))
                           :: (Const (First (Term f a, Term f a)) (Term f a) :: *)
                              ~R#
                              (Maybe (Term f a, Term f a) :: *))
              of {
                Nothing -> Nothing @ (Term f a);
                Just x ->
                  case x of { (tm1, tm2) ->
                  case (($dHasBaseF
                         `cast` (N:HasBaseF[0] <f>_N
                                 :: (HasBaseF f :: Constraint)
                                    ~R#
                                    ((forall (f1 :: * -> *) a. Prism' (f f1 a) (BaseF f1 a)) :: *)))
                          @ (Term f)
                          @ a
                          @ (->)
                          @ (Const (First Int))
                          $fChoice(->)
                          $s$fApplicativeConst
                          (lvl3 @ f @ a)
                          ((e tm1)
                           `cast` (Nth:2
                                     ((<Term f a>_R -> Sym N:First[0] <Int>_N)
                                      ; (<Term f a>_R
                                         -> Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)))
                                   ; N:Term[0] <f>_N <a>_N
                                   :: (Term f a :: *) ~R# (f (Term f) a :: *))))
                       `cast` (N:Const[0]
                                 <*>_N
                                 <First Int>_R
                                 U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                               ; Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                               ; Nth:3
                                   ((<Term f a>_R -> N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                                    ; (<Term f a>_R -> N:First[0] <Int>_N))
                               :: (Const (First Int) (f (Term f) a) :: *) ~R# (Maybe Int :: *))
                  of {
                    Nothing -> Nothing @ (Term f a);
                    Just x1 ->
                      case (($dHasBaseF
                             `cast` (N:HasBaseF[0] <f>_N
                                     :: (HasBaseF f :: Constraint)
                                        ~R#
                                        ((forall (f1 :: * -> *) a.
                                          Prism' (f f1 a) (BaseF f1 a)) :: *)))
                              @ (Term f)
                              @ a
                              @ (->)
                              @ (Const (First Int))
                              $fChoice(->)
                              $s$fApplicativeConst
                              (lvl3 @ f @ a)
                              ((e tm2)
                               `cast` (Nth:2
                                         ((<Term f a>_R -> Sym N:First[0] <Int>_N)
                                          ; (<Term f a>_R
                                             -> Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)))
                                       ; N:Term[0] <f>_N <a>_N
                                       :: (Term f a :: *) ~R# (f (Term f) a :: *))))
                           `cast` (N:Const[0]
                                     <*>_N
                                     <First Int>_R
                                     U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                                   ; Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                                   ; Nth:3
                                       ((<Term f a>_R
                                         -> N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                                        ; (<Term f a>_R -> N:First[0] <Int>_N))
                                   :: (Const (First Int) (f (Term f) a) :: *) ~R# (Maybe Int :: *))
                      of {
                        Nothing -> Nothing @ (Term f a);
                        Just x2 ->
                          Just
                            @ (Term f a)
                            ((($dHasBaseF
                               `cast` (N:HasBaseF[0] <f>_N
                                       :: (HasBaseF f :: Constraint)
                                          ~R#
                                          ((forall (f1 :: * -> *) a.
                                            Prism' (f f1 a) (BaseF f1 a)) :: *)))
                                @ (Term f)
                                @ a
                                @ Tagged
                                @ Identity
                                $fChoiceTagged
                                $fApplicativeIdentity
                                ((TmLit @ (Term f) @ a ($fNumInt_$c* x1 x2))
                                 `cast` (Nth:3
                                           (((Sym (N:Identity[0] <Int>_R)
                                              ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                                             -> <BaseF (Term f) a>_R)
                                            ; (<Tagged Int (Identity Int)>_R
                                               -> Sym (N:Identity[0] <BaseF (Term f) a>_R)
                                                  ; Sym
                                                      (N:Tagged[0]
                                                         <*>_N
                                                         <BaseF (Term f) a>_P
                                                         <Identity (BaseF (Term f) a)>_R)))
                                         :: (BaseF (Term f) a :: *)
                                            ~R#
                                            (Tagged
                                               (BaseF (Term f) a)
                                               (Identity (BaseF (Term f) a)) :: *))))
                             `cast` (N:Tagged[0]
                                       <*>_N
                                       U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                                       (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <f>_N <a>_N))))_R
                                     ; Nth:2
                                         ((N:Identity[0] <Unwrapped (Term f a)>_R
                                           -> N:Identity[0] <Term f a>_R)
                                          ; (<Unwrapped (Term f a)>_R
                                             -> Sym (N:Identity[0] <Term f a>_R))
                                          ; (<Unwrapped (Term f a)>_R
                                             -> Nth:3
                                                  ((N:Identity[0] <f (Term f) a>_R
                                                    -> N:Identity[0] <Term f a>_R)
                                                   ; (<f (Term f) a>_R -> N:Term[0] <f>_N <a>_N))
                                                ; Nth:2
                                                    ((<f (Term f) a>_R
                                                      -> Sym (N:Term[0] <f>_N) <a>_N)
                                                     ; (Sym (N:Identity[0] <f (Term f) a>_R)
                                                        -> Sym (N:Identity[0] <Term f a>_R)))
                                                ; Nth:3
                                                    ((<Unwrapped (Term f a)>_R
                                                      -> (Identity
                                                            (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                           <f>_N <a>_N))))_R)
                                                     ; (<Unwrapped (Term f a)>_R
                                                        -> N:Identity[0] <Unwrapped (Term f a)>_R))
                                                ; Nth:2
                                                    ((<Unwrapped (Term f a)>_R
                                                      -> Sym
                                                           (N:Identity[0] <Unwrapped (Term f a)>_R))
                                                     ; (<Unwrapped (Term f a)>_R
                                                        -> (Identity
                                                              (Sub (D:R:UnwrappedTerm[0]
                                                                        <f>_N <a>_N)))_R))))
                                     ; Nth:3
                                         ((<Unwrapped (Term f a)>_R
                                           -> Nth:2
                                                ((<Unwrapped (Term f a)>_R
                                                  -> (Identity
                                                        (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                       <f>_N <a>_N))))_R)
                                                 ; (<Unwrapped (Term f a)>_R
                                                    -> N:Identity[0] <Unwrapped (Term f a)>_R))
                                              ; Nth:3
                                                  ((<Unwrapped (Term f a)>_R
                                                    -> Sym (N:Identity[0] <Unwrapped (Term f a)>_R))
                                                   ; (Nth:1
                                                        (Nth:2
                                                           (Nth:3
                                                              (Nth:3
                                                                 (((Sym (N:Wrapped[0] <Term f a>_N)
                                                                    ; Sym
                                                                        (N:Rewrapped[0]
                                                                           <Term f a>_N
                                                                           <Term f a>_N)
                                                                    ; Nth:3
                                                                        ((<(Term f a :: *)
                                                                           ~
                                                                           (Term f a :: *)>_R
                                                                          -> N:Rewrapped[0]
                                                                               <Term f a>_N
                                                                               <Term f a>_N)
                                                                         ; (<(Term f a :: *)
                                                                             ~
                                                                             (Term f a :: *)>_R
                                                                            -> N:Wrapped[0]
                                                                                 <Term f a>_N))
                                                                    ; (forall (p1 :: <*
                                                                                      -> * -> *>_N).
                                                                       forall (f2 :: <* -> *>_N).
                                                                       <Profunctor p1>_R
                                                                       -> <Functor f2>_R
                                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                    <f>_N
                                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                      <f>_N
                                                                                                      <a>_N))
                                                                       -> <p1 (Term f a) (f2 (Term
                                                                                                f
                                                                                                a))>_R))@<Exchange
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))>_N)@<Identity>_N))))
                                                      -> Nth:3
                                                           (Nth:2
                                                              (Nth:3
                                                                 (Nth:3
                                                                    (((Sym
                                                                         (N:Wrapped[0] <Term f a>_N)
                                                                       ; Sym
                                                                           (N:Rewrapped[0]
                                                                              <Term f a>_N
                                                                              <Term f a>_N)
                                                                       ; Nth:3
                                                                           ((<(Term f a :: *)
                                                                              ~
                                                                              (Term f a :: *)>_R
                                                                             -> N:Rewrapped[0]
                                                                                  <Term f a>_N
                                                                                  <Term f a>_N)
                                                                            ; (<(Term f a :: *)
                                                                                ~
                                                                                (Term f a :: *)>_R
                                                                               -> N:Wrapped[0]
                                                                                    <Term f a>_N))
                                                                       ; (forall (p1 :: <*
                                                                                         -> *
                                                                                         -> *>_N).
                                                                          forall (f2 :: <* -> *>_N).
                                                                          <Profunctor p1>_R
                                                                          -> <Functor f2>_R
                                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                       <f>_N
                                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                         <f>_N
                                                                                                         <a>_N))
                                                                          -> <p1 (Term
                                                                                    f a) (f2 (Term
                                                                                                f
                                                                                                a))>_R))@<Exchange
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))>_N)@<Identity>_N))))))
                                              ; Nth:2
                                                  ((N:Identity[0] <f (Term f) a>_R
                                                    -> N:Identity[0] <Term f a>_R)
                                                   ; (<f (Term f) a>_R -> N:Term[0] <f>_N <a>_N))
                                              ; Nth:3
                                                  ((<f (Term f) a>_R -> Sym (N:Term[0] <f>_N) <a>_N)
                                                   ; (Sym (N:Identity[0] <f (Term f) a>_R)
                                                      -> Sym (N:Identity[0] <Term f a>_R))))
                                          ; (<Unwrapped (Term f a)>_R -> N:Identity[0] <Term f a>_R)
                                          ; (Sym (N:Identity[0] <Unwrapped (Term f a)>_R)
                                             -> Sym (N:Identity[0] <Term f a>_R)))
                                     ; Sym (N:Tagged[0] <*>_N <Term f a>_P <Identity (Term f a)>_R)
                                     ; Nth:3
                                         ((<Tagged Int (Identity Int)>_R
                                           -> Sym
                                                (N:Identity[0]
                                                   (Sym (N:Identity[0] <Term f a>_R)
                                                    ; Sym
                                                        (N:Tagged[0]
                                                           <*>_N
                                                           <Term f a>_P
                                                           <Identity (Term f a)>_R))))
                                          ; (<Tagged Int (Identity Int)>_R
                                             -> N:Identity[0] <Term f a>_R)
                                          ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                              ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                             -> <Term f a>_R)
                                          ; (N:Identity[0] <Int>_R -> <Term f a>_R))
                                     :: (Tagged (f (Term f) a) (Identity (f (Term f) a)) :: *)
                                        ~R#
                                        (Term f a :: *)))
                      }
                  }
                  }
              }))
        ([] @ (EvalRule (Term f a)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Mul.Eval"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1


------ Local rules for imported ids --------
"SPEC/Mul.Eval $fApplicativeConst @ (First Int)"
    forall (v :: Monoid (First Int)).
      $fApplicativeConst @ (First Int) v
      = $s$fApplicativeConst


[ 9 of 20] Compiling Example.Term.BaseMul.Type ( src/Example/Term/BaseMul/Type.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Term/BaseMul/Type.o )

==================== Simplified expression ====================
makePrisms
  (mkNameG_tc
     (unpackCString# "initial-0.1.0.0-inplace"#)
     (unpackCString# "Example.Term.BaseMul.Type"#)
     (unpackCString# "TermF"#))



==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 576, types: 1,502, coercions: 385, joins: 0/6}

-- RHS size: {terms: 12, types: 122, coercions: 174, joins: 0/0}
$fGenericTermF_$cto
  :: forall (f :: * -> *) a x. Rep (TermF f a) x -> TermF f a
$fGenericTermF_$cto
  = \ (@ (f :: * -> *)) (@ a) (@ x) (ds :: Rep (TermF f a) x) ->
      case ds
           `cast` (Sub (Rep_TermF[0] <f>_N <a>_N)
                   ; N:M1[0]
                       <*>_N
                       <D>_P
                       <'MetaData
                          "TermF"
                          "Example.Term.BaseMul.Type"
                          "initial-0.1.0.0-inplace"
                          'False>_P
                       <M1
                          C
                          ('MetaCons "BMBase" 'PrefixI 'False)
                          (M1
                             S
                             ('MetaSel
                                'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                             (K1 R (BaseF f a)))
                        :+: M1
                              C
                              ('MetaCons "BMMul" 'PrefixI 'False)
                              (M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (MulF f a)))>_R <x>_N
                   :: (Rep (TermF f a) x :: *)
                      ~R#
                      ((:+:)
                         (M1
                            C
                            ('MetaCons "BMBase" 'PrefixI 'False)
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R (BaseF f a))))
                         (M1
                            C
                            ('MetaCons "BMMul" 'PrefixI 'False)
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R (MulF f a))))
                         x :: *))
      of {
        L1 ds1 ->
          BMBase
            @ f
            @ a
            (ds1
             `cast` (N:M1[0]
                       <*>_N
                       <C>_P
                       <'MetaCons "BMBase" 'PrefixI 'False>_P
                       <M1
                          S
                          ('MetaSel
                             'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                          (K1 R (BaseF f a))>_R
                     ; N:M1[0]
                         <*>_N
                         <S>_P
                         <'MetaSel
                            'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                         <K1 R (BaseF f a)>_R <x>_N
                     ; N:K1[0] <*>_N <R>_P <BaseF f a>_R <x>_P
                     :: (M1
                           C
                           ('MetaCons "BMBase" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (BaseF f a)))
                           x :: *)
                        ~R#
                        (BaseF f a :: *)));
        R1 ds1 ->
          BMMul
            @ f
            @ a
            (ds1
             `cast` (N:M1[0]
                       <*>_N
                       <C>_P
                       <'MetaCons "BMMul" 'PrefixI 'False>_P
                       <M1
                          S
                          ('MetaSel
                             'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                          (K1 R (MulF f a))>_R
                     ; N:M1[0]
                         <*>_N
                         <S>_P
                         <'MetaSel
                            'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                         <K1 R (MulF f a)>_R <x>_N
                     ; N:K1[0] <*>_N <R>_P <MulF f a>_R <x>_P
                     :: (M1
                           C
                           ('MetaCons "BMMul" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (MulF f a)))
                           x :: *)
                        ~R#
                        (MulF f a :: *)))
      }

-- RHS size: {terms: 12, types: 125, coercions: 112, joins: 0/0}
$fGenericTermF1
  :: forall (f :: * -> *) a x.
     TermF f a
     -> (:+:)
          (M1
             C
             ('MetaCons "BMBase" 'PrefixI 'False)
             (M1
                S
                ('MetaSel
                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                (K1 R (BaseF f a))))
          (M1
             C
             ('MetaCons "BMMul" 'PrefixI 'False)
             (M1
                S
                ('MetaSel
                   'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                (K1 R (MulF f a))))
          x
$fGenericTermF1
  = \ (@ (f :: * -> *)) (@ a) (@ x) (x1 :: TermF f a) ->
      case x1 of {
        BMBase g1 ->
          L1
            @ *
            @ (M1
                 C
                 ('MetaCons "BMBase" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R (BaseF f a))))
            @ (M1
                 C
                 ('MetaCons "BMMul" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R (MulF f a))))
            @ x
            (g1
             `cast` (Sym (N:K1[0] <*>_N <R>_P <BaseF f a>_R <x>_P)
                     ; Sym
                         (N:M1[0]
                            <*>_N
                            <S>_P
                            <'MetaSel
                               'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                            <K1 R (BaseF f a)>_R)
                       ; Sym
                           (N:M1[0]
                              <*>_N
                              <C>_P
                              <'MetaCons "BMBase" 'PrefixI 'False>_P
                              <M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (BaseF f a))>_R) <x>_N
                     :: (BaseF f a :: *)
                        ~R#
                        (M1
                           C
                           ('MetaCons "BMBase" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (BaseF f a)))
                           x :: *)));
        BMMul g1 ->
          R1
            @ *
            @ (M1
                 C
                 ('MetaCons "BMBase" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R (BaseF f a))))
            @ (M1
                 C
                 ('MetaCons "BMMul" 'PrefixI 'False)
                 (M1
                    S
                    ('MetaSel
                       'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                    (K1 R (MulF f a))))
            @ x
            (g1
             `cast` (Sym (N:K1[0] <*>_N <R>_P <MulF f a>_R <x>_P)
                     ; Sym
                         (N:M1[0]
                            <*>_N
                            <S>_P
                            <'MetaSel
                               'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy>_P
                            <K1 R (MulF f a)>_R)
                       ; Sym
                           (N:M1[0]
                              <*>_N
                              <C>_P
                              <'MetaCons "BMMul" 'PrefixI 'False>_P
                              <M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (MulF f a))>_R) <x>_N
                     :: (MulF f a :: *)
                        ~R#
                        (M1
                           C
                           ('MetaCons "BMMul" 'PrefixI 'False)
                           (M1
                              S
                              ('MetaSel
                                 'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                              (K1 R (MulF f a)))
                           x :: *)))
      }

-- RHS size: {terms: 5, types: 13, coercions: 76, joins: 0/0}
$fGenericTermF :: forall (f :: * -> *) a. Generic (TermF f a)
$fGenericTermF
  = \ (@ (f :: * -> *)) (@ a) ->
      C:Generic
        @ (TermF f a)
        (($fGenericTermF1 @ f @ a)
         `cast` (forall (x :: <*>_N).
                 <TermF f a>_R
                 -> Sym
                      (N:M1[0]
                         <*>_N
                         <D>_P
                         <'MetaData
                            "TermF"
                            "Example.Term.BaseMul.Type"
                            "initial-0.1.0.0-inplace"
                            'False>_P
                         <M1
                            C
                            ('MetaCons "BMBase" 'PrefixI 'False)
                            (M1
                               S
                               ('MetaSel
                                  'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                               (K1 R (BaseF f a)))
                          :+: M1
                                C
                                ('MetaCons "BMMul" 'PrefixI 'False)
                                (M1
                                   S
                                   ('MetaSel
                                      'Nothing
                                      'NoSourceUnpackedness
                                      'NoSourceStrictness
                                      'DecidedLazy)
                                   (K1 R (MulF f a)))>_R)
                    ; Sub (Sym (Rep_TermF[0] <f>_N <a>_N)) <x>_N
                 :: ((forall x.
                      TermF f a
                      -> (:+:)
                           (M1
                              C
                              ('MetaCons "BMBase" 'PrefixI 'False)
                              (M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (BaseF f a))))
                           (M1
                              C
                              ('MetaCons "BMMul" 'PrefixI 'False)
                              (M1
                                 S
                                 ('MetaSel
                                    'Nothing 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)
                                 (K1 R (MulF f a))))
                           x) :: *)
                    ~R#
                    ((forall x. TermF f a -> Rep (TermF f a) x) :: *)))
        ($fGenericTermF_$cto @ f @ a)

-- RHS size: {terms: 14, types: 25, coercions: 0, joins: 0/0}
$fNFDataTermF_$crnf
  :: forall (f :: * -> *) a. NFData (f a) => TermF f a -> ()
$fNFDataTermF_$crnf
  = \ (@ (f :: * -> *))
      (@ a)
      ($dNFData :: NFData (f a))
      (eta :: TermF f a) ->
      case eta of {
        BMBase g1 -> $fNFDataBaseF_$crnf @ f @ a $dNFData g1;
        BMMul g1 -> $fNFDataMulF_$crnf @ f @ a $dNFData g1
      }

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
$fNFDataTermF
  :: forall (f :: * -> *) a. NFData (f a) => NFData (TermF f a)
$fNFDataTermF
  = $fNFDataTermF_$crnf
    `cast` (forall (f :: <* -> *>_N).
            forall (a :: <*>_N).
            <NFData (f a)>_R -> Sym (N:NFData[0] <TermF f a>_N)
            :: ((forall (f :: * -> *) a. NFData (f a) => TermF f a -> ()) :: *)
               ~R#
               ((forall (f :: * -> *) a.
                 NFData (f a) =>
                 NFData (TermF f a)) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowTermF5 :: Addr#
$fShowTermF5 = "BMBase "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowTermF4 :: [Char]
$fShowTermF4 = unpackCString# $fShowTermF5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowTermF3 :: Addr#
$fShowTermF3 = "BMMul "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowTermF2 :: [Char]
$fShowTermF2 = unpackCString# $fShowTermF3

-- RHS size: {terms: 65, types: 53, coercions: 0, joins: 0/2}
$w$cshowsPrec
  :: forall (f :: * -> *) a. Show (f a) => Int# -> TermF f a -> ShowS
$w$cshowsPrec
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Show (f a))
      (ww :: Int#)
      (w1 :: TermF f a) ->
      case w1 of {
        BMBase b1 ->
          let {
            g :: String -> String
            g = $w$cshowsPrec @ f @ a w 11# b1 } in
          case tagToEnum# @ Bool (>=# ww 11#) of {
            False -> \ (x :: String) -> ++ @ Char $fShowTermF4 (g x);
            True ->
              \ (x :: String) ->
                : @ Char
                  $fShow(,)4
                  (++ @ Char $fShowTermF4 (g (: @ Char $fShow(,)2 x)))
          };
        BMMul b1 ->
          let {
            g :: String -> String
            g = case b1 of { TmMul ww3 ww4 ->
                $w$cshowsPrec @ f @ a w 11# ww3 ww4
                } } in
          case tagToEnum# @ Bool (>=# ww 11#) of {
            False -> \ (x :: String) -> ++ @ Char $fShowTermF2 (g x);
            True ->
              \ (x :: String) ->
                : @ Char
                  $fShow(,)4
                  (++ @ Char $fShowTermF2 (g (: @ Char $fShow(,)2 x)))
          }
      }

-- RHS size: {terms: 12, types: 17, coercions: 0, joins: 0/0}
$fShowTermF_$cshowsPrec
  :: forall (f :: * -> *) a. Show (f a) => Int -> TermF f a -> ShowS
$fShowTermF_$cshowsPrec
  = \ (@ (f :: * -> *))
      (@ a)
      (w :: Show (f a))
      (w1 :: Int)
      (w2 :: TermF f a) ->
      case w1 of { I# ww1 -> $w$cshowsPrec @ f @ a w ww1 w2 }

-- RHS size: {terms: 26, types: 36, coercions: 0, joins: 0/0}
$fShowTermF_$cshow
  :: forall (f :: * -> *) a. Show (f a) => TermF f a -> String
$fShowTermF_$cshow
  = \ (@ (f :: * -> *))
      (@ a)
      ($dShow :: Show (f a))
      (x :: TermF f a) ->
      case x of {
        BMBase b1 ->
          ++
            @ Char
            $fShowTermF4
            ($w$cshowsPrec @ f @ a $dShow 11# b1 ([] @ Char));
        BMMul b1 ->
          ++
            @ Char
            $fShowTermF2
            (case b1 of { TmMul ww3 ww4 ->
             $w$cshowsPrec @ f @ a $dShow 11# ww3 ww4 ([] @ Char)
             })
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowTermF1 :: Int
$fShowTermF1 = I# 0#

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
$fShowTermF_$cshowList
  :: forall (f :: * -> *) a. Show (f a) => [TermF f a] -> ShowS
$fShowTermF_$cshowList
  = \ (@ (f :: * -> *))
      (@ a)
      ($dShow :: Show (f a))
      (eta :: [TermF f a])
      (eta1 :: String) ->
      showList__
        @ (TermF f a)
        (\ (w :: TermF f a) -> $w$cshowsPrec @ f @ a $dShow 0# w)
        eta
        eta1

-- RHS size: {terms: 10, types: 18, coercions: 0, joins: 0/0}
$fShowTermF
  :: forall (f :: * -> *) a. Show (f a) => Show (TermF f a)
$fShowTermF
  = \ (@ (f :: * -> *)) (@ a) ($dShow :: Show (f a)) ->
      C:Show
        @ (TermF f a)
        ($fShowTermF_$cshowsPrec @ f @ a $dShow)
        ($fShowTermF_$cshow @ f @ a $dShow)
        ($fShowTermF_$cshowList @ f @ a $dShow)

-- RHS size: {terms: 27, types: 46, coercions: 0, joins: 0/0}
$fOrdTermF_$c<
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     TermF f a -> TermF f a -> Bool
$fOrdTermF_$c<
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: TermF f a)
      (b :: TermF f a) ->
      case a1 of {
        BMBase a2 ->
          case b of {
            BMBase b1 -> $fOrdBaseF_$c< @ f @ a $dOrd a2 b1;
            BMMul ipv -> True
          };
        BMMul a2 ->
          case b of {
            BMBase ipv -> False;
            BMMul b1 -> $fOrdMulF_$c< @ f @ a $dOrd a2 b1
          }
      }

-- RHS size: {terms: 27, types: 46, coercions: 0, joins: 0/0}
$fOrdTermF_$ccompare
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     TermF f a -> TermF f a -> Ordering
$fOrdTermF_$ccompare
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: TermF f a)
      (b :: TermF f a) ->
      case a1 of {
        BMBase a2 ->
          case b of {
            BMBase b1 -> $fOrdBaseF_$ccompare @ f @ a $dOrd a2 b1;
            BMMul ipv -> LT
          };
        BMMul a2 ->
          case b of {
            BMBase ipv -> GT;
            BMMul b1 -> $fOrdMulF_$ccompare @ f @ a $dOrd a2 b1
          }
      }

-- RHS size: {terms: 27, types: 46, coercions: 0, joins: 0/0}
$fEqTermF_$c==
  :: forall (f :: * -> *) a.
     Eq (f a) =>
     TermF f a -> TermF f a -> Bool
$fEqTermF_$c==
  = \ (@ (f :: * -> *))
      (@ a)
      ($dEq :: Eq (f a))
      (ds :: TermF f a)
      (ds1 :: TermF f a) ->
      case ds of {
        BMBase a1 ->
          case ds1 of {
            BMBase b1 -> $fEqBaseF_$c== @ f @ a $dEq a1 b1;
            BMMul ipv -> False
          };
        BMMul a1 ->
          case ds1 of {
            BMBase ipv -> False;
            BMMul b1 -> $fEqMulF_$c== @ f @ a $dEq a1 b1
          }
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fEqTermF_$c/=
  :: forall (f :: * -> *) a.
     Eq (f a) =>
     TermF f a -> TermF f a -> Bool
$fEqTermF_$c/=
  = \ (@ (f :: * -> *))
      (@ a)
      ($dEq :: Eq (f a))
      (a1 :: TermF f a)
      (b :: TermF f a) ->
      case $fEqTermF_$c== @ f @ a $dEq a1 b of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
$fEqTermF :: forall (f :: * -> *) a. Eq (f a) => Eq (TermF f a)
$fEqTermF
  = \ (@ (f :: * -> *)) (@ a) ($dEq :: Eq (f a)) ->
      C:Eq
        @ (TermF f a)
        ($fEqTermF_$c== @ f @ a $dEq)
        ($fEqTermF_$c/= @ f @ a $dEq)

-- RHS size: {terms: 6, types: 13, coercions: 0, joins: 0/0}
$fOrdTermF_$cp1Ord
  :: forall (f :: * -> *) a. Ord (f a) => Eq (TermF f a)
$fOrdTermF_$cp1Ord
  = \ (@ (f :: * -> *)) (@ a) ($dOrd :: Ord (f a)) ->
      $fEqTermF @ f @ a ($p1Ord @ (f a) $dOrd)

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdTermF_$c<=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     TermF f a -> TermF f a -> Bool
$fOrdTermF_$c<=
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: TermF f a)
      (b :: TermF f a) ->
      case $fOrdTermF_$c< @ f @ a $dOrd b a1 of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdTermF_$cmax
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     TermF f a -> TermF f a -> TermF f a
$fOrdTermF_$cmax
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (x :: TermF f a)
      (y :: TermF f a) ->
      case $fOrdTermF_$c< @ f @ a $dOrd y x of {
        False -> y;
        True -> x
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdTermF_$c>=
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     TermF f a -> TermF f a -> Bool
$fOrdTermF_$c>=
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (a1 :: TermF f a)
      (b :: TermF f a) ->
      case $fOrdTermF_$c< @ f @ a $dOrd a1 b of {
        False -> True;
        True -> False
      }

-- RHS size: {terms: 14, types: 18, coercions: 0, joins: 0/0}
$fOrdTermF_$cmin
  :: forall (f :: * -> *) a.
     Ord (f a) =>
     TermF f a -> TermF f a -> TermF f a
$fOrdTermF_$cmin
  = \ (@ (f :: * -> *))
      (@ a)
      ($dOrd :: Ord (f a))
      (x :: TermF f a)
      (y :: TermF f a) ->
      case $fOrdTermF_$c< @ f @ a $dOrd y x of {
        False -> x;
        True -> y
      }

-- RHS size: {terms: 24, types: 34, coercions: 0, joins: 0/0}
$fOrdTermF :: forall (f :: * -> *) a. Ord (f a) => Ord (TermF f a)
$fOrdTermF
  = \ (@ (f :: * -> *)) (@ a) ($dOrd :: Ord (f a)) ->
      C:Ord
        @ (TermF f a)
        ($fOrdTermF_$cp1Ord @ f @ a $dOrd)
        ($fOrdTermF_$ccompare @ f @ a $dOrd)
        ($fOrdTermF_$c< @ f @ a $dOrd)
        ($fOrdTermF_$c<= @ f @ a $dOrd)
        (\ (a1 :: TermF f a) (b :: TermF f a) ->
           $fOrdTermF_$c< @ f @ a $dOrd b a1)
        ($fOrdTermF_$c>= @ f @ a $dOrd)
        ($fOrdTermF_$cmax @ f @ a $dOrd)
        ($fOrdTermF_$cmin @ f @ a $dOrd)

-- RHS size: {terms: 11, types: 30, coercions: 0, joins: 0/0}
_BMBase1
  :: forall (f :: * -> *) a.
     TermF f a -> Either (TermF f a) (BaseF f a)
_BMBase1
  = \ (@ (f :: * -> *)) (@ a) (x :: TermF f a) ->
      case x of wild {
        BMBase y1 -> Right @ (TermF f a) @ (BaseF f a) y1;
        BMMul ipv -> Left @ (TermF f a) @ (BaseF f a) wild
      }

-- RHS size: {terms: 31, types: 134, coercions: 0, joins: 0/2}
_BMBase :: forall (f :: * -> *) a. Prism' (TermF f a) (BaseF f a)
_BMBase
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (p :: * -> * -> *))
      (@ (f1 :: * -> *))
      ($dChoice :: Choice p)
      ($dApplicative :: Applicative f1) ->
      let {
        f2
          :: p (Either (TermF f a) (BaseF f a)) (Either
                                                   (TermF f a) (f1 (BaseF f a)))
             -> p (TermF f a) (f1 (TermF f a))
        f2
          = dimap
              @ p
              ($p1Choice @ p $dChoice)
              @ (TermF f a)
              @ (Either (TermF f a) (BaseF f a))
              @ (Either (TermF f a) (f1 (BaseF f a)))
              @ (f1 (TermF f a))
              (_BMBase1 @ f @ a)
              (let {
                 ds :: f1 (BaseF f a) -> f1 (TermF f a)
                 ds
                   = fmap
                       @ f1
                       ($p1Applicative @ f1 $dApplicative)
                       @ (BaseF f a)
                       @ (TermF f a)
                       (BMBase @ f @ a) } in
               \ (ds1 :: Either (TermF f a) (f1 (BaseF f a))) ->
                 case ds1 of {
                   Left x -> pure @ f1 $dApplicative @ (TermF f a) x;
                   Right y -> ds y
                 }) } in
      \ (x :: p (BaseF f a) (f1 (BaseF f a))) ->
        f2
          (right'
             @ p $dChoice @ (BaseF f a) @ (f1 (BaseF f a)) @ (TermF f a) x)

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasBaseFTermF :: HasBaseF TermF
$fHasBaseFTermF
  = _BMBase
    `cast` (Sym (N:HasBaseF[0] <TermF>_N)
            :: ((forall (f :: * -> *) a. Prism' (TermF f a) (BaseF f a)) :: *)
               ~R#
               (HasBaseF TermF :: Constraint))

-- RHS size: {terms: 11, types: 30, coercions: 0, joins: 0/0}
_BMMul1
  :: forall (f :: * -> *) a.
     TermF f a -> Either (TermF f a) (MulF f a)
_BMMul1
  = \ (@ (f :: * -> *)) (@ a) (x :: TermF f a) ->
      case x of wild {
        BMBase ipv -> Left @ (TermF f a) @ (MulF f a) wild;
        BMMul y1 -> Right @ (TermF f a) @ (MulF f a) y1
      }

-- RHS size: {terms: 31, types: 134, coercions: 0, joins: 0/2}
_BMMul :: forall (f :: * -> *) a. Prism' (TermF f a) (MulF f a)
_BMMul
  = \ (@ (f :: * -> *))
      (@ a)
      (@ (p :: * -> * -> *))
      (@ (f1 :: * -> *))
      ($dChoice :: Choice p)
      ($dApplicative :: Applicative f1) ->
      let {
        f2
          :: p (Either (TermF f a) (MulF f a)) (Either
                                                  (TermF f a) (f1 (MulF f a)))
             -> p (TermF f a) (f1 (TermF f a))
        f2
          = dimap
              @ p
              ($p1Choice @ p $dChoice)
              @ (TermF f a)
              @ (Either (TermF f a) (MulF f a))
              @ (Either (TermF f a) (f1 (MulF f a)))
              @ (f1 (TermF f a))
              (_BMMul1 @ f @ a)
              (let {
                 ds :: f1 (MulF f a) -> f1 (TermF f a)
                 ds
                   = fmap
                       @ f1
                       ($p1Applicative @ f1 $dApplicative)
                       @ (MulF f a)
                       @ (TermF f a)
                       (BMMul @ f @ a) } in
               \ (ds1 :: Either (TermF f a) (f1 (MulF f a))) ->
                 case ds1 of {
                   Left x -> pure @ f1 $dApplicative @ (TermF f a) x;
                   Right y -> ds y
                 }) } in
      \ (x :: p (MulF f a) (f1 (MulF f a))) ->
        f2
          (right'
             @ p $dChoice @ (MulF f a) @ (f1 (MulF f a)) @ (TermF f a) x)

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasMulFTermF :: HasMulF TermF
$fHasMulFTermF
  = _BMMul
    `cast` (Sym (N:HasMulF[0] <TermF>_N)
            :: ((forall (f :: * -> *) a. Prism' (TermF f a) (MulF f a)) :: *)
               ~R#
               (HasMulF TermF :: Constraint))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Term.BaseMul.Type"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcTermF1 :: KindRep
$tcTermF1 = KindRepFun krep$*Arr* krep$*Arr*

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep :: KindRep
$krep = KindRepVar 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep1 :: KindRep
$krep1 = KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2 :: [KindRep]
$krep2 = : @ KindRep $krep ([] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3 :: [KindRep]
$krep3 = : @ KindRep $krep1 $krep2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4 :: KindRep
$krep4 = KindRepTyConApp $tcBaseF $krep3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5 :: KindRep
$krep5 = KindRepTyConApp $tcMulF $krep3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcTermF3 :: Addr#
$tcTermF3 = "TermF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcTermF2 :: TrName
$tcTermF2 = TrNameS $tcTermF3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcTermF :: TyCon
$tcTermF
  = TyCon
      3926542919675209495##
      15495442658314935867##
      $trModule
      $tcTermF2
      0#
      $tcTermF1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6 :: KindRep
$krep6 = KindRepTyConApp $tcTermF $krep3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'BMBase1 :: KindRep
$tc'BMBase1 = KindRepFun $krep4 $krep6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'BMBase3 :: Addr#
$tc'BMBase3 = "'BMBase"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'BMBase2 :: TrName
$tc'BMBase2 = TrNameS $tc'BMBase3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'BMBase :: TyCon
$tc'BMBase
  = TyCon
      6418924972322557299##
      4094132794458399817##
      $trModule
      $tc'BMBase2
      2#
      $tc'BMBase1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'BMMul1 :: KindRep
$tc'BMMul1 = KindRepFun $krep5 $krep6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'BMMul3 :: Addr#
$tc'BMMul3 = "'BMMul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'BMMul2 :: TrName
$tc'BMMul2 = TrNameS $tc'BMMul3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'BMMul :: TyCon
$tc'BMMul
  = TyCon
      6924412029024001015##
      14813373258268439940##
      $trModule
      $tc'BMMul2
      2#
      $tc'BMMul1



[10 of 20] Compiling Example.Term.Base.Type ( src/Example/Term/Base/Type.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Term/Base/Type.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 14, types: 5, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Term.Base.Type"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[11 of 20] Compiling Base.Print       ( src/Base/Print.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Base/Print.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 154, types: 509, coercions: 504, joins: 0/0}

-- RHS size: {terms: 7, types: 17, coercions: 12, joins: 0/0}
lvl
  :: forall a b.
     Const (First Int) a -> Const (First Int) b -> First Int
lvl
  = \ (@ a)
      (@ b)
      (ds :: Const (First Int) a)
      (ds1 :: Const (First Int) b) ->
      $fMonoidFirst_$cmappend
        @ Int
        (ds
         `cast` (N:Const[0] <*>_N <First Int>_R <a>_P
                 :: (Const (First Int) a :: *) ~R# (First Int :: *)))
        (ds1
         `cast` (N:Const[0] <*>_N <First Int>_R <b>_P
                 :: (Const (First Int) b :: *) ~R# (First Int :: *)))

-- RHS size: {terms: 9, types: 22, coercions: 12, joins: 0/0}
lvl1
  :: forall a b c.
     (a -> b -> c)
     -> Const (First Int) a -> Const (First Int) b -> First Int
lvl1
  = \ (@ a)
      (@ b)
      (@ c)
      _
      (ds1 :: Const (First Int) a)
      (ds2 :: Const (First Int) b) ->
      $fMonoidFirst_$cmappend
        @ Int
        (ds1
         `cast` (N:Const[0] <*>_N <First Int>_R <a>_P
                 :: (Const (First Int) a :: *) ~R# (First Int :: *)))
        (ds2
         `cast` (N:Const[0] <*>_N <First Int>_R <b>_P
                 :: (Const (First Int) b :: *) ~R# (First Int :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
lvl2 :: forall a. a -> Maybe Int
lvl2 = \ (@ a) _ -> Nothing @ Int

-- RHS size: {terms: 9, types: 12, coercions: 136, joins: 0/0}
$s$fApplicativeConst :: Applicative (Const (First Int))
$s$fApplicativeConst
  = C:Applicative
      @ (Const (First Int))
      ($fFunctorConst @ (First Int))
      (lvl2
       `cast` (forall (a :: <*>_N).
               (<a>_R -> Sym N:First[0] <Int>_N)
               ; (<a>_R -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P))
               :: ((forall a. a -> Maybe Int) :: *)
                  ~R#
                  ((forall a. a -> Const (First Int) a) :: *)))
      ((\ (@ a) (@ b) -> $fMonoidFirst_$cmappend @ Int)
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               Sym (N:Const[0] <*>_N <First Int>_R <a -> b>_P)
               -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P)
               -> Sym (N:Const[0] <*>_N <First Int>_R <b>_P)
               :: ((forall a b. First Int -> First Int -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) (a -> b)
                    -> Const (First Int) a -> Const (First Int) b) :: *)))
      (lvl1
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               forall (c :: <*>_N).
               <a -> b -> c>_R
               -> <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <c>_P)
               :: ((forall a b c.
                    (a -> b -> c)
                    -> Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b c.
                    (a -> b -> c)
                    -> Const (First Int) a
                    -> Const (First Int) b
                    -> Const (First Int) c) :: *)))
      (lvl
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <b>_P)
               :: ((forall a b.
                    Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) a
                    -> Const (First Int) b -> Const (First Int) b) :: *)))
      (lvl
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P)
               :: ((forall a b.
                    Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) a
                    -> Const (First Int) b -> Const (First Int) a) :: *)))

-- RHS size: {terms: 10, types: 27, coercions: 48, joins: 0/0}
printRules7
  :: forall (f :: (* -> *) -> * -> *) a.
     BaseF (Term f) a -> Const (First Int) (BaseF (Term f) a)
printRules7
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (x :: BaseF (Term f) a) ->
      case x of {
        TmLit y1 ->
          (Just @ Int y1)
          `cast` (Nth:3
                    ((<Int>_R -> Sym N:First[0] <Int>_N)
                     ; (<Int>_R -> Sym (N:Const[0] <*>_N <First Int>_R <Int>_P)))
                  ; N:Const[0] <*>_N <First Int>_R <Int>_P
                  ; Sym (N:Const[0] <*>_N <First Int>_R <BaseF (Term f) a>_P)
                  :: (Maybe Int :: *)
                     ~R#
                     (Const (First Int) (BaseF (Term f) a) :: *));
        TmAdd ipv ipv1 ->
          (Nothing @ Int)
          `cast` (Sym N:First[0] <Int>_N
                  ; Sym (N:Const[0] <*>_N <First Int>_R <BaseF (Term f) a>_P)
                  :: (Maybe Int :: *)
                     ~R#
                     (Const (First Int) (BaseF (Term f) a) :: *))
      }

-- RHS size: {terms: 4, types: 25, coercions: 0, joins: 0/0}
printRules6
  :: forall (f :: (* -> *) -> * -> *) a.
     Applicative (Const (First (Term f a, Term f a)))
printRules6
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) ->
      $fApplicativeConst
        @ (First (Term f a, Term f a))
        ($fMonoidFirst @ (Term f a, Term f a))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
printRules4 :: Addr#
printRules4 = "("#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
printRules3 :: Addr#
printRules3 = " + "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
printRules2 :: Addr#
printRules2 = ")"#

-- RHS size: {terms: 12, types: 45, coercions: 108, joins: 0/0}
printRules5
  :: forall (f :: (* -> *) -> * -> *) a.
     BaseF (Term f) a
     -> Const (First (Term f a, Term f a)) (BaseF (Term f) a)
printRules5
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (x :: BaseF (Term f) a) ->
      case x of {
        TmLit y1 ->
          (Nothing @ (Term f a, Term f a))
          `cast` (Sym N:First[0] <(Term f a, Term f a)>_N
                  ; Sym
                      (N:Const[0]
                         <*>_N <First (Term f a, Term f a)>_R <BaseF (Term f) a>_P)
                  :: (Maybe (Term f a, Term f a) :: *)
                     ~R#
                     (Const (First (Term f a, Term f a)) (BaseF (Term f) a) :: *));
        TmAdd y1 y2 ->
          (Just @ (Term f a, Term f a) (y1, y2))
          `cast` (Nth:3
                    ((<(Term f a, Term f a)>_R
                      -> Sym N:First[0] <(Term f a, Term f a)>_N)
                     ; (<(Term f a, Term f a)>_R
                        -> Sym
                             (N:Const[0]
                                <*>_N <First (Term f a, Term f a)>_R <(Term f a, Term f a)>_P)))
                  ; N:Const[0]
                      <*>_N <First (Term f a, Term f a)>_R <(Term f a, Term f a)>_P
                  ; Sym
                      (N:Const[0]
                         <*>_N <First (Term f a, Term f a)>_R <BaseF (Term f) a>_P)
                  :: (Maybe (Term f a, Term f a) :: *)
                     ~R#
                     (Const (First (Term f a, Term f a)) (BaseF (Term f) a) :: *))
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
printRules1 :: [Char]
printRules1 = unpackCString# printRules2

-- RHS size: {terms: 58, types: 141, coercions: 188, joins: 0/0}
$wprintRules
  :: forall (f :: (* -> *) -> * -> *) a.
     HasBaseF f =>
     (# PrintRule (Term f a), [PrintRule (Term f a)] #)
$wprintRules
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (w :: HasBaseF f) ->
      (# PrintRule
           @ (Term f a)
           (\ _ (tm :: Term f a) ->
              case ((w
                     `cast` (N:HasBaseF[0] <f>_N
                             :: (HasBaseF f :: Constraint)
                                ~R#
                                ((forall (f1 :: * -> *) a. Prism' (f f1 a) (BaseF f1 a)) :: *)))
                      @ (Term f)
                      @ a
                      @ (->)
                      @ (Const (First Int))
                      $fChoice(->)
                      $s$fApplicativeConst
                      (printRules7 @ f @ a)
                      (tm
                       `cast` (Nth:2
                                 ((<Term f a>_R -> Sym N:First[0] <Int>_N)
                                  ; (<Term f a>_R
                                     -> Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)))
                               ; N:Term[0] <f>_N <a>_N
                               :: (Term f a :: *) ~R# (f (Term f) a :: *))))
                   `cast` (N:Const[0]
                             <*>_N
                             <First Int>_R
                             U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                           ; Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                           ; Nth:3
                               ((<Term f a>_R -> N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                                ; (<Term f a>_R -> N:First[0] <Int>_N))
                           :: (Const (First Int) (f (Term f) a) :: *) ~R# (Maybe Int :: *))
              of {
                Nothing -> Nothing @ String;
                Just x -> Just @ String ($fShowInt_$cshow x)
              }),
         : @ (PrintRule (Term f a))
           (PrintRule
              @ (Term f a)
              (\ (pr :: Term f a -> Maybe [Char]) (tm :: Term f a) ->
                 case ((w
                        `cast` (N:HasBaseF[0] <f>_N
                                :: (HasBaseF f :: Constraint)
                                   ~R#
                                   ((forall (f1 :: * -> *) a. Prism' (f f1 a) (BaseF f1 a)) :: *)))
                         @ (Term f)
                         @ a
                         @ (->)
                         @ (Const (First (Term f a, Term f a)))
                         $fChoice(->)
                         (printRules6 @ f @ a)
                         (printRules5 @ f @ a)
                         (tm
                          `cast` (Nth:2
                                    ((<Term f a>_R -> Sym N:First[0] <(Term f a, Term f a)>_N)
                                     ; (<Term f a>_R
                                        -> Sym
                                             (N:Const[0]
                                                <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)))
                                  ; N:Term[0] <f>_N <a>_N
                                  :: (Term f a :: *) ~R# (f (Term f) a :: *))))
                      `cast` (N:Const[0]
                                <*>_N
                                <First (Term f a, Term f a)>_R
                                U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                              ; Sym
                                  (N:Const[0] <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)
                              ; Nth:3
                                  ((<Term f a>_R
                                    -> N:Const[0] <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)
                                   ; (<Term f a>_R -> N:First[0] <(Term f a, Term f a)>_N))
                              :: (Const (First (Term f a, Term f a)) (f (Term f) a) :: *)
                                 ~R#
                                 (Maybe (Term f a, Term f a) :: *))
                 of {
                   Nothing -> Nothing @ [Char];
                   Just x ->
                     case x of { (tm1, tm2) ->
                     case pr tm1 of {
                       Nothing -> Nothing @ [Char];
                       Just x1 ->
                         case pr tm2 of {
                           Nothing -> Nothing @ [Char];
                           Just x2 ->
                             Just
                               @ [Char]
                               (unpackAppendCString#
                                  printRules4
                                  (++
                                     @ Char
                                     x1
                                     (unpackAppendCString# printRules3 (++ @ Char x2 printRules1))))
                         }
                     }
                     }
                 }))
           ([] @ (PrintRule (Term f a))) #)

-- RHS size: {terms: 10, types: 39, coercions: 0, joins: 0/0}
printRules
  :: forall (f :: (* -> *) -> * -> *) a.
     HasBaseF f =>
     [PrintRule (Term f a)]
printRules
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (w :: HasBaseF f) ->
      case $wprintRules @ f @ a w of { (# ww1, ww2 #) ->
      : @ (PrintRule (Term f a)) ww1 ww2
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Base.Print"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1


------ Local rules for imported ids --------
"SPEC/Base.Print $fApplicativeConst @ (First Int)"
    forall (v :: Monoid (First Int)).
      $fApplicativeConst @ (First Int) v
      = $s$fApplicativeConst


[12 of 20] Compiling Base.Eval        ( src/Base/Eval.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Base/Eval.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 124, types: 435, coercions: 1,157, joins: 0/0}

-- RHS size: {terms: 7, types: 17, coercions: 12, joins: 0/0}
lvl
  :: forall a b.
     Const (First Int) a -> Const (First Int) b -> First Int
lvl
  = \ (@ a)
      (@ b)
      (ds :: Const (First Int) a)
      (ds1 :: Const (First Int) b) ->
      $fMonoidFirst_$cmappend
        @ Int
        (ds
         `cast` (N:Const[0] <*>_N <First Int>_R <a>_P
                 :: (Const (First Int) a :: *) ~R# (First Int :: *)))
        (ds1
         `cast` (N:Const[0] <*>_N <First Int>_R <b>_P
                 :: (Const (First Int) b :: *) ~R# (First Int :: *)))

-- RHS size: {terms: 9, types: 22, coercions: 12, joins: 0/0}
lvl1
  :: forall a b c.
     (a -> b -> c)
     -> Const (First Int) a -> Const (First Int) b -> First Int
lvl1
  = \ (@ a)
      (@ b)
      (@ c)
      _
      (ds1 :: Const (First Int) a)
      (ds2 :: Const (First Int) b) ->
      $fMonoidFirst_$cmappend
        @ Int
        (ds1
         `cast` (N:Const[0] <*>_N <First Int>_R <a>_P
                 :: (Const (First Int) a :: *) ~R# (First Int :: *)))
        (ds2
         `cast` (N:Const[0] <*>_N <First Int>_R <b>_P
                 :: (Const (First Int) b :: *) ~R# (First Int :: *)))

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
lvl2 :: forall a. a -> Maybe Int
lvl2 = \ (@ a) _ -> Nothing @ Int

-- RHS size: {terms: 9, types: 12, coercions: 136, joins: 0/0}
$s$fApplicativeConst :: Applicative (Const (First Int))
$s$fApplicativeConst
  = C:Applicative
      @ (Const (First Int))
      ($fFunctorConst @ (First Int))
      (lvl2
       `cast` (forall (a :: <*>_N).
               (<a>_R -> Sym N:First[0] <Int>_N)
               ; (<a>_R -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P))
               :: ((forall a. a -> Maybe Int) :: *)
                  ~R#
                  ((forall a. a -> Const (First Int) a) :: *)))
      ((\ (@ a) (@ b) -> $fMonoidFirst_$cmappend @ Int)
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               Sym (N:Const[0] <*>_N <First Int>_R <a -> b>_P)
               -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P)
               -> Sym (N:Const[0] <*>_N <First Int>_R <b>_P)
               :: ((forall a b. First Int -> First Int -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) (a -> b)
                    -> Const (First Int) a -> Const (First Int) b) :: *)))
      (lvl1
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               forall (c :: <*>_N).
               <a -> b -> c>_R
               -> <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <c>_P)
               :: ((forall a b c.
                    (a -> b -> c)
                    -> Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b c.
                    (a -> b -> c)
                    -> Const (First Int) a
                    -> Const (First Int) b
                    -> Const (First Int) c) :: *)))
      (lvl
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <b>_P)
               :: ((forall a b.
                    Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) a
                    -> Const (First Int) b -> Const (First Int) b) :: *)))
      (lvl
       `cast` (forall (a :: <*>_N).
               forall (b :: <*>_N).
               <Const (First Int) a>_R
               -> <Const (First Int) b>_R
               -> Sym (N:Const[0] <*>_N <First Int>_R <a>_P)
               :: ((forall a b.
                    Const (First Int) a -> Const (First Int) b -> First Int) :: *)
                  ~R#
                  ((forall a b.
                    Const (First Int) a
                    -> Const (First Int) b -> Const (First Int) a) :: *)))

-- RHS size: {terms: 4, types: 25, coercions: 0, joins: 0/0}
poly_$dApplicative
  :: forall (f :: (* -> *) -> * -> *) a.
     Applicative (Const (First (Term f a, Term f a)))
poly_$dApplicative
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) ->
      $fApplicativeConst
        @ (First (Term f a, Term f a))
        ($fMonoidFirst @ (Term f a, Term f a))

-- RHS size: {terms: 10, types: 27, coercions: 48, joins: 0/0}
lvl3
  :: forall (f :: (* -> *) -> * -> *) a.
     BaseF (Term f) a -> Const (First Int) (BaseF (Term f) a)
lvl3
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (x :: BaseF (Term f) a) ->
      case x of {
        TmLit y1 ->
          (Just @ Int y1)
          `cast` (Nth:3
                    ((<Int>_R -> Sym N:First[0] <Int>_N)
                     ; (<Int>_R -> Sym (N:Const[0] <*>_N <First Int>_R <Int>_P)))
                  ; N:Const[0] <*>_N <First Int>_R <Int>_P
                  ; Sym (N:Const[0] <*>_N <First Int>_R <BaseF (Term f) a>_P)
                  :: (Maybe Int :: *)
                     ~R#
                     (Const (First Int) (BaseF (Term f) a) :: *));
        TmAdd ipv ipv1 ->
          (Nothing @ Int)
          `cast` (Sym N:First[0] <Int>_N
                  ; Sym (N:Const[0] <*>_N <First Int>_R <BaseF (Term f) a>_P)
                  :: (Maybe Int :: *)
                     ~R#
                     (Const (First Int) (BaseF (Term f) a) :: *))
      }

-- RHS size: {terms: 12, types: 45, coercions: 108, joins: 0/0}
lvl4
  :: forall (f :: (* -> *) -> * -> *) a.
     BaseF (Term f) a
     -> Const (First (Term f a, Term f a)) (BaseF (Term f) a)
lvl4
  = \ (@ (f :: (* -> *) -> * -> *)) (@ a) (x :: BaseF (Term f) a) ->
      case x of {
        TmLit y1 ->
          (Nothing @ (Term f a, Term f a))
          `cast` (Sym N:First[0] <(Term f a, Term f a)>_N
                  ; Sym
                      (N:Const[0]
                         <*>_N <First (Term f a, Term f a)>_R <BaseF (Term f) a>_P)
                  :: (Maybe (Term f a, Term f a) :: *)
                     ~R#
                     (Const (First (Term f a, Term f a)) (BaseF (Term f) a) :: *));
        TmAdd y1 y2 ->
          (Just @ (Term f a, Term f a) (y1, y2))
          `cast` (Nth:3
                    ((<(Term f a, Term f a)>_R
                      -> Sym N:First[0] <(Term f a, Term f a)>_N)
                     ; (<(Term f a, Term f a)>_R
                        -> Sym
                             (N:Const[0]
                                <*>_N <First (Term f a, Term f a)>_R <(Term f a, Term f a)>_P)))
                  ; N:Const[0]
                      <*>_N <First (Term f a, Term f a)>_R <(Term f a, Term f a)>_P
                  ; Sym
                      (N:Const[0]
                         <*>_N <First (Term f a, Term f a)>_R <BaseF (Term f) a>_P)
                  :: (Maybe (Term f a, Term f a) :: *)
                     ~R#
                     (Const (First (Term f a, Term f a)) (BaseF (Term f) a) :: *))
      }

-- RHS size: {terms: 48, types: 135, coercions: 841, joins: 0/0}
evalRules
  :: forall (f :: (* -> *) -> * -> *) a.
     HasBaseF f =>
     [EvalRule (Term f a)]
evalRules
  = \ (@ (f :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF f) ->
      : @ (EvalRule (Term f a))
        (EvalRule
           @ (Term f a)
           (\ (e :: Term f a -> Term f a) (tm :: Term f a) ->
              case (($dHasBaseF
                     `cast` (N:HasBaseF[0] <f>_N
                             :: (HasBaseF f :: Constraint)
                                ~R#
                                ((forall (f1 :: * -> *) a. Prism' (f f1 a) (BaseF f1 a)) :: *)))
                      @ (Term f)
                      @ a
                      @ (->)
                      @ (Const (First (Term f a, Term f a)))
                      $fChoice(->)
                      (poly_$dApplicative @ f @ a)
                      (lvl4 @ f @ a)
                      (tm
                       `cast` (Nth:2
                                 ((<Term f a>_R -> Sym N:First[0] <(Term f a, Term f a)>_N)
                                  ; (<Term f a>_R
                                     -> Sym
                                          (N:Const[0]
                                             <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)))
                               ; N:Term[0] <f>_N <a>_N
                               :: (Term f a :: *) ~R# (f (Term f) a :: *))))
                   `cast` (N:Const[0]
                             <*>_N
                             <First (Term f a, Term f a)>_R
                             U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                           ; Sym
                               (N:Const[0] <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)
                           ; Nth:3
                               ((<Term f a>_R
                                 -> N:Const[0] <*>_N <First (Term f a, Term f a)>_R <Term f a>_P)
                                ; (<Term f a>_R -> N:First[0] <(Term f a, Term f a)>_N))
                           :: (Const (First (Term f a, Term f a)) (f (Term f) a) :: *)
                              ~R#
                              (Maybe (Term f a, Term f a) :: *))
              of {
                Nothing -> Nothing @ (Term f a);
                Just x ->
                  case x of { (tm1, tm2) ->
                  case (($dHasBaseF
                         `cast` (N:HasBaseF[0] <f>_N
                                 :: (HasBaseF f :: Constraint)
                                    ~R#
                                    ((forall (f1 :: * -> *) a. Prism' (f f1 a) (BaseF f1 a)) :: *)))
                          @ (Term f)
                          @ a
                          @ (->)
                          @ (Const (First Int))
                          $fChoice(->)
                          $s$fApplicativeConst
                          (lvl3 @ f @ a)
                          ((e tm1)
                           `cast` (Nth:2
                                     ((<Term f a>_R -> Sym N:First[0] <Int>_N)
                                      ; (<Term f a>_R
                                         -> Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)))
                                   ; N:Term[0] <f>_N <a>_N
                                   :: (Term f a :: *) ~R# (f (Term f) a :: *))))
                       `cast` (N:Const[0]
                                 <*>_N
                                 <First Int>_R
                                 U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                               ; Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                               ; Nth:3
                                   ((<Term f a>_R -> N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                                    ; (<Term f a>_R -> N:First[0] <Int>_N))
                               :: (Const (First Int) (f (Term f) a) :: *) ~R# (Maybe Int :: *))
                  of {
                    Nothing -> Nothing @ (Term f a);
                    Just x1 ->
                      case (($dHasBaseF
                             `cast` (N:HasBaseF[0] <f>_N
                                     :: (HasBaseF f :: Constraint)
                                        ~R#
                                        ((forall (f1 :: * -> *) a.
                                          Prism' (f f1 a) (BaseF f1 a)) :: *)))
                              @ (Term f)
                              @ a
                              @ (->)
                              @ (Const (First Int))
                              $fChoice(->)
                              $s$fApplicativeConst
                              (lvl3 @ f @ a)
                              ((e tm2)
                               `cast` (Nth:2
                                         ((<Term f a>_R -> Sym N:First[0] <Int>_N)
                                          ; (<Term f a>_R
                                             -> Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)))
                                       ; N:Term[0] <f>_N <a>_N
                                       :: (Term f a :: *) ~R# (f (Term f) a :: *))))
                           `cast` (N:Const[0]
                                     <*>_N
                                     <First Int>_R
                                     U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                                   ; Sym (N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                                   ; Nth:3
                                       ((<Term f a>_R
                                         -> N:Const[0] <*>_N <First Int>_R <Term f a>_P)
                                        ; (<Term f a>_R -> N:First[0] <Int>_N))
                                   :: (Const (First Int) (f (Term f) a) :: *) ~R# (Maybe Int :: *))
                      of {
                        Nothing -> Nothing @ (Term f a);
                        Just x2 ->
                          Just
                            @ (Term f a)
                            ((($dHasBaseF
                               `cast` (N:HasBaseF[0] <f>_N
                                       :: (HasBaseF f :: Constraint)
                                          ~R#
                                          ((forall (f1 :: * -> *) a.
                                            Prism' (f f1 a) (BaseF f1 a)) :: *)))
                                @ (Term f)
                                @ a
                                @ Tagged
                                @ Identity
                                $fChoiceTagged
                                $fApplicativeIdentity
                                ((TmLit @ (Term f) @ a ($fNumInt_$c+ x1 x2))
                                 `cast` (Nth:3
                                           (((Sym (N:Identity[0] <Int>_R)
                                              ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                                             -> <BaseF (Term f) a>_R)
                                            ; (<Tagged Int (Identity Int)>_R
                                               -> Sym (N:Identity[0] <BaseF (Term f) a>_R)
                                                  ; Sym
                                                      (N:Tagged[0]
                                                         <*>_N
                                                         <BaseF (Term f) a>_P
                                                         <Identity (BaseF (Term f) a)>_R)))
                                         :: (BaseF (Term f) a :: *)
                                            ~R#
                                            (Tagged
                                               (BaseF (Term f) a)
                                               (Identity (BaseF (Term f) a)) :: *))))
                             `cast` (N:Tagged[0]
                                       <*>_N
                                       U(phant:<*>_N, f (Term f) a, Unwrapped (Term f a))_P
                                       (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <f>_N <a>_N))))_R
                                     ; Nth:2
                                         ((N:Identity[0] <Unwrapped (Term f a)>_R
                                           -> N:Identity[0] <Term f a>_R)
                                          ; (<Unwrapped (Term f a)>_R
                                             -> Sym (N:Identity[0] <Term f a>_R))
                                          ; (<Unwrapped (Term f a)>_R
                                             -> Nth:3
                                                  ((N:Identity[0] <f (Term f) a>_R
                                                    -> N:Identity[0] <Term f a>_R)
                                                   ; (<f (Term f) a>_R -> N:Term[0] <f>_N <a>_N))
                                                ; Nth:2
                                                    ((<f (Term f) a>_R
                                                      -> Sym (N:Term[0] <f>_N) <a>_N)
                                                     ; (Sym (N:Identity[0] <f (Term f) a>_R)
                                                        -> Sym (N:Identity[0] <Term f a>_R)))
                                                ; Nth:3
                                                    ((<Unwrapped (Term f a)>_R
                                                      -> (Identity
                                                            (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                           <f>_N <a>_N))))_R)
                                                     ; (<Unwrapped (Term f a)>_R
                                                        -> N:Identity[0] <Unwrapped (Term f a)>_R))
                                                ; Nth:2
                                                    ((<Unwrapped (Term f a)>_R
                                                      -> Sym
                                                           (N:Identity[0] <Unwrapped (Term f a)>_R))
                                                     ; (<Unwrapped (Term f a)>_R
                                                        -> (Identity
                                                              (Sub (D:R:UnwrappedTerm[0]
                                                                        <f>_N <a>_N)))_R))))
                                     ; Nth:3
                                         ((<Unwrapped (Term f a)>_R
                                           -> Nth:2
                                                ((<Unwrapped (Term f a)>_R
                                                  -> (Identity
                                                        (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                       <f>_N <a>_N))))_R)
                                                 ; (<Unwrapped (Term f a)>_R
                                                    -> N:Identity[0] <Unwrapped (Term f a)>_R))
                                              ; Nth:3
                                                  ((<Unwrapped (Term f a)>_R
                                                    -> Sym (N:Identity[0] <Unwrapped (Term f a)>_R))
                                                   ; (Nth:1
                                                        (Nth:2
                                                           (Nth:3
                                                              (Nth:3
                                                                 (((Sym (N:Wrapped[0] <Term f a>_N)
                                                                    ; Sym
                                                                        (N:Rewrapped[0]
                                                                           <Term f a>_N
                                                                           <Term f a>_N)
                                                                    ; Nth:3
                                                                        ((<(Term f a :: *)
                                                                           ~
                                                                           (Term f a :: *)>_R
                                                                          -> N:Rewrapped[0]
                                                                               <Term f a>_N
                                                                               <Term f a>_N)
                                                                         ; (<(Term f a :: *)
                                                                             ~
                                                                             (Term f a :: *)>_R
                                                                            -> N:Wrapped[0]
                                                                                 <Term f a>_N))
                                                                    ; (forall (p1 :: <*
                                                                                      -> * -> *>_N).
                                                                       forall (f2 :: <* -> *>_N).
                                                                       <Profunctor p1>_R
                                                                       -> <Functor f2>_R
                                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                    <f>_N
                                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                      <f>_N
                                                                                                      <a>_N))
                                                                       -> <p1 (Term f a) (f2 (Term
                                                                                                f
                                                                                                a))>_R))@<Exchange
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))>_N)@<Identity>_N))))
                                                      -> Nth:3
                                                           (Nth:2
                                                              (Nth:3
                                                                 (Nth:3
                                                                    (((Sym
                                                                         (N:Wrapped[0] <Term f a>_N)
                                                                       ; Sym
                                                                           (N:Rewrapped[0]
                                                                              <Term f a>_N
                                                                              <Term f a>_N)
                                                                       ; Nth:3
                                                                           ((<(Term f a :: *)
                                                                              ~
                                                                              (Term f a :: *)>_R
                                                                             -> N:Rewrapped[0]
                                                                                  <Term f a>_N
                                                                                  <Term f a>_N)
                                                                            ; (<(Term f a :: *)
                                                                                ~
                                                                                (Term f a :: *)>_R
                                                                               -> N:Wrapped[0]
                                                                                    <Term f a>_N))
                                                                       ; (forall (p1 :: <*
                                                                                         -> *
                                                                                         -> *>_N).
                                                                          forall (f2 :: <* -> *>_N).
                                                                          <Profunctor p1>_R
                                                                          -> <Functor f2>_R
                                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                       <f>_N
                                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                         <f>_N
                                                                                                         <a>_N))
                                                                          -> <p1 (Term
                                                                                    f a) (f2 (Term
                                                                                                f
                                                                                                a))>_R))@<Exchange
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))
                                                                                                            (Unwrapped
                                                                                                               (Term
                                                                                                                  f
                                                                                                                  a))>_N)@<Identity>_N))))))
                                              ; Nth:2
                                                  ((N:Identity[0] <f (Term f) a>_R
                                                    -> N:Identity[0] <Term f a>_R)
                                                   ; (<f (Term f) a>_R -> N:Term[0] <f>_N <a>_N))
                                              ; Nth:3
                                                  ((<f (Term f) a>_R -> Sym (N:Term[0] <f>_N) <a>_N)
                                                   ; (Sym (N:Identity[0] <f (Term f) a>_R)
                                                      -> Sym (N:Identity[0] <Term f a>_R))))
                                          ; (<Unwrapped (Term f a)>_R -> N:Identity[0] <Term f a>_R)
                                          ; (Sym (N:Identity[0] <Unwrapped (Term f a)>_R)
                                             -> Sym (N:Identity[0] <Term f a>_R)))
                                     ; Sym (N:Tagged[0] <*>_N <Term f a>_P <Identity (Term f a)>_R)
                                     ; Nth:3
                                         ((<Tagged Int (Identity Int)>_R
                                           -> Sym
                                                (N:Identity[0]
                                                   (Sym (N:Identity[0] <Term f a>_R)
                                                    ; Sym
                                                        (N:Tagged[0]
                                                           <*>_N
                                                           <Term f a>_P
                                                           <Identity (Term f a)>_R))))
                                          ; (<Tagged Int (Identity Int)>_R
                                             -> N:Identity[0] <Term f a>_R)
                                          ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                              ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                             -> <Term f a>_R)
                                          ; (N:Identity[0] <Int>_R -> <Term f a>_R))
                                     :: (Tagged (f (Term f) a) (Identity (f (Term f) a)) :: *)
                                        ~R#
                                        (Term f a :: *)))
                      }
                  }
                  }
              }))
        ([] @ (EvalRule (Term f a)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Base.Eval"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1


------ Local rules for imported ids --------
"SPEC/Base.Eval $fApplicativeConst @ (First Int)"
    forall (v :: Monoid (First Int)).
      $fApplicativeConst @ (First Int) v
      = $s$fApplicativeConst


[13 of 20] Compiling Base             ( src/Base.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Base.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 38, types: 146, coercions: 754, joins: 0/0}

-- RHS size: {terms: 7, types: 18, coercions: 0, joins: 0/0}
lit1
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasBaseF tm =>
     Tagged Int (Identity Int)
     -> Tagged (Term tm a) (Identity (Term tm a))
lit1
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF tm) ->
      _Lit
        @ tm
        @ a
        $dHasBaseF
        @ Tagged
        @ Identity
        $fChoiceTagged
        $fApplicativeIdentity

-- RHS size: {terms: 1, types: 0, coercions: 76, joins: 0/0}
lit
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasBaseF tm =>
     Int -> Term tm a
lit
  = lit1
    `cast` (forall (tm :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            <HasBaseF tm>_R
            -> (<Tagged Int (Identity Int)>_R
                -> Sym
                     (N:Identity[0]
                        (Sym (N:Identity[0] <Term tm a>_R)
                         ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
               ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
               ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                   ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                  -> <Term tm a>_R)
               ; (N:Identity[0] <Int>_R -> <Term tm a>_R)
            :: ((forall (tm :: (* -> *) -> * -> *) a.
                 HasBaseF tm =>
                 Tagged Int (Identity Int)
                 -> Tagged (Term tm a) (Identity (Term tm a))) :: *)
               ~R#
               ((forall (tm :: (* -> *) -> * -> *) a.
                 HasBaseF tm =>
                 Int -> Term tm a) :: *))

-- RHS size: {terms: 11, types: 28, coercions: 77, joins: 0/0}
add1
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasBaseF tm =>
     Term tm a
     -> Term tm a -> Tagged (tm (Term tm) a) (Identity (tm (Term tm) a))
add1
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF tm)
      (tm1 :: Term tm a)
      (tm2 :: Term tm a) ->
      ($dHasBaseF
       `cast` (N:HasBaseF[0] <tm>_N
               :: (HasBaseF tm :: Constraint)
                  ~R#
                  ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
        @ (Term tm)
        @ a
        @ Tagged
        @ Identity
        $fChoiceTagged
        $fApplicativeIdentity
        ((TmAdd @ (Term tm) @ a tm1 tm2)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)
                      ; Sym
                          (N:Tagged[0]
                             <*>_N
                             <(Term tm a, Term tm a)>_P
                             <Identity (Term tm a, Term tm a)>_R))
                     -> <BaseF (Term tm) a>_R)
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N <BaseF (Term tm) a>_P <Identity (BaseF (Term tm) a)>_R)))
                 :: (BaseF (Term tm) a :: *)
                    ~R#
                    (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 601, joins: 0/0}
add
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasBaseF tm =>
     Term tm a -> Term tm a -> Term tm a
add
  = add1
    `cast` (forall (tm :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            <HasBaseF tm>_R
            -> <Term tm a>_R
            -> <Term tm a>_R
            -> N:Tagged[0]
                 <*>_N
                 U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                 (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term tm a)>_R
                     -> N:Identity[0] <Term tm a>_R)
                    ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                    ; (<Unwrapped (Term tm a)>_R
                       -> Nth:3
                            ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                             ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                          ; Nth:2
                              ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                               ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                  -> Sym (N:Identity[0] <Term tm a>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term tm a)>_R
                                -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                               ; (<Unwrapped (Term tm a)>_R
                                  -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term tm a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                               ; (<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term tm a)>_R
                     -> Nth:2
                          ((<Unwrapped (Term tm a)>_R
                            -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                           ; (<Unwrapped (Term tm a)>_R
                              -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term tm a)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term tm a>_N)
                                              ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                              ; Nth:3
                                                  ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                    -> N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                   ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                      -> N:Wrapped[0] <Term tm a>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <tm>_N
                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                <tm>_N <a>_N))
                                                 -> <p1 (Term tm a) (f2 (Term tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                 ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                 ; Nth:3
                                                     ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term tm a>_N <Term tm a>_N)
                                                      ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                         -> N:Wrapped[0] <Term tm a>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <tm>_N
                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                   <tm>_N <a>_N))
                                                    -> <p1 (Term tm a) (f2 (Term
                                                                              tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                             ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                        ; Nth:3
                            ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                             ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                -> Sym (N:Identity[0] <Term tm a>_R))))
                    ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                       -> Sym (N:Identity[0] <Term tm a>_R)))
               ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term tm a>_R)
                              ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> N:Identity[0] <Term tm a>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term tm a, Term tm a)>_P
                          <Identity (Term tm a, Term tm a)>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                       -> <Term tm a>_R)
                    ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
            :: ((forall (tm :: (* -> *) -> * -> *) a.
                 HasBaseF tm =>
                 Term tm a
                 -> Term tm a
                 -> Tagged (tm (Term tm) a) (Identity (tm (Term tm) a))) :: *)
               ~R#
               ((forall (tm :: (* -> *) -> * -> *) a.
                 HasBaseF tm =>
                 Term tm a -> Term tm a -> Term tm a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[14 of 20] Compiling Initial.Bench    ( src/Initial/Bench.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Initial/Bench.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 270, types: 685, coercions: 14,055, joins: 0/0}

Rec {
-- RHS size: {terms: 29, types: 46, coercions: 3, joins: 0/0}
$fNFDataTerm_$crnf :: forall a. Term TermF a -> ()
$fNFDataTerm_$crnf
  = \ (@ a) (x :: Term TermF a) ->
      case x
           `cast` (N:Term[0] <TermF>_N <a>_N
                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
      of {
        BMBase g1 ->
          case g1 of {
            TmLit g2 -> case g2 of { I# ipv -> () };
            TmAdd g2 g3 ->
              case $fNFDataTerm_$crnf @ a g2 of { () ->
              $fNFDataTerm_$crnf @ a g3
              }
          };
        BMMul g1 ->
          case g1 of { TmMul g2 g3 ->
          case $fNFDataTerm_$crnf @ a g2 of { () ->
          $fNFDataTerm_$crnf @ a g3
          }
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
$fNFDataTerm :: forall a. NFData (Term TermF a)
$fNFDataTerm
  = $fNFDataTerm_$crnf
    `cast` (forall (a :: <*>_N). Sym (N:NFData[0] <Term TermF a>_N)
            :: ((forall a. Term TermF a -> ()) :: *)
               ~R#
               ((forall a. NFData (Term TermF a)) :: Constraint))

-- RHS size: {terms: 41, types: 107, coercions: 605, joins: 0/0}
evalTerm6
  :: forall a.
     (Term TermF a -> Term TermF a)
     -> Term TermF a -> Maybe (Term TermF a)
evalTerm6
  = \ (@ a)
      (e :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      case tm
           `cast` (Nth:2
                     ((<Term TermF a>_R
                       -> Sym N:First[0] <(Term TermF a, Term TermF a)>_N)
                      ; (<Term TermF a>_R
                         -> Sym
                              (N:Const[0]
                                 <*>_N <First (Term TermF a, Term TermF a)>_R <Term TermF a>_P)))
                   ; N:Term[0] <TermF>_N <a>_N
                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
      of {
        BMBase y1 ->
          case y1 of {
            TmLit y2 -> Nothing @ (Term TermF a);
            TmAdd y2 y3 ->
              case (e y2)
                   `cast` (Nth:2
                             ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                              ; (<Term TermF a>_R
                                 -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                           ; N:Term[0] <TermF>_N <a>_N
                           :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
              of {
                BMBase y4 ->
                  case y4 of {
                    TmLit y5 ->
                      case (e y3)
                           `cast` (Nth:2
                                     ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                                      ; (<Term TermF a>_R
                                         -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                                   ; N:Term[0] <TermF>_N <a>_N
                                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
                      of {
                        BMBase y6 ->
                          case y6 of {
                            TmLit y7 ->
                              Just
                                @ (Term TermF a)
                                ((BMBase
                                    @ (Term TermF)
                                    @ a
                                    (TmLit @ (Term TermF) @ a ($fNumInt_$c+ y5 y7)))
                                 `cast` (Sym
                                           (N:Identity[0]
                                              (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                                         ; Nth:2
                                             ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                               -> N:Identity[0] <Term TermF a>_R)
                                              ; (<Unwrapped (Term TermF a)>_R
                                                 -> Sym (N:Identity[0] <Term TermF a>_R))
                                              ; (<Unwrapped (Term TermF a)>_R
                                                 -> Nth:3
                                                      ((N:Identity[0] <TermF (Term TermF) a>_R
                                                        -> N:Identity[0] <Term TermF a>_R)
                                                       ; (<TermF (Term TermF) a>_R
                                                          -> N:Term[0] <TermF>_N <a>_N))
                                                    ; Nth:2
                                                        ((<TermF (Term TermF) a>_R
                                                          -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                         ; (Sym
                                                              (N:Identity[0]
                                                                 <TermF (Term TermF) a>_R)
                                                            -> Sym
                                                                 (N:Identity[0] <Term TermF a>_R)))
                                                    ; Nth:3
                                                        ((<Unwrapped (Term TermF a)>_R
                                                          -> (Identity
                                                                (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                               <TermF>_N
                                                                               <a>_N))))_R)
                                                         ; (<Unwrapped (Term TermF a)>_R
                                                            -> N:Identity[0]
                                                                 <Unwrapped (Term TermF a)>_R))
                                                    ; Nth:2
                                                        ((<Unwrapped (Term TermF a)>_R
                                                          -> Sym
                                                               (N:Identity[0]
                                                                  <Unwrapped (Term TermF a)>_R))
                                                         ; (<Unwrapped (Term TermF a)>_R
                                                            -> (Identity
                                                                  (Sub (D:R:UnwrappedTerm[0]
                                                                            <TermF>_N <a>_N)))_R))))
                                         ; Nth:3
                                             ((<Unwrapped (Term TermF a)>_R
                                               -> Nth:2
                                                    ((<Unwrapped (Term TermF a)>_R
                                                      -> (Identity
                                                            (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                           <TermF>_N <a>_N))))_R)
                                                     ; (<Unwrapped (Term TermF a)>_R
                                                        -> N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                  ; Nth:3
                                                      ((<Unwrapped (Term TermF a)>_R
                                                        -> Sym
                                                             (N:Identity[0]
                                                                <Unwrapped (Term TermF a)>_R))
                                                       ; (Nth:1
                                                            (Nth:2
                                                               (Nth:3
                                                                  (Nth:3
                                                                     (((Sym
                                                                          (N:Wrapped[0]
                                                                             <Term TermF a>_N)
                                                                        ; Sym
                                                                            (N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                        ; Nth:3
                                                                            ((<(Term TermF a :: *)
                                                                               ~
                                                                               (Term
                                                                                  TermF a :: *)>_R
                                                                              -> N:Rewrapped[0]
                                                                                   <Term TermF a>_N
                                                                                   <Term TermF a>_N)
                                                                             ; (<(Term TermF a :: *)
                                                                                 ~
                                                                                 (Term
                                                                                    TermF a :: *)>_R
                                                                                -> N:Wrapped[0]
                                                                                     <Term
                                                                                        TermF a>_N))
                                                                        ; (forall (p1 :: <*
                                                                                          -> *
                                                                                          -> *>_N).
                                                                           forall (f2 :: <*
                                                                                          -> *>_N).
                                                                           <Profunctor p1>_R
                                                                           -> <Functor f2>_R
                                                                           -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                        <TermF>_N
                                                                                        <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                          <TermF>_N
                                                                                                          <a>_N))
                                                                           -> <p1 (Term
                                                                                     TermF
                                                                                     a) (f2 (Term
                                                                                               TermF
                                                                                               a))>_R))@<Exchange
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))>_N)@<Identity>_N))))
                                                          -> Nth:3
                                                               (Nth:2
                                                                  (Nth:3
                                                                     (Nth:3
                                                                        (((Sym
                                                                             (N:Wrapped[0]
                                                                                <Term TermF a>_N)
                                                                           ; Sym
                                                                               (N:Rewrapped[0]
                                                                                  <Term TermF a>_N
                                                                                  <Term TermF a>_N)
                                                                           ; Nth:3
                                                                               ((<(Term
                                                                                     TermF a :: *)
                                                                                  ~
                                                                                  (Term
                                                                                     TermF
                                                                                     a :: *)>_R
                                                                                 -> N:Rewrapped[0]
                                                                                      <Term
                                                                                         TermF a>_N
                                                                                      <Term
                                                                                         TermF a>_N)
                                                                                ; (<(Term
                                                                                       TermF a :: *)
                                                                                    ~
                                                                                    (Term
                                                                                       TermF
                                                                                       a :: *)>_R
                                                                                   -> N:Wrapped[0]
                                                                                        <Term
                                                                                           TermF
                                                                                           a>_N))
                                                                           ; (forall (p1 :: <*
                                                                                             -> *
                                                                                             -> *>_N).
                                                                              forall (f2 :: <*
                                                                                             -> *>_N).
                                                                              <Profunctor p1>_R
                                                                              -> <Functor f2>_R
                                                                              -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                           <TermF>_N
                                                                                           <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                             <TermF>_N
                                                                                                             <a>_N))
                                                                              -> <p1 (Term
                                                                                        TermF
                                                                                        a) (f2 (Term
                                                                                                  TermF
                                                                                                  a))>_R))@<Exchange
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))>_N)@<Identity>_N))))))
                                                  ; Nth:2
                                                      ((N:Identity[0] <TermF (Term TermF) a>_R
                                                        -> N:Identity[0] <Term TermF a>_R)
                                                       ; (<TermF (Term TermF) a>_R
                                                          -> N:Term[0] <TermF>_N <a>_N))
                                                  ; Nth:3
                                                      ((<TermF (Term TermF) a>_R
                                                        -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                       ; (Sym
                                                            (N:Identity[0] <TermF (Term TermF) a>_R)
                                                          -> Sym (N:Identity[0] <Term TermF a>_R))))
                                              ; (<Unwrapped (Term TermF a)>_R
                                                 -> N:Identity[0] <Term TermF a>_R)
                                              ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                                 -> Sym (N:Identity[0] <Term TermF a>_R)))
                                         ; Sym
                                             (N:Tagged[0]
                                                <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                         ; Nth:3
                                             ((<Tagged Int (Identity Int)>_R
                                               -> Sym
                                                    (N:Identity[0]
                                                       (Sym (N:Identity[0] <Term TermF a>_R)
                                                        ; Sym
                                                            (N:Tagged[0]
                                                               <*>_N
                                                               <Term TermF a>_P
                                                               <Identity (Term TermF a)>_R))))
                                              ; (<Tagged Int (Identity Int)>_R
                                                 -> N:Identity[0] <Term TermF a>_R)
                                              ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                                  ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                                 -> <Term TermF a>_R)
                                              ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                         :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)));
                            TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
                          };
                        BMMul ipv -> Nothing @ (Term TermF a)
                      };
                    TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
                  };
                BMMul ipv -> Nothing @ (Term TermF a)
              }
          };
        BMMul ipv -> Nothing @ (Term TermF a)
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalTerm5 :: forall a. EvalRule (Term TermF a)
evalTerm5 = \ (@ a) -> EvalRule @ (Term TermF a) (evalTerm6 @ a)

-- RHS size: {terms: 39, types: 103, coercions: 570, joins: 0/0}
evalTerm4
  :: forall a.
     (Term TermF a -> Term TermF a)
     -> Term TermF a -> Maybe (Term TermF a)
evalTerm4
  = \ (@ a)
      (e :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      case tm
           `cast` (N:Term[0] <TermF>_N <a>_N
                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
      of {
        BMBase ipv -> Nothing @ (Term TermF a);
        BMMul y1 ->
          case y1 of { TmMul x1 x2 ->
          case (e x1)
               `cast` (Nth:2
                         ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                          ; (<Term TermF a>_R
                             -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                       ; N:Term[0] <TermF>_N <a>_N
                       :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
          of {
            BMBase y2 ->
              case y2 of {
                TmLit y3 ->
                  case (e x2)
                       `cast` (Nth:2
                                 ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                                  ; (<Term TermF a>_R
                                     -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                               ; N:Term[0] <TermF>_N <a>_N
                               :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
                  of {
                    BMBase y4 ->
                      case y4 of {
                        TmLit y5 ->
                          Just
                            @ (Term TermF a)
                            ((BMBase
                                @ (Term TermF) @ a (TmLit @ (Term TermF) @ a ($fNumInt_$c* y3 y5)))
                             `cast` (Sym
                                       (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                                     ; Nth:2
                                         ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Term TermF a>_R)
                                          ; (<Unwrapped (Term TermF a)>_R
                                             -> Sym (N:Identity[0] <Term TermF a>_R))
                                          ; (<Unwrapped (Term TermF a)>_R
                                             -> Nth:3
                                                  ((N:Identity[0] <TermF (Term TermF) a>_R
                                                    -> N:Identity[0] <Term TermF a>_R)
                                                   ; (<TermF (Term TermF) a>_R
                                                      -> N:Term[0] <TermF>_N <a>_N))
                                                ; Nth:2
                                                    ((<TermF (Term TermF) a>_R
                                                      -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                     ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                        -> Sym (N:Identity[0] <Term TermF a>_R)))
                                                ; Nth:3
                                                    ((<Unwrapped (Term TermF a)>_R
                                                      -> (Identity
                                                            (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                           <TermF>_N <a>_N))))_R)
                                                     ; (<Unwrapped (Term TermF a)>_R
                                                        -> N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                ; Nth:2
                                                    ((<Unwrapped (Term TermF a)>_R
                                                      -> Sym
                                                           (N:Identity[0]
                                                              <Unwrapped (Term TermF a)>_R))
                                                     ; (<Unwrapped (Term TermF a)>_R
                                                        -> (Identity
                                                              (Sub (D:R:UnwrappedTerm[0]
                                                                        <TermF>_N <a>_N)))_R))))
                                     ; Nth:3
                                         ((<Unwrapped (Term TermF a)>_R
                                           -> Nth:2
                                                ((<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N <a>_N))))_R)
                                                 ; (<Unwrapped (Term TermF a)>_R
                                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                              ; Nth:3
                                                  ((<Unwrapped (Term TermF a)>_R
                                                    -> Sym
                                                         (N:Identity[0]
                                                            <Unwrapped (Term TermF a)>_R))
                                                   ; (Nth:1
                                                        (Nth:2
                                                           (Nth:3
                                                              (Nth:3
                                                                 (((Sym
                                                                      (N:Wrapped[0]
                                                                         <Term TermF a>_N)
                                                                    ; Sym
                                                                        (N:Rewrapped[0]
                                                                           <Term TermF a>_N
                                                                           <Term TermF a>_N)
                                                                    ; Nth:3
                                                                        ((<(Term TermF a :: *)
                                                                           ~
                                                                           (Term TermF a :: *)>_R
                                                                          -> N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                         ; (<(Term TermF a :: *)
                                                                             ~
                                                                             (Term TermF a :: *)>_R
                                                                            -> N:Wrapped[0]
                                                                                 <Term TermF a>_N))
                                                                    ; (forall (p1 :: <*
                                                                                      -> * -> *>_N).
                                                                       forall (f2 :: <* -> *>_N).
                                                                       <Profunctor p1>_R
                                                                       -> <Functor f2>_R
                                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                    <TermF>_N
                                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                      <TermF>_N
                                                                                                      <a>_N))
                                                                       -> <p1 (Term
                                                                                 TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))
                                                      -> Nth:3
                                                           (Nth:2
                                                              (Nth:3
                                                                 (Nth:3
                                                                    (((Sym
                                                                         (N:Wrapped[0]
                                                                            <Term TermF a>_N)
                                                                       ; Sym
                                                                           (N:Rewrapped[0]
                                                                              <Term TermF a>_N
                                                                              <Term TermF a>_N)
                                                                       ; Nth:3
                                                                           ((<(Term TermF a :: *)
                                                                              ~
                                                                              (Term TermF a :: *)>_R
                                                                             -> N:Rewrapped[0]
                                                                                  <Term TermF a>_N
                                                                                  <Term TermF a>_N)
                                                                            ; (<(Term TermF a :: *)
                                                                                ~
                                                                                (Term
                                                                                   TermF a :: *)>_R
                                                                               -> N:Wrapped[0]
                                                                                    <Term
                                                                                       TermF a>_N))
                                                                       ; (forall (p1 :: <*
                                                                                         -> *
                                                                                         -> *>_N).
                                                                          forall (f2 :: <* -> *>_N).
                                                                          <Profunctor p1>_R
                                                                          -> <Functor f2>_R
                                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                       <TermF>_N
                                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                         <TermF>_N
                                                                                                         <a>_N))
                                                                          -> <p1 (Term
                                                                                    TermF
                                                                                    a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))))
                                              ; Nth:2
                                                  ((N:Identity[0] <TermF (Term TermF) a>_R
                                                    -> N:Identity[0] <Term TermF a>_R)
                                                   ; (<TermF (Term TermF) a>_R
                                                      -> N:Term[0] <TermF>_N <a>_N))
                                              ; Nth:3
                                                  ((<TermF (Term TermF) a>_R
                                                    -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                   ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                      -> Sym (N:Identity[0] <Term TermF a>_R))))
                                          ; (<Unwrapped (Term TermF a)>_R
                                             -> N:Identity[0] <Term TermF a>_R)
                                          ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                             -> Sym (N:Identity[0] <Term TermF a>_R)))
                                     ; Sym
                                         (N:Tagged[0]
                                            <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                     ; Nth:3
                                         ((<Tagged Int (Identity Int)>_R
                                           -> Sym
                                                (N:Identity[0]
                                                   (Sym (N:Identity[0] <Term TermF a>_R)
                                                    ; Sym
                                                        (N:Tagged[0]
                                                           <*>_N
                                                           <Term TermF a>_P
                                                           <Identity (Term TermF a)>_R))))
                                          ; (<Tagged Int (Identity Int)>_R
                                             -> N:Identity[0] <Term TermF a>_R)
                                          ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                              ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                             -> <Term TermF a>_R)
                                          ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                     :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)));
                        TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
                      };
                    BMMul ipv -> Nothing @ (Term TermF a)
                  };
                TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
              };
            BMMul ipv -> Nothing @ (Term TermF a)
          }
          }
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalTerm3 :: forall a. EvalRule (Term TermF a)
evalTerm3 = \ (@ a) -> EvalRule @ (Term TermF a) (evalTerm4 @ a)

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
evalTerm2 :: forall a. [EvalRule (Term TermF a)]
evalTerm2
  = \ (@ a) ->
      : @ (EvalRule (Term TermF a))
        (evalTerm3 @ a)
        ([] @ (EvalRule (Term TermF a)))

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
evalTerm1 :: forall a. [EvalRule (Term TermF a)]
evalTerm1
  = \ (@ a) ->
      : @ (EvalRule (Term TermF a)) (evalTerm5 @ a) (evalTerm2 @ a)

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalTerm :: forall a. Term TermF a -> Term TermF a
evalTerm = \ (@ a) -> mkEval @ (Term TermF a) (evalTerm1 @ a)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lit4 :: Int
lit4 = I# 2#

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
lit3 :: forall a. BaseF (Term TermF) a
lit3 = \ (@ a) -> TmLit @ (Term TermF) @ a lit4

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
lit1 :: forall a. TermF (Term TermF) a
lit1 = \ (@ a) -> BMBase @ (Term TermF) @ a (lit3 @ a)

-- RHS size: {terms: 1, types: 0, coercions: 594, joins: 0/0}
lit2 :: forall a. Term TermF a
lit2
  = lit1
    `cast` (forall (a :: <*>_N).
            Nth:3
              (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                 ; Sym
                     (N:Tagged[0]
                        <*>_N
                        <BaseF (Term TermF) a>_P
                        <Identity (BaseF (Term TermF) a)>_R))
                -> <TermF (Term TermF) a>_R)
               ; (<Tagged
                     (BaseF (Term TermF) a) (Identity (BaseF (Term TermF) a))>_R
                  -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                     ; Sym
                         (N:Tagged[0]
                            <*>_N
                            <TermF (Term TermF) a>_P
                            <Identity (TermF (Term TermF) a)>_R)))
            ; N:Tagged[0]
                <*>_N
                U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
            ; Nth:2
                ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                  -> N:Identity[0] <Term TermF a>_R)
                 ; (<Unwrapped (Term TermF a)>_R
                    -> Sym (N:Identity[0] <Term TermF a>_R))
                 ; (<Unwrapped (Term TermF a)>_R
                    -> Nth:3
                         ((N:Identity[0] <TermF (Term TermF) a>_R
                           -> N:Identity[0] <Term TermF a>_R)
                          ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                       ; Nth:2
                           ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                            ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                               -> Sym (N:Identity[0] <Term TermF a>_R)))
                       ; Nth:3
                           ((<Unwrapped (Term TermF a)>_R
                             -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                            ; (<Unwrapped (Term TermF a)>_R
                               -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                       ; Nth:2
                           ((<Unwrapped (Term TermF a)>_R
                             -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; (<Unwrapped (Term TermF a)>_R
                               -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
            ; Nth:3
                ((<Unwrapped (Term TermF a)>_R
                  -> Nth:2
                       ((<Unwrapped (Term TermF a)>_R
                         -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                        ; (<Unwrapped (Term TermF a)>_R
                           -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                     ; Nth:3
                         ((<Unwrapped (Term TermF a)>_R
                           -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; (Nth:1
                               (Nth:2
                                  (Nth:3
                                     (Nth:3
                                        (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                           ; Sym (N:Rewrapped[0] <Term TermF a>_N <Term TermF a>_N)
                                           ; Nth:3
                                               ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                 -> N:Rewrapped[0]
                                                      <Term TermF a>_N <Term TermF a>_N)
                                                ; (<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                   -> N:Wrapped[0] <Term TermF a>_N))
                                           ; (forall (p1 :: <* -> * -> *>_N).
                                              forall (f2 :: <* -> *>_N).
                                              <Profunctor p1>_R
                                              -> <Functor f2>_R
                                              -> <p1>_R (D:R:UnwrappedTerm[0]
                                                           <TermF>_N
                                                           <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                             <TermF>_N <a>_N))
                                              -> <p1 (Term TermF a) (f2 (Term
                                                                           TermF a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   TermF
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   TermF
                                                                                                   a))>_N)@<Identity>_N))))
                             -> Nth:3
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                              ; Sym
                                                  (N:Rewrapped[0] <Term TermF a>_N <Term TermF a>_N)
                                              ; Nth:3
                                                  ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF a>_N <Term TermF a>_N)
                                                   ; (<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF a>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                <TermF>_N <a>_N))
                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                              TermF
                                                                              a))>_R))@<Exchange
                                                                                          (Unwrapped
                                                                                             (Term
                                                                                                TermF
                                                                                                a))
                                                                                          (Unwrapped
                                                                                             (Term
                                                                                                TermF
                                                                                                a))>_N)@<Identity>_N))))))
                     ; Nth:2
                         ((N:Identity[0] <TermF (Term TermF) a>_R
                           -> N:Identity[0] <Term TermF a>_R)
                          ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                     ; Nth:3
                         ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                          ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                             -> Sym (N:Identity[0] <Term TermF a>_R))))
                 ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                 ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                    -> Sym (N:Identity[0] <Term TermF a>_R)))
            ; Sym
                (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
            ; Nth:3
                ((<Tagged Int (Identity Int)>_R
                  -> Sym
                       (N:Identity[0]
                          (Sym (N:Identity[0] <Term TermF a>_R)
                           ; Sym
                               (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                 ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                 ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                     ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                    -> <Term TermF a>_R)
                 ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
            :: ((forall a. TermF (Term TermF) a) :: *)
               ~R#
               ((forall a. Term TermF a) :: *))

-- RHS size: {terms: 8, types: 17, coercions: 563, joins: 0/0}
evalAddSmall
  :: forall a.
     (Term TermF a -> Term TermF a) -> Term TermF a -> Term TermF a
evalAddSmall
  = \ (@ a)
      (eval :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      eval
        ((BMBase @ (Term TermF) @ a (TmAdd @ (Term TermF) @ a tm tm))
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
evalAddBig6 :: Int
evalAddBig6 = I# 3#

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
evalAddBig5 :: forall a. BaseF (Term TermF) a
evalAddBig5 = \ (@ a) -> TmLit @ (Term TermF) @ a evalAddBig6

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalAddBig4 :: forall a. TermF (Term TermF) a
evalAddBig4
  = \ (@ a) -> BMBase @ (Term TermF) @ a (evalAddBig5 @ a)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
evalAddBig3 :: Int
evalAddBig3 = I# 5#

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
evalAddBig2 :: forall a. BaseF (Term TermF) a
evalAddBig2 = \ (@ a) -> TmLit @ (Term TermF) @ a evalAddBig3

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalAddBig1 :: forall a. TermF (Term TermF) a
evalAddBig1
  = \ (@ a) -> BMBase @ (Term TermF) @ a (evalAddBig2 @ a)

-- RHS size: {terms: 11, types: 25, coercions: 2,384, joins: 0/0}
evalAddMulSmall
  :: forall a.
     (Term TermF a -> Term TermF a) -> Term TermF a -> Term TermF a
evalAddMulSmall
  = \ (@ a)
      (eval :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      eval
        ((BMBase
            @ (Term TermF)
            @ a
            (TmAdd
               @ (Term TermF)
               @ a
               ((BMMul
                   @ (Term TermF)
                   @ a
                   (TmMul
                      @ (Term TermF)
                      @ a
                      tm
                      ((evalAddBig4 @ a)
                       `cast` (Nth:3
                                 (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                    ; Sym
                                        (N:Tagged[0]
                                           <*>_N
                                           <BaseF (Term TermF) a>_P
                                           <Identity (BaseF (Term TermF) a)>_R))
                                   -> <TermF (Term TermF) a>_R)
                                  ; (<Tagged
                                        (BaseF (Term TermF) a) (Identity (BaseF (Term TermF) a))>_R
                                     -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                        ; Sym
                                            (N:Tagged[0]
                                               <*>_N
                                               <TermF (Term TermF) a>_P
                                               <Identity (TermF (Term TermF) a)>_R)))
                               ; N:Tagged[0]
                                   <*>_N
                                   U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                               ; Nth:2
                                   ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Term TermF a>_R))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Nth:3
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                          ; Nth:2
                                              ((<TermF (Term TermF) a>_R
                                                -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                  -> Sym (N:Identity[0] <Term TermF a>_R)))
                                          ; Nth:3
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                     <TermF>_N <a>_N))))_R)
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                          ; Nth:2
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (D:R:UnwrappedTerm[0]
                                                                  <TermF>_N <a>_N)))_R))))
                               ; Nth:3
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> Nth:2
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> (Identity
                                                  (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N <a>_N))))_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (Nth:1
                                                  (Nth:2
                                                     (Nth:3
                                                        (Nth:3
                                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                              ; Sym
                                                                  (N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                              ; Nth:3
                                                                  ((<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Rewrapped[0]
                                                                         <Term TermF a>_N
                                                                         <Term TermF a>_N)
                                                                   ; (<(Term TermF a :: *)
                                                                       ~
                                                                       (Term TermF a :: *)>_R
                                                                      -> N:Wrapped[0]
                                                                           <Term TermF a>_N))
                                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                                 forall (f2 :: <* -> *>_N).
                                                                 <Profunctor p1>_R
                                                                 -> <Functor f2>_R
                                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                              <TermF>_N
                                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                <TermF>_N
                                                                                                <a>_N))
                                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))
                                                -> Nth:3
                                                     (Nth:2
                                                        (Nth:3
                                                           (Nth:3
                                                              (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                                 ; Sym
                                                                     (N:Rewrapped[0]
                                                                        <Term TermF a>_N
                                                                        <Term TermF a>_N)
                                                                 ; Nth:3
                                                                     ((<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                      ; (<(Term TermF a :: *)
                                                                          ~
                                                                          (Term TermF a :: *)>_R
                                                                         -> N:Wrapped[0]
                                                                              <Term TermF a>_N))
                                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                                    forall (f2 :: <* -> *>_N).
                                                                    <Profunctor p1>_R
                                                                    -> <Functor f2>_R
                                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                 <TermF>_N
                                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                   <TermF>_N
                                                                                                   <a>_N))
                                                                    -> <p1 (Term TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))))
                                        ; Nth:2
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:3
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R))))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                       -> Sym (N:Identity[0] <Term TermF a>_R)))
                               ; Sym
                                   (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                               ; Nth:3
                                   ((<Tagged Int (Identity Int)>_R
                                     -> Sym
                                          (N:Identity[0]
                                             (Sym (N:Identity[0] <Term TermF a>_R)
                                              ; Sym
                                                  (N:Tagged[0]
                                                     <*>_N
                                                     <Term TermF a>_P
                                                     <Identity (Term TermF a)>_R))))
                                    ; (<Tagged Int (Identity Int)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                       -> <Term TermF a>_R)
                                    ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                               :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                `cast` (Nth:3
                          (((Sym (N:Identity[0] <MulF (Term TermF) a>_R)
                             ; Sym
                                 (N:Tagged[0]
                                    <*>_N
                                    <MulF (Term TermF) a>_P
                                    <Identity (MulF (Term TermF) a)>_R))
                            -> <TermF (Term TermF) a>_R)
                           ; (<Tagged
                                 (MulF (Term TermF) a) (Identity (MulF (Term TermF) a))>_R
                              -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                 ; Sym
                                     (N:Tagged[0]
                                        <*>_N
                                        <TermF (Term TermF) a>_P
                                        <Identity (TermF (Term TermF) a)>_R)))
                        ; N:Tagged[0]
                            <*>_N
                            U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                            (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                        ; Nth:2
                            ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                              -> N:Identity[0] <Term TermF a>_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Term TermF a>_R))
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Nth:3
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                   ; Nth:2
                                       ((<TermF (Term TermF) a>_R
                                         -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                           -> Sym (N:Identity[0] <Term TermF a>_R)))
                                   ; Nth:3
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> (Identity
                                               (Sub (Sym (D:R:UnwrappedTerm[0]
                                                              <TermF>_N <a>_N))))_R)
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                   ; Nth:2
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> (Identity
                                                 (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                        ; Nth:3
                            ((<Unwrapped (Term TermF a)>_R
                              -> Nth:2
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> (Identity
                                           (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; Nth:3
                                     ((<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                      ; (Nth:1
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                       ; Nth:3
                                                           ((<(Term TermF a :: *)
                                                              ~
                                                              (Term TermF a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term TermF a>_N <Term TermF a>_N)
                                                            ; (<(Term TermF a :: *)
                                                                ~
                                                                (Term TermF a :: *)>_R
                                                               -> N:Wrapped[0] <Term TermF a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <TermF>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term TermF a) (f2 (Term
                                                                                       TermF
                                                                                       a))>_R))@<Exchange
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))>_N)@<Identity>_N))))
                                         -> Nth:3
                                              (Nth:2
                                                 (Nth:3
                                                    (Nth:3
                                                       (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                          ; Sym
                                                              (N:Rewrapped[0]
                                                                 <Term TermF a>_N <Term TermF a>_N)
                                                          ; Nth:3
                                                              ((<(Term TermF a :: *)
                                                                 ~
                                                                 (Term TermF a :: *)>_R
                                                                -> N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                               ; (<(Term TermF a :: *)
                                                                   ~
                                                                   (Term TermF a :: *)>_R
                                                                  -> N:Wrapped[0] <Term TermF a>_N))
                                                          ; (forall (p1 :: <* -> * -> *>_N).
                                                             forall (f2 :: <* -> *>_N).
                                                             <Profunctor p1>_R
                                                             -> <Functor f2>_R
                                                             -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                          <TermF>_N
                                                                          <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                            <TermF>_N
                                                                                            <a>_N))
                                                             -> <p1 (Term TermF a) (f2 (Term
                                                                                          TermF
                                                                                          a))>_R))@<Exchange
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))>_N)@<Identity>_N))))))
                                 ; Nth:2
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                 ; Nth:3
                                     ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                      ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                         -> Sym (N:Identity[0] <Term TermF a>_R))))
                             ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                             ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                -> Sym (N:Identity[0] <Term TermF a>_R)))
                        ; Sym
                            (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                        ; Nth:3
                            ((<Tagged
                                 (Term TermF a, Term TermF a)
                                 (Identity (Term TermF a, Term TermF a))>_R
                              -> Sym
                                   (N:Identity[0]
                                      (Sym (N:Identity[0] <Term TermF a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                             ; (<Tagged
                                   (Term TermF a, Term TermF a)
                                   (Identity (Term TermF a, Term TermF a))>_R
                                -> N:Identity[0] <Term TermF a>_R)
                             ; ((N:Tagged[0]
                                   <*>_N
                                   <(Term TermF a, Term TermF a)>_P
                                   <Identity (Term TermF a, Term TermF a)>_R
                                 ; N:Identity[0]
                                     (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                -> <Term TermF a>_R)
                             ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                -> <Term TermF a>_R))
                        :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
               ((evalAddBig1 @ a)
                `cast` (Nth:3
                          (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                             ; Sym
                                 (N:Tagged[0]
                                    <*>_N
                                    <BaseF (Term TermF) a>_P
                                    <Identity (BaseF (Term TermF) a)>_R))
                            -> <TermF (Term TermF) a>_R)
                           ; (<Tagged
                                 (BaseF (Term TermF) a) (Identity (BaseF (Term TermF) a))>_R
                              -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                 ; Sym
                                     (N:Tagged[0]
                                        <*>_N
                                        <TermF (Term TermF) a>_P
                                        <Identity (TermF (Term TermF) a)>_R)))
                        ; N:Tagged[0]
                            <*>_N
                            U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                            (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                        ; Nth:2
                            ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                              -> N:Identity[0] <Term TermF a>_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Term TermF a>_R))
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Nth:3
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                   ; Nth:2
                                       ((<TermF (Term TermF) a>_R
                                         -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                           -> Sym (N:Identity[0] <Term TermF a>_R)))
                                   ; Nth:3
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> (Identity
                                               (Sub (Sym (D:R:UnwrappedTerm[0]
                                                              <TermF>_N <a>_N))))_R)
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                   ; Nth:2
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> (Identity
                                                 (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                        ; Nth:3
                            ((<Unwrapped (Term TermF a)>_R
                              -> Nth:2
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> (Identity
                                           (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; Nth:3
                                     ((<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                      ; (Nth:1
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                       ; Nth:3
                                                           ((<(Term TermF a :: *)
                                                              ~
                                                              (Term TermF a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term TermF a>_N <Term TermF a>_N)
                                                            ; (<(Term TermF a :: *)
                                                                ~
                                                                (Term TermF a :: *)>_R
                                                               -> N:Wrapped[0] <Term TermF a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <TermF>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term TermF a) (f2 (Term
                                                                                       TermF
                                                                                       a))>_R))@<Exchange
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))>_N)@<Identity>_N))))
                                         -> Nth:3
                                              (Nth:2
                                                 (Nth:3
                                                    (Nth:3
                                                       (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                          ; Sym
                                                              (N:Rewrapped[0]
                                                                 <Term TermF a>_N <Term TermF a>_N)
                                                          ; Nth:3
                                                              ((<(Term TermF a :: *)
                                                                 ~
                                                                 (Term TermF a :: *)>_R
                                                                -> N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                               ; (<(Term TermF a :: *)
                                                                   ~
                                                                   (Term TermF a :: *)>_R
                                                                  -> N:Wrapped[0] <Term TermF a>_N))
                                                          ; (forall (p1 :: <* -> * -> *>_N).
                                                             forall (f2 :: <* -> *>_N).
                                                             <Profunctor p1>_R
                                                             -> <Functor f2>_R
                                                             -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                          <TermF>_N
                                                                          <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                            <TermF>_N
                                                                                            <a>_N))
                                                             -> <p1 (Term TermF a) (f2 (Term
                                                                                          TermF
                                                                                          a))>_R))@<Exchange
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))>_N)@<Identity>_N))))))
                                 ; Nth:2
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                 ; Nth:3
                                     ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                      ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                         -> Sym (N:Identity[0] <Term TermF a>_R))))
                             ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                             ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                -> Sym (N:Identity[0] <Term TermF a>_R)))
                        ; Sym
                            (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                        ; Nth:3
                            ((<Tagged Int (Identity Int)>_R
                              -> Sym
                                   (N:Identity[0]
                                      (Sym (N:Identity[0] <Term TermF a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                             ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                             ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                 ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                -> <Term TermF a>_R)
                             ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                        :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 14, types: 31, coercions: 2,871, joins: 0/0}
evalAddBig
  :: forall a.
     (Term TermF a -> Term TermF a) -> Term TermF a -> Term TermF a
evalAddBig
  = \ (@ a)
      (eval :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      eval
        ((BMBase
            @ (Term TermF)
            @ a
            (TmAdd
               @ (Term TermF)
               @ a
               ((BMBase
                   @ (Term TermF)
                   @ a
                   (TmAdd
                      @ (Term TermF)
                      @ a
                      tm
                      ((evalAddBig4 @ a)
                       `cast` (Nth:3
                                 (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                    ; Sym
                                        (N:Tagged[0]
                                           <*>_N
                                           <BaseF (Term TermF) a>_P
                                           <Identity (BaseF (Term TermF) a)>_R))
                                   -> <TermF (Term TermF) a>_R)
                                  ; (<Tagged
                                        (BaseF (Term TermF) a) (Identity (BaseF (Term TermF) a))>_R
                                     -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                        ; Sym
                                            (N:Tagged[0]
                                               <*>_N
                                               <TermF (Term TermF) a>_P
                                               <Identity (TermF (Term TermF) a)>_R)))
                               ; N:Tagged[0]
                                   <*>_N
                                   U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                               ; Nth:2
                                   ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Term TermF a>_R))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Nth:3
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                          ; Nth:2
                                              ((<TermF (Term TermF) a>_R
                                                -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                  -> Sym (N:Identity[0] <Term TermF a>_R)))
                                          ; Nth:3
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                     <TermF>_N <a>_N))))_R)
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                          ; Nth:2
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (D:R:UnwrappedTerm[0]
                                                                  <TermF>_N <a>_N)))_R))))
                               ; Nth:3
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> Nth:2
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> (Identity
                                                  (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N <a>_N))))_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (Nth:1
                                                  (Nth:2
                                                     (Nth:3
                                                        (Nth:3
                                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                              ; Sym
                                                                  (N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                              ; Nth:3
                                                                  ((<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Rewrapped[0]
                                                                         <Term TermF a>_N
                                                                         <Term TermF a>_N)
                                                                   ; (<(Term TermF a :: *)
                                                                       ~
                                                                       (Term TermF a :: *)>_R
                                                                      -> N:Wrapped[0]
                                                                           <Term TermF a>_N))
                                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                                 forall (f2 :: <* -> *>_N).
                                                                 <Profunctor p1>_R
                                                                 -> <Functor f2>_R
                                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                              <TermF>_N
                                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                <TermF>_N
                                                                                                <a>_N))
                                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))
                                                -> Nth:3
                                                     (Nth:2
                                                        (Nth:3
                                                           (Nth:3
                                                              (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                                 ; Sym
                                                                     (N:Rewrapped[0]
                                                                        <Term TermF a>_N
                                                                        <Term TermF a>_N)
                                                                 ; Nth:3
                                                                     ((<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                      ; (<(Term TermF a :: *)
                                                                          ~
                                                                          (Term TermF a :: *)>_R
                                                                         -> N:Wrapped[0]
                                                                              <Term TermF a>_N))
                                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                                    forall (f2 :: <* -> *>_N).
                                                                    <Profunctor p1>_R
                                                                    -> <Functor f2>_R
                                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                 <TermF>_N
                                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                   <TermF>_N
                                                                                                   <a>_N))
                                                                    -> <p1 (Term TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))))
                                        ; Nth:2
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:3
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R))))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                       -> Sym (N:Identity[0] <Term TermF a>_R)))
                               ; Sym
                                   (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                               ; Nth:3
                                   ((<Tagged Int (Identity Int)>_R
                                     -> Sym
                                          (N:Identity[0]
                                             (Sym (N:Identity[0] <Term TermF a>_R)
                                              ; Sym
                                                  (N:Tagged[0]
                                                     <*>_N
                                                     <Term TermF a>_P
                                                     <Identity (Term TermF a)>_R))))
                                    ; (<Tagged Int (Identity Int)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                       -> <Term TermF a>_R)
                                    ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                               :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                `cast` (Sym
                          (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                        ; Nth:2
                            ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                              -> N:Identity[0] <Term TermF a>_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Term TermF a>_R))
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Nth:3
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                   ; Nth:2
                                       ((<TermF (Term TermF) a>_R
                                         -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                           -> Sym (N:Identity[0] <Term TermF a>_R)))
                                   ; Nth:3
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> (Identity
                                               (Sub (Sym (D:R:UnwrappedTerm[0]
                                                              <TermF>_N <a>_N))))_R)
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                   ; Nth:2
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> (Identity
                                                 (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                        ; Nth:3
                            ((<Unwrapped (Term TermF a)>_R
                              -> Nth:2
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> (Identity
                                           (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; Nth:3
                                     ((<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                      ; (Nth:1
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                       ; Nth:3
                                                           ((<(Term TermF a :: *)
                                                              ~
                                                              (Term TermF a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term TermF a>_N <Term TermF a>_N)
                                                            ; (<(Term TermF a :: *)
                                                                ~
                                                                (Term TermF a :: *)>_R
                                                               -> N:Wrapped[0] <Term TermF a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <TermF>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term TermF a) (f2 (Term
                                                                                       TermF
                                                                                       a))>_R))@<Exchange
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))>_N)@<Identity>_N))))
                                         -> Nth:3
                                              (Nth:2
                                                 (Nth:3
                                                    (Nth:3
                                                       (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                          ; Sym
                                                              (N:Rewrapped[0]
                                                                 <Term TermF a>_N <Term TermF a>_N)
                                                          ; Nth:3
                                                              ((<(Term TermF a :: *)
                                                                 ~
                                                                 (Term TermF a :: *)>_R
                                                                -> N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                               ; (<(Term TermF a :: *)
                                                                   ~
                                                                   (Term TermF a :: *)>_R
                                                                  -> N:Wrapped[0] <Term TermF a>_N))
                                                          ; (forall (p1 :: <* -> * -> *>_N).
                                                             forall (f2 :: <* -> *>_N).
                                                             <Profunctor p1>_R
                                                             -> <Functor f2>_R
                                                             -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                          <TermF>_N
                                                                          <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                            <TermF>_N
                                                                                            <a>_N))
                                                             -> <p1 (Term TermF a) (f2 (Term
                                                                                          TermF
                                                                                          a))>_R))@<Exchange
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))>_N)@<Identity>_N))))))
                                 ; Nth:2
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                 ; Nth:3
                                     ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                      ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                         -> Sym (N:Identity[0] <Term TermF a>_R))))
                             ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                             ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                -> Sym (N:Identity[0] <Term TermF a>_R)))
                        ; Sym
                            (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                        ; Nth:3
                            ((<Tagged
                                 (Term TermF a, Term TermF a)
                                 (Identity (Term TermF a, Term TermF a))>_R
                              -> Sym
                                   (N:Identity[0]
                                      (Sym (N:Identity[0] <Term TermF a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                             ; (<Tagged
                                   (Term TermF a, Term TermF a)
                                   (Identity (Term TermF a, Term TermF a))>_R
                                -> N:Identity[0] <Term TermF a>_R)
                             ; ((N:Tagged[0]
                                   <*>_N
                                   <(Term TermF a, Term TermF a)>_P
                                   <Identity (Term TermF a, Term TermF a)>_R
                                 ; N:Identity[0]
                                     (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                -> <Term TermF a>_R)
                             ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                -> <Term TermF a>_R))
                        :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
               ((BMBase
                   @ (Term TermF)
                   @ a
                   (TmAdd
                      @ (Term TermF)
                      @ a
                      tm
                      ((evalAddBig1 @ a)
                       `cast` (Nth:3
                                 (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                    ; Sym
                                        (N:Tagged[0]
                                           <*>_N
                                           <BaseF (Term TermF) a>_P
                                           <Identity (BaseF (Term TermF) a)>_R))
                                   -> <TermF (Term TermF) a>_R)
                                  ; (<Tagged
                                        (BaseF (Term TermF) a) (Identity (BaseF (Term TermF) a))>_R
                                     -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                        ; Sym
                                            (N:Tagged[0]
                                               <*>_N
                                               <TermF (Term TermF) a>_P
                                               <Identity (TermF (Term TermF) a)>_R)))
                               ; N:Tagged[0]
                                   <*>_N
                                   U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                               ; Nth:2
                                   ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Term TermF a>_R))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Nth:3
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                          ; Nth:2
                                              ((<TermF (Term TermF) a>_R
                                                -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                  -> Sym (N:Identity[0] <Term TermF a>_R)))
                                          ; Nth:3
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                     <TermF>_N <a>_N))))_R)
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                          ; Nth:2
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (D:R:UnwrappedTerm[0]
                                                                  <TermF>_N <a>_N)))_R))))
                               ; Nth:3
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> Nth:2
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> (Identity
                                                  (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N <a>_N))))_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (Nth:1
                                                  (Nth:2
                                                     (Nth:3
                                                        (Nth:3
                                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                              ; Sym
                                                                  (N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                              ; Nth:3
                                                                  ((<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Rewrapped[0]
                                                                         <Term TermF a>_N
                                                                         <Term TermF a>_N)
                                                                   ; (<(Term TermF a :: *)
                                                                       ~
                                                                       (Term TermF a :: *)>_R
                                                                      -> N:Wrapped[0]
                                                                           <Term TermF a>_N))
                                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                                 forall (f2 :: <* -> *>_N).
                                                                 <Profunctor p1>_R
                                                                 -> <Functor f2>_R
                                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                              <TermF>_N
                                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                <TermF>_N
                                                                                                <a>_N))
                                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))
                                                -> Nth:3
                                                     (Nth:2
                                                        (Nth:3
                                                           (Nth:3
                                                              (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                                 ; Sym
                                                                     (N:Rewrapped[0]
                                                                        <Term TermF a>_N
                                                                        <Term TermF a>_N)
                                                                 ; Nth:3
                                                                     ((<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                      ; (<(Term TermF a :: *)
                                                                          ~
                                                                          (Term TermF a :: *)>_R
                                                                         -> N:Wrapped[0]
                                                                              <Term TermF a>_N))
                                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                                    forall (f2 :: <* -> *>_N).
                                                                    <Profunctor p1>_R
                                                                    -> <Functor f2>_R
                                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                 <TermF>_N
                                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                   <TermF>_N
                                                                                                   <a>_N))
                                                                    -> <p1 (Term TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))))
                                        ; Nth:2
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:3
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R))))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                       -> Sym (N:Identity[0] <Term TermF a>_R)))
                               ; Sym
                                   (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                               ; Nth:3
                                   ((<Tagged Int (Identity Int)>_R
                                     -> Sym
                                          (N:Identity[0]
                                             (Sym (N:Identity[0] <Term TermF a>_R)
                                              ; Sym
                                                  (N:Tagged[0]
                                                     <*>_N
                                                     <Term TermF a>_P
                                                     <Identity (Term TermF a)>_R))))
                                    ; (<Tagged Int (Identity Int)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                       -> <Term TermF a>_R)
                                    ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                               :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                `cast` (Sym
                          (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                        ; Nth:2
                            ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                              -> N:Identity[0] <Term TermF a>_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Term TermF a>_R))
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Nth:3
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                   ; Nth:2
                                       ((<TermF (Term TermF) a>_R
                                         -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                           -> Sym (N:Identity[0] <Term TermF a>_R)))
                                   ; Nth:3
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> (Identity
                                               (Sub (Sym (D:R:UnwrappedTerm[0]
                                                              <TermF>_N <a>_N))))_R)
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                   ; Nth:2
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> (Identity
                                                 (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                        ; Nth:3
                            ((<Unwrapped (Term TermF a)>_R
                              -> Nth:2
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> (Identity
                                           (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; Nth:3
                                     ((<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                      ; (Nth:1
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                       ; Nth:3
                                                           ((<(Term TermF a :: *)
                                                              ~
                                                              (Term TermF a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term TermF a>_N <Term TermF a>_N)
                                                            ; (<(Term TermF a :: *)
                                                                ~
                                                                (Term TermF a :: *)>_R
                                                               -> N:Wrapped[0] <Term TermF a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <TermF>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term TermF a) (f2 (Term
                                                                                       TermF
                                                                                       a))>_R))@<Exchange
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))>_N)@<Identity>_N))))
                                         -> Nth:3
                                              (Nth:2
                                                 (Nth:3
                                                    (Nth:3
                                                       (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                          ; Sym
                                                              (N:Rewrapped[0]
                                                                 <Term TermF a>_N <Term TermF a>_N)
                                                          ; Nth:3
                                                              ((<(Term TermF a :: *)
                                                                 ~
                                                                 (Term TermF a :: *)>_R
                                                                -> N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                               ; (<(Term TermF a :: *)
                                                                   ~
                                                                   (Term TermF a :: *)>_R
                                                                  -> N:Wrapped[0] <Term TermF a>_N))
                                                          ; (forall (p1 :: <* -> * -> *>_N).
                                                             forall (f2 :: <* -> *>_N).
                                                             <Profunctor p1>_R
                                                             -> <Functor f2>_R
                                                             -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                          <TermF>_N
                                                                          <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                            <TermF>_N
                                                                                            <a>_N))
                                                             -> <p1 (Term TermF a) (f2 (Term
                                                                                          TermF
                                                                                          a))>_R))@<Exchange
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))>_N)@<Identity>_N))))))
                                 ; Nth:2
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                 ; Nth:3
                                     ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                      ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                         -> Sym (N:Identity[0] <Term TermF a>_R))))
                             ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                             ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                -> Sym (N:Identity[0] <Term TermF a>_R)))
                        ; Sym
                            (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                        ; Nth:3
                            ((<Tagged
                                 (Term TermF a, Term TermF a)
                                 (Identity (Term TermF a, Term TermF a))>_R
                              -> Sym
                                   (N:Identity[0]
                                      (Sym (N:Identity[0] <Term TermF a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                             ; (<Tagged
                                   (Term TermF a, Term TermF a)
                                   (Identity (Term TermF a, Term TermF a))>_R
                                -> N:Identity[0] <Term TermF a>_R)
                             ; ((N:Tagged[0]
                                   <*>_N
                                   <(Term TermF a, Term TermF a)>_P
                                   <Identity (Term TermF a, Term TermF a)>_R
                                 ; N:Identity[0]
                                     (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                -> <Term TermF a>_R)
                             ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                -> <Term TermF a>_R))
                        :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
evalAddMulBig6 :: Int
evalAddMulBig6 = I# 7#

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
evalAddMulBig5 :: forall a. BaseF (Term TermF) a
evalAddMulBig5 = \ (@ a) -> TmLit @ (Term TermF) @ a evalAddMulBig6

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalAddMulBig4 :: forall a. TermF (Term TermF) a
evalAddMulBig4
  = \ (@ a) -> BMBase @ (Term TermF) @ a (evalAddMulBig5 @ a)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
evalAddMulBig3 :: Int
evalAddMulBig3 = I# 11#

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
evalAddMulBig2 :: forall a. BaseF (Term TermF) a
evalAddMulBig2 = \ (@ a) -> TmLit @ (Term TermF) @ a evalAddMulBig3

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalAddMulBig1 :: forall a. TermF (Term TermF) a
evalAddMulBig1
  = \ (@ a) -> BMBase @ (Term TermF) @ a (evalAddMulBig2 @ a)

-- RHS size: {terms: 26, types: 57, coercions: 6,457, joins: 0/0}
evalAddMulBig
  :: forall a.
     (Term TermF a -> Term TermF a) -> Term TermF a -> Term TermF a
evalAddMulBig
  = \ (@ a)
      (eval :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      eval
        ((BMBase
            @ (Term TermF)
            @ a
            (TmAdd
               @ (Term TermF)
               @ a
               ((BMMul
                   @ (Term TermF)
                   @ a
                   (TmMul
                      @ (Term TermF)
                      @ a
                      ((BMBase
                          @ (Term TermF)
                          @ a
                          (TmAdd
                             @ (Term TermF)
                             @ a
                             tm
                             ((evalAddBig4 @ a)
                              `cast` (Nth:3
                                        (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                           ; Sym
                                               (N:Tagged[0]
                                                  <*>_N
                                                  <BaseF (Term TermF) a>_P
                                                  <Identity (BaseF (Term TermF) a)>_R))
                                          -> <TermF (Term TermF) a>_R)
                                         ; (<Tagged
                                               (BaseF (Term TermF) a)
                                               (Identity (BaseF (Term TermF) a))>_R
                                            -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                               ; Sym
                                                   (N:Tagged[0]
                                                      <*>_N
                                                      <TermF (Term TermF) a>_P
                                                      <Identity (TermF (Term TermF) a)>_R)))
                                      ; N:Tagged[0]
                                          <*>_N
                                          U(phant:<*>_N, TermF (Term TermF) a, Unwrapped
                                                                                 (Term TermF a))_P
                                          (Identity
                                             (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                                      ; Nth:2
                                          ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                            -> N:Identity[0] <Term TermF a>_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Term TermF a>_R))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Nth:3
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                                 ; Nth:2
                                                     ((<TermF (Term TermF) a>_R
                                                       -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                      ; (Sym
                                                           (N:Identity[0] <TermF (Term TermF) a>_R)
                                                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                                                 ; Nth:3
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> (Identity
                                                             (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                            <TermF>_N <a>_N))))_R)
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> N:Identity[0]
                                                              <Unwrapped (Term TermF a)>_R))
                                                 ; Nth:2
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> Sym
                                                            (N:Identity[0]
                                                               <Unwrapped (Term TermF a)>_R))
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> (Identity
                                                               (Sub (D:R:UnwrappedTerm[0]
                                                                         <TermF>_N <a>_N)))_R))))
                                      ; Nth:3
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> Nth:2
                                                 ((<Unwrapped (Term TermF a)>_R
                                                   -> (Identity
                                                         (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                        <TermF>_N <a>_N))))_R)
                                                  ; (<Unwrapped (Term TermF a)>_R
                                                     -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; Nth:3
                                                   ((<Unwrapped (Term TermF a)>_R
                                                     -> Sym
                                                          (N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                    ; (Nth:1
                                                         (Nth:2
                                                            (Nth:3
                                                               (Nth:3
                                                                  (((Sym
                                                                       (N:Wrapped[0]
                                                                          <Term TermF a>_N)
                                                                     ; Sym
                                                                         (N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                     ; Nth:3
                                                                         ((<(Term TermF a :: *)
                                                                            ~
                                                                            (Term TermF a :: *)>_R
                                                                           -> N:Rewrapped[0]
                                                                                <Term TermF a>_N
                                                                                <Term TermF a>_N)
                                                                          ; (<(Term TermF a :: *)
                                                                              ~
                                                                              (Term TermF a :: *)>_R
                                                                             -> N:Wrapped[0]
                                                                                  <Term TermF a>_N))
                                                                     ; (forall (p1 :: <*
                                                                                       -> *
                                                                                       -> *>_N).
                                                                        forall (f2 :: <* -> *>_N).
                                                                        <Profunctor p1>_R
                                                                        -> <Functor f2>_R
                                                                        -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                       <TermF>_N
                                                                                                       <a>_N))
                                                                        -> <p1 (Term
                                                                                  TermF a) (f2 (Term
                                                                                                  TermF
                                                                                                  a))>_R))@<Exchange
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))>_N)@<Identity>_N))))
                                                       -> Nth:3
                                                            (Nth:2
                                                               (Nth:3
                                                                  (Nth:3
                                                                     (((Sym
                                                                          (N:Wrapped[0]
                                                                             <Term TermF a>_N)
                                                                        ; Sym
                                                                            (N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                        ; Nth:3
                                                                            ((<(Term TermF a :: *)
                                                                               ~
                                                                               (Term
                                                                                  TermF a :: *)>_R
                                                                              -> N:Rewrapped[0]
                                                                                   <Term TermF a>_N
                                                                                   <Term TermF a>_N)
                                                                             ; (<(Term TermF a :: *)
                                                                                 ~
                                                                                 (Term
                                                                                    TermF a :: *)>_R
                                                                                -> N:Wrapped[0]
                                                                                     <Term
                                                                                        TermF a>_N))
                                                                        ; (forall (p1 :: <*
                                                                                          -> *
                                                                                          -> *>_N).
                                                                           forall (f2 :: <*
                                                                                          -> *>_N).
                                                                           <Profunctor p1>_R
                                                                           -> <Functor f2>_R
                                                                           -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                        <TermF>_N
                                                                                        <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                          <TermF>_N
                                                                                                          <a>_N))
                                                                           -> <p1 (Term
                                                                                     TermF
                                                                                     a) (f2 (Term
                                                                                               TermF
                                                                                               a))>_R))@<Exchange
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))>_N)@<Identity>_N))))))
                                               ; Nth:2
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                               ; Nth:3
                                                   ((<TermF (Term TermF) a>_R
                                                     -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                    ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                       -> Sym (N:Identity[0] <Term TermF a>_R))))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                              -> Sym (N:Identity[0] <Term TermF a>_R)))
                                      ; Sym
                                          (N:Tagged[0]
                                             <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                      ; Nth:3
                                          ((<Tagged Int (Identity Int)>_R
                                            -> Sym
                                                 (N:Identity[0]
                                                    (Sym (N:Identity[0] <Term TermF a>_R)
                                                     ; Sym
                                                         (N:Tagged[0]
                                                            <*>_N
                                                            <Term TermF a>_P
                                                            <Identity (Term TermF a)>_R))))
                                           ; (<Tagged Int (Identity Int)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                               ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                              -> <Term TermF a>_R)
                                           ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                      :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                       `cast` (Sym
                                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                               ; Nth:2
                                   ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Term TermF a>_R))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Nth:3
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                          ; Nth:2
                                              ((<TermF (Term TermF) a>_R
                                                -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                  -> Sym (N:Identity[0] <Term TermF a>_R)))
                                          ; Nth:3
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                     <TermF>_N <a>_N))))_R)
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                          ; Nth:2
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (D:R:UnwrappedTerm[0]
                                                                  <TermF>_N <a>_N)))_R))))
                               ; Nth:3
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> Nth:2
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> (Identity
                                                  (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N <a>_N))))_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (Nth:1
                                                  (Nth:2
                                                     (Nth:3
                                                        (Nth:3
                                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                              ; Sym
                                                                  (N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                              ; Nth:3
                                                                  ((<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Rewrapped[0]
                                                                         <Term TermF a>_N
                                                                         <Term TermF a>_N)
                                                                   ; (<(Term TermF a :: *)
                                                                       ~
                                                                       (Term TermF a :: *)>_R
                                                                      -> N:Wrapped[0]
                                                                           <Term TermF a>_N))
                                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                                 forall (f2 :: <* -> *>_N).
                                                                 <Profunctor p1>_R
                                                                 -> <Functor f2>_R
                                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                              <TermF>_N
                                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                <TermF>_N
                                                                                                <a>_N))
                                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))
                                                -> Nth:3
                                                     (Nth:2
                                                        (Nth:3
                                                           (Nth:3
                                                              (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                                 ; Sym
                                                                     (N:Rewrapped[0]
                                                                        <Term TermF a>_N
                                                                        <Term TermF a>_N)
                                                                 ; Nth:3
                                                                     ((<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                      ; (<(Term TermF a :: *)
                                                                          ~
                                                                          (Term TermF a :: *)>_R
                                                                         -> N:Wrapped[0]
                                                                              <Term TermF a>_N))
                                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                                    forall (f2 :: <* -> *>_N).
                                                                    <Profunctor p1>_R
                                                                    -> <Functor f2>_R
                                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                 <TermF>_N
                                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                   <TermF>_N
                                                                                                   <a>_N))
                                                                    -> <p1 (Term TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))))
                                        ; Nth:2
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:3
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R))))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                       -> Sym (N:Identity[0] <Term TermF a>_R)))
                               ; Sym
                                   (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                               ; Nth:3
                                   ((<Tagged
                                        (Term TermF a, Term TermF a)
                                        (Identity (Term TermF a, Term TermF a))>_R
                                     -> Sym
                                          (N:Identity[0]
                                             (Sym (N:Identity[0] <Term TermF a>_R)
                                              ; Sym
                                                  (N:Tagged[0]
                                                     <*>_N
                                                     <Term TermF a>_P
                                                     <Identity (Term TermF a)>_R))))
                                    ; (<Tagged
                                          (Term TermF a, Term TermF a)
                                          (Identity (Term TermF a, Term TermF a))>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; ((N:Tagged[0]
                                          <*>_N
                                          <(Term TermF a, Term TermF a)>_P
                                          <Identity (Term TermF a, Term TermF a)>_R
                                        ; N:Identity[0]
                                            (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                       -> <Term TermF a>_R)
                                    ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                       -> <Term TermF a>_R))
                               :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
                      ((BMBase
                          @ (Term TermF)
                          @ a
                          (TmAdd
                             @ (Term TermF)
                             @ a
                             tm
                             ((evalAddBig1 @ a)
                              `cast` (Nth:3
                                        (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                           ; Sym
                                               (N:Tagged[0]
                                                  <*>_N
                                                  <BaseF (Term TermF) a>_P
                                                  <Identity (BaseF (Term TermF) a)>_R))
                                          -> <TermF (Term TermF) a>_R)
                                         ; (<Tagged
                                               (BaseF (Term TermF) a)
                                               (Identity (BaseF (Term TermF) a))>_R
                                            -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                               ; Sym
                                                   (N:Tagged[0]
                                                      <*>_N
                                                      <TermF (Term TermF) a>_P
                                                      <Identity (TermF (Term TermF) a)>_R)))
                                      ; N:Tagged[0]
                                          <*>_N
                                          U(phant:<*>_N, TermF (Term TermF) a, Unwrapped
                                                                                 (Term TermF a))_P
                                          (Identity
                                             (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                                      ; Nth:2
                                          ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                            -> N:Identity[0] <Term TermF a>_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Term TermF a>_R))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Nth:3
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                                 ; Nth:2
                                                     ((<TermF (Term TermF) a>_R
                                                       -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                      ; (Sym
                                                           (N:Identity[0] <TermF (Term TermF) a>_R)
                                                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                                                 ; Nth:3
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> (Identity
                                                             (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                            <TermF>_N <a>_N))))_R)
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> N:Identity[0]
                                                              <Unwrapped (Term TermF a)>_R))
                                                 ; Nth:2
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> Sym
                                                            (N:Identity[0]
                                                               <Unwrapped (Term TermF a)>_R))
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> (Identity
                                                               (Sub (D:R:UnwrappedTerm[0]
                                                                         <TermF>_N <a>_N)))_R))))
                                      ; Nth:3
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> Nth:2
                                                 ((<Unwrapped (Term TermF a)>_R
                                                   -> (Identity
                                                         (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                        <TermF>_N <a>_N))))_R)
                                                  ; (<Unwrapped (Term TermF a)>_R
                                                     -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; Nth:3
                                                   ((<Unwrapped (Term TermF a)>_R
                                                     -> Sym
                                                          (N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                    ; (Nth:1
                                                         (Nth:2
                                                            (Nth:3
                                                               (Nth:3
                                                                  (((Sym
                                                                       (N:Wrapped[0]
                                                                          <Term TermF a>_N)
                                                                     ; Sym
                                                                         (N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                     ; Nth:3
                                                                         ((<(Term TermF a :: *)
                                                                            ~
                                                                            (Term TermF a :: *)>_R
                                                                           -> N:Rewrapped[0]
                                                                                <Term TermF a>_N
                                                                                <Term TermF a>_N)
                                                                          ; (<(Term TermF a :: *)
                                                                              ~
                                                                              (Term TermF a :: *)>_R
                                                                             -> N:Wrapped[0]
                                                                                  <Term TermF a>_N))
                                                                     ; (forall (p1 :: <*
                                                                                       -> *
                                                                                       -> *>_N).
                                                                        forall (f2 :: <* -> *>_N).
                                                                        <Profunctor p1>_R
                                                                        -> <Functor f2>_R
                                                                        -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                       <TermF>_N
                                                                                                       <a>_N))
                                                                        -> <p1 (Term
                                                                                  TermF a) (f2 (Term
                                                                                                  TermF
                                                                                                  a))>_R))@<Exchange
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))>_N)@<Identity>_N))))
                                                       -> Nth:3
                                                            (Nth:2
                                                               (Nth:3
                                                                  (Nth:3
                                                                     (((Sym
                                                                          (N:Wrapped[0]
                                                                             <Term TermF a>_N)
                                                                        ; Sym
                                                                            (N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                        ; Nth:3
                                                                            ((<(Term TermF a :: *)
                                                                               ~
                                                                               (Term
                                                                                  TermF a :: *)>_R
                                                                              -> N:Rewrapped[0]
                                                                                   <Term TermF a>_N
                                                                                   <Term TermF a>_N)
                                                                             ; (<(Term TermF a :: *)
                                                                                 ~
                                                                                 (Term
                                                                                    TermF a :: *)>_R
                                                                                -> N:Wrapped[0]
                                                                                     <Term
                                                                                        TermF a>_N))
                                                                        ; (forall (p1 :: <*
                                                                                          -> *
                                                                                          -> *>_N).
                                                                           forall (f2 :: <*
                                                                                          -> *>_N).
                                                                           <Profunctor p1>_R
                                                                           -> <Functor f2>_R
                                                                           -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                        <TermF>_N
                                                                                        <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                          <TermF>_N
                                                                                                          <a>_N))
                                                                           -> <p1 (Term
                                                                                     TermF
                                                                                     a) (f2 (Term
                                                                                               TermF
                                                                                               a))>_R))@<Exchange
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))>_N)@<Identity>_N))))))
                                               ; Nth:2
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                               ; Nth:3
                                                   ((<TermF (Term TermF) a>_R
                                                     -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                    ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                       -> Sym (N:Identity[0] <Term TermF a>_R))))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                              -> Sym (N:Identity[0] <Term TermF a>_R)))
                                      ; Sym
                                          (N:Tagged[0]
                                             <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                      ; Nth:3
                                          ((<Tagged Int (Identity Int)>_R
                                            -> Sym
                                                 (N:Identity[0]
                                                    (Sym (N:Identity[0] <Term TermF a>_R)
                                                     ; Sym
                                                         (N:Tagged[0]
                                                            <*>_N
                                                            <Term TermF a>_P
                                                            <Identity (Term TermF a)>_R))))
                                           ; (<Tagged Int (Identity Int)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                               ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                              -> <Term TermF a>_R)
                                           ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                      :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                       `cast` (Sym
                                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                               ; Nth:2
                                   ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Term TermF a>_R))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Nth:3
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                          ; Nth:2
                                              ((<TermF (Term TermF) a>_R
                                                -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                  -> Sym (N:Identity[0] <Term TermF a>_R)))
                                          ; Nth:3
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                     <TermF>_N <a>_N))))_R)
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                          ; Nth:2
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (D:R:UnwrappedTerm[0]
                                                                  <TermF>_N <a>_N)))_R))))
                               ; Nth:3
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> Nth:2
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> (Identity
                                                  (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N <a>_N))))_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (Nth:1
                                                  (Nth:2
                                                     (Nth:3
                                                        (Nth:3
                                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                              ; Sym
                                                                  (N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                              ; Nth:3
                                                                  ((<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Rewrapped[0]
                                                                         <Term TermF a>_N
                                                                         <Term TermF a>_N)
                                                                   ; (<(Term TermF a :: *)
                                                                       ~
                                                                       (Term TermF a :: *)>_R
                                                                      -> N:Wrapped[0]
                                                                           <Term TermF a>_N))
                                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                                 forall (f2 :: <* -> *>_N).
                                                                 <Profunctor p1>_R
                                                                 -> <Functor f2>_R
                                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                              <TermF>_N
                                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                <TermF>_N
                                                                                                <a>_N))
                                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))
                                                -> Nth:3
                                                     (Nth:2
                                                        (Nth:3
                                                           (Nth:3
                                                              (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                                 ; Sym
                                                                     (N:Rewrapped[0]
                                                                        <Term TermF a>_N
                                                                        <Term TermF a>_N)
                                                                 ; Nth:3
                                                                     ((<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                      ; (<(Term TermF a :: *)
                                                                          ~
                                                                          (Term TermF a :: *)>_R
                                                                         -> N:Wrapped[0]
                                                                              <Term TermF a>_N))
                                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                                    forall (f2 :: <* -> *>_N).
                                                                    <Profunctor p1>_R
                                                                    -> <Functor f2>_R
                                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                 <TermF>_N
                                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                   <TermF>_N
                                                                                                   <a>_N))
                                                                    -> <p1 (Term TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))))
                                        ; Nth:2
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:3
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R))))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                       -> Sym (N:Identity[0] <Term TermF a>_R)))
                               ; Sym
                                   (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                               ; Nth:3
                                   ((<Tagged
                                        (Term TermF a, Term TermF a)
                                        (Identity (Term TermF a, Term TermF a))>_R
                                     -> Sym
                                          (N:Identity[0]
                                             (Sym (N:Identity[0] <Term TermF a>_R)
                                              ; Sym
                                                  (N:Tagged[0]
                                                     <*>_N
                                                     <Term TermF a>_P
                                                     <Identity (Term TermF a)>_R))))
                                    ; (<Tagged
                                          (Term TermF a, Term TermF a)
                                          (Identity (Term TermF a, Term TermF a))>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; ((N:Tagged[0]
                                          <*>_N
                                          <(Term TermF a, Term TermF a)>_P
                                          <Identity (Term TermF a, Term TermF a)>_R
                                        ; N:Identity[0]
                                            (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                       -> <Term TermF a>_R)
                                    ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                       -> <Term TermF a>_R))
                               :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                `cast` (Nth:3
                          (((Sym (N:Identity[0] <MulF (Term TermF) a>_R)
                             ; Sym
                                 (N:Tagged[0]
                                    <*>_N
                                    <MulF (Term TermF) a>_P
                                    <Identity (MulF (Term TermF) a)>_R))
                            -> <TermF (Term TermF) a>_R)
                           ; (<Tagged
                                 (MulF (Term TermF) a) (Identity (MulF (Term TermF) a))>_R
                              -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                 ; Sym
                                     (N:Tagged[0]
                                        <*>_N
                                        <TermF (Term TermF) a>_P
                                        <Identity (TermF (Term TermF) a)>_R)))
                        ; N:Tagged[0]
                            <*>_N
                            U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                            (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                        ; Nth:2
                            ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                              -> N:Identity[0] <Term TermF a>_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Term TermF a>_R))
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Nth:3
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                   ; Nth:2
                                       ((<TermF (Term TermF) a>_R
                                         -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                           -> Sym (N:Identity[0] <Term TermF a>_R)))
                                   ; Nth:3
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> (Identity
                                               (Sub (Sym (D:R:UnwrappedTerm[0]
                                                              <TermF>_N <a>_N))))_R)
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                   ; Nth:2
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> (Identity
                                                 (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                        ; Nth:3
                            ((<Unwrapped (Term TermF a)>_R
                              -> Nth:2
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> (Identity
                                           (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; Nth:3
                                     ((<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                      ; (Nth:1
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                       ; Nth:3
                                                           ((<(Term TermF a :: *)
                                                              ~
                                                              (Term TermF a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term TermF a>_N <Term TermF a>_N)
                                                            ; (<(Term TermF a :: *)
                                                                ~
                                                                (Term TermF a :: *)>_R
                                                               -> N:Wrapped[0] <Term TermF a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <TermF>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term TermF a) (f2 (Term
                                                                                       TermF
                                                                                       a))>_R))@<Exchange
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))>_N)@<Identity>_N))))
                                         -> Nth:3
                                              (Nth:2
                                                 (Nth:3
                                                    (Nth:3
                                                       (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                          ; Sym
                                                              (N:Rewrapped[0]
                                                                 <Term TermF a>_N <Term TermF a>_N)
                                                          ; Nth:3
                                                              ((<(Term TermF a :: *)
                                                                 ~
                                                                 (Term TermF a :: *)>_R
                                                                -> N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                               ; (<(Term TermF a :: *)
                                                                   ~
                                                                   (Term TermF a :: *)>_R
                                                                  -> N:Wrapped[0] <Term TermF a>_N))
                                                          ; (forall (p1 :: <* -> * -> *>_N).
                                                             forall (f2 :: <* -> *>_N).
                                                             <Profunctor p1>_R
                                                             -> <Functor f2>_R
                                                             -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                          <TermF>_N
                                                                          <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                            <TermF>_N
                                                                                            <a>_N))
                                                             -> <p1 (Term TermF a) (f2 (Term
                                                                                          TermF
                                                                                          a))>_R))@<Exchange
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))>_N)@<Identity>_N))))))
                                 ; Nth:2
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                 ; Nth:3
                                     ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                      ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                         -> Sym (N:Identity[0] <Term TermF a>_R))))
                             ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                             ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                -> Sym (N:Identity[0] <Term TermF a>_R)))
                        ; Sym
                            (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                        ; Nth:3
                            ((<Tagged
                                 (Term TermF a, Term TermF a)
                                 (Identity (Term TermF a, Term TermF a))>_R
                              -> Sym
                                   (N:Identity[0]
                                      (Sym (N:Identity[0] <Term TermF a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                             ; (<Tagged
                                   (Term TermF a, Term TermF a)
                                   (Identity (Term TermF a, Term TermF a))>_R
                                -> N:Identity[0] <Term TermF a>_R)
                             ; ((N:Tagged[0]
                                   <*>_N
                                   <(Term TermF a, Term TermF a)>_P
                                   <Identity (Term TermF a, Term TermF a)>_R
                                 ; N:Identity[0]
                                     (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                -> <Term TermF a>_R)
                             ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                -> <Term TermF a>_R))
                        :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
               ((BMMul
                   @ (Term TermF)
                   @ a
                   (TmMul
                      @ (Term TermF)
                      @ a
                      ((BMBase
                          @ (Term TermF)
                          @ a
                          (TmAdd
                             @ (Term TermF)
                             @ a
                             tm
                             ((evalAddMulBig4 @ a)
                              `cast` (Nth:3
                                        (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                           ; Sym
                                               (N:Tagged[0]
                                                  <*>_N
                                                  <BaseF (Term TermF) a>_P
                                                  <Identity (BaseF (Term TermF) a)>_R))
                                          -> <TermF (Term TermF) a>_R)
                                         ; (<Tagged
                                               (BaseF (Term TermF) a)
                                               (Identity (BaseF (Term TermF) a))>_R
                                            -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                               ; Sym
                                                   (N:Tagged[0]
                                                      <*>_N
                                                      <TermF (Term TermF) a>_P
                                                      <Identity (TermF (Term TermF) a)>_R)))
                                      ; N:Tagged[0]
                                          <*>_N
                                          U(phant:<*>_N, TermF (Term TermF) a, Unwrapped
                                                                                 (Term TermF a))_P
                                          (Identity
                                             (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                                      ; Nth:2
                                          ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                            -> N:Identity[0] <Term TermF a>_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Term TermF a>_R))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Nth:3
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                                 ; Nth:2
                                                     ((<TermF (Term TermF) a>_R
                                                       -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                      ; (Sym
                                                           (N:Identity[0] <TermF (Term TermF) a>_R)
                                                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                                                 ; Nth:3
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> (Identity
                                                             (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                            <TermF>_N <a>_N))))_R)
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> N:Identity[0]
                                                              <Unwrapped (Term TermF a)>_R))
                                                 ; Nth:2
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> Sym
                                                            (N:Identity[0]
                                                               <Unwrapped (Term TermF a)>_R))
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> (Identity
                                                               (Sub (D:R:UnwrappedTerm[0]
                                                                         <TermF>_N <a>_N)))_R))))
                                      ; Nth:3
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> Nth:2
                                                 ((<Unwrapped (Term TermF a)>_R
                                                   -> (Identity
                                                         (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                        <TermF>_N <a>_N))))_R)
                                                  ; (<Unwrapped (Term TermF a)>_R
                                                     -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; Nth:3
                                                   ((<Unwrapped (Term TermF a)>_R
                                                     -> Sym
                                                          (N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                    ; (Nth:1
                                                         (Nth:2
                                                            (Nth:3
                                                               (Nth:3
                                                                  (((Sym
                                                                       (N:Wrapped[0]
                                                                          <Term TermF a>_N)
                                                                     ; Sym
                                                                         (N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                     ; Nth:3
                                                                         ((<(Term TermF a :: *)
                                                                            ~
                                                                            (Term TermF a :: *)>_R
                                                                           -> N:Rewrapped[0]
                                                                                <Term TermF a>_N
                                                                                <Term TermF a>_N)
                                                                          ; (<(Term TermF a :: *)
                                                                              ~
                                                                              (Term TermF a :: *)>_R
                                                                             -> N:Wrapped[0]
                                                                                  <Term TermF a>_N))
                                                                     ; (forall (p1 :: <*
                                                                                       -> *
                                                                                       -> *>_N).
                                                                        forall (f2 :: <* -> *>_N).
                                                                        <Profunctor p1>_R
                                                                        -> <Functor f2>_R
                                                                        -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                       <TermF>_N
                                                                                                       <a>_N))
                                                                        -> <p1 (Term
                                                                                  TermF a) (f2 (Term
                                                                                                  TermF
                                                                                                  a))>_R))@<Exchange
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))>_N)@<Identity>_N))))
                                                       -> Nth:3
                                                            (Nth:2
                                                               (Nth:3
                                                                  (Nth:3
                                                                     (((Sym
                                                                          (N:Wrapped[0]
                                                                             <Term TermF a>_N)
                                                                        ; Sym
                                                                            (N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                        ; Nth:3
                                                                            ((<(Term TermF a :: *)
                                                                               ~
                                                                               (Term
                                                                                  TermF a :: *)>_R
                                                                              -> N:Rewrapped[0]
                                                                                   <Term TermF a>_N
                                                                                   <Term TermF a>_N)
                                                                             ; (<(Term TermF a :: *)
                                                                                 ~
                                                                                 (Term
                                                                                    TermF a :: *)>_R
                                                                                -> N:Wrapped[0]
                                                                                     <Term
                                                                                        TermF a>_N))
                                                                        ; (forall (p1 :: <*
                                                                                          -> *
                                                                                          -> *>_N).
                                                                           forall (f2 :: <*
                                                                                          -> *>_N).
                                                                           <Profunctor p1>_R
                                                                           -> <Functor f2>_R
                                                                           -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                        <TermF>_N
                                                                                        <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                          <TermF>_N
                                                                                                          <a>_N))
                                                                           -> <p1 (Term
                                                                                     TermF
                                                                                     a) (f2 (Term
                                                                                               TermF
                                                                                               a))>_R))@<Exchange
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))>_N)@<Identity>_N))))))
                                               ; Nth:2
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                               ; Nth:3
                                                   ((<TermF (Term TermF) a>_R
                                                     -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                    ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                       -> Sym (N:Identity[0] <Term TermF a>_R))))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                              -> Sym (N:Identity[0] <Term TermF a>_R)))
                                      ; Sym
                                          (N:Tagged[0]
                                             <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                      ; Nth:3
                                          ((<Tagged Int (Identity Int)>_R
                                            -> Sym
                                                 (N:Identity[0]
                                                    (Sym (N:Identity[0] <Term TermF a>_R)
                                                     ; Sym
                                                         (N:Tagged[0]
                                                            <*>_N
                                                            <Term TermF a>_P
                                                            <Identity (Term TermF a)>_R))))
                                           ; (<Tagged Int (Identity Int)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                               ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                              -> <Term TermF a>_R)
                                           ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                      :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                       `cast` (Sym
                                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                               ; Nth:2
                                   ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Term TermF a>_R))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Nth:3
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                          ; Nth:2
                                              ((<TermF (Term TermF) a>_R
                                                -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                  -> Sym (N:Identity[0] <Term TermF a>_R)))
                                          ; Nth:3
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                     <TermF>_N <a>_N))))_R)
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                          ; Nth:2
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (D:R:UnwrappedTerm[0]
                                                                  <TermF>_N <a>_N)))_R))))
                               ; Nth:3
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> Nth:2
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> (Identity
                                                  (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N <a>_N))))_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (Nth:1
                                                  (Nth:2
                                                     (Nth:3
                                                        (Nth:3
                                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                              ; Sym
                                                                  (N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                              ; Nth:3
                                                                  ((<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Rewrapped[0]
                                                                         <Term TermF a>_N
                                                                         <Term TermF a>_N)
                                                                   ; (<(Term TermF a :: *)
                                                                       ~
                                                                       (Term TermF a :: *)>_R
                                                                      -> N:Wrapped[0]
                                                                           <Term TermF a>_N))
                                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                                 forall (f2 :: <* -> *>_N).
                                                                 <Profunctor p1>_R
                                                                 -> <Functor f2>_R
                                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                              <TermF>_N
                                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                <TermF>_N
                                                                                                <a>_N))
                                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))
                                                -> Nth:3
                                                     (Nth:2
                                                        (Nth:3
                                                           (Nth:3
                                                              (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                                 ; Sym
                                                                     (N:Rewrapped[0]
                                                                        <Term TermF a>_N
                                                                        <Term TermF a>_N)
                                                                 ; Nth:3
                                                                     ((<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                      ; (<(Term TermF a :: *)
                                                                          ~
                                                                          (Term TermF a :: *)>_R
                                                                         -> N:Wrapped[0]
                                                                              <Term TermF a>_N))
                                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                                    forall (f2 :: <* -> *>_N).
                                                                    <Profunctor p1>_R
                                                                    -> <Functor f2>_R
                                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                 <TermF>_N
                                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                   <TermF>_N
                                                                                                   <a>_N))
                                                                    -> <p1 (Term TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))))
                                        ; Nth:2
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:3
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R))))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                       -> Sym (N:Identity[0] <Term TermF a>_R)))
                               ; Sym
                                   (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                               ; Nth:3
                                   ((<Tagged
                                        (Term TermF a, Term TermF a)
                                        (Identity (Term TermF a, Term TermF a))>_R
                                     -> Sym
                                          (N:Identity[0]
                                             (Sym (N:Identity[0] <Term TermF a>_R)
                                              ; Sym
                                                  (N:Tagged[0]
                                                     <*>_N
                                                     <Term TermF a>_P
                                                     <Identity (Term TermF a)>_R))))
                                    ; (<Tagged
                                          (Term TermF a, Term TermF a)
                                          (Identity (Term TermF a, Term TermF a))>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; ((N:Tagged[0]
                                          <*>_N
                                          <(Term TermF a, Term TermF a)>_P
                                          <Identity (Term TermF a, Term TermF a)>_R
                                        ; N:Identity[0]
                                            (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                       -> <Term TermF a>_R)
                                    ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                       -> <Term TermF a>_R))
                               :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
                      ((BMBase
                          @ (Term TermF)
                          @ a
                          (TmAdd
                             @ (Term TermF)
                             @ a
                             tm
                             ((evalAddMulBig1 @ a)
                              `cast` (Nth:3
                                        (((Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                           ; Sym
                                               (N:Tagged[0]
                                                  <*>_N
                                                  <BaseF (Term TermF) a>_P
                                                  <Identity (BaseF (Term TermF) a)>_R))
                                          -> <TermF (Term TermF) a>_R)
                                         ; (<Tagged
                                               (BaseF (Term TermF) a)
                                               (Identity (BaseF (Term TermF) a))>_R
                                            -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                               ; Sym
                                                   (N:Tagged[0]
                                                      <*>_N
                                                      <TermF (Term TermF) a>_P
                                                      <Identity (TermF (Term TermF) a)>_R)))
                                      ; N:Tagged[0]
                                          <*>_N
                                          U(phant:<*>_N, TermF (Term TermF) a, Unwrapped
                                                                                 (Term TermF a))_P
                                          (Identity
                                             (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                                      ; Nth:2
                                          ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                            -> N:Identity[0] <Term TermF a>_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Term TermF a>_R))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> Nth:3
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                                 ; Nth:2
                                                     ((<TermF (Term TermF) a>_R
                                                       -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                      ; (Sym
                                                           (N:Identity[0] <TermF (Term TermF) a>_R)
                                                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                                                 ; Nth:3
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> (Identity
                                                             (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                            <TermF>_N <a>_N))))_R)
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> N:Identity[0]
                                                              <Unwrapped (Term TermF a)>_R))
                                                 ; Nth:2
                                                     ((<Unwrapped (Term TermF a)>_R
                                                       -> Sym
                                                            (N:Identity[0]
                                                               <Unwrapped (Term TermF a)>_R))
                                                      ; (<Unwrapped (Term TermF a)>_R
                                                         -> (Identity
                                                               (Sub (D:R:UnwrappedTerm[0]
                                                                         <TermF>_N <a>_N)))_R))))
                                      ; Nth:3
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> Nth:2
                                                 ((<Unwrapped (Term TermF a)>_R
                                                   -> (Identity
                                                         (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                        <TermF>_N <a>_N))))_R)
                                                  ; (<Unwrapped (Term TermF a)>_R
                                                     -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; Nth:3
                                                   ((<Unwrapped (Term TermF a)>_R
                                                     -> Sym
                                                          (N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                    ; (Nth:1
                                                         (Nth:2
                                                            (Nth:3
                                                               (Nth:3
                                                                  (((Sym
                                                                       (N:Wrapped[0]
                                                                          <Term TermF a>_N)
                                                                     ; Sym
                                                                         (N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                     ; Nth:3
                                                                         ((<(Term TermF a :: *)
                                                                            ~
                                                                            (Term TermF a :: *)>_R
                                                                           -> N:Rewrapped[0]
                                                                                <Term TermF a>_N
                                                                                <Term TermF a>_N)
                                                                          ; (<(Term TermF a :: *)
                                                                              ~
                                                                              (Term TermF a :: *)>_R
                                                                             -> N:Wrapped[0]
                                                                                  <Term TermF a>_N))
                                                                     ; (forall (p1 :: <*
                                                                                       -> *
                                                                                       -> *>_N).
                                                                        forall (f2 :: <* -> *>_N).
                                                                        <Profunctor p1>_R
                                                                        -> <Functor f2>_R
                                                                        -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                       <TermF>_N
                                                                                                       <a>_N))
                                                                        -> <p1 (Term
                                                                                  TermF a) (f2 (Term
                                                                                                  TermF
                                                                                                  a))>_R))@<Exchange
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))>_N)@<Identity>_N))))
                                                       -> Nth:3
                                                            (Nth:2
                                                               (Nth:3
                                                                  (Nth:3
                                                                     (((Sym
                                                                          (N:Wrapped[0]
                                                                             <Term TermF a>_N)
                                                                        ; Sym
                                                                            (N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                        ; Nth:3
                                                                            ((<(Term TermF a :: *)
                                                                               ~
                                                                               (Term
                                                                                  TermF a :: *)>_R
                                                                              -> N:Rewrapped[0]
                                                                                   <Term TermF a>_N
                                                                                   <Term TermF a>_N)
                                                                             ; (<(Term TermF a :: *)
                                                                                 ~
                                                                                 (Term
                                                                                    TermF a :: *)>_R
                                                                                -> N:Wrapped[0]
                                                                                     <Term
                                                                                        TermF a>_N))
                                                                        ; (forall (p1 :: <*
                                                                                          -> *
                                                                                          -> *>_N).
                                                                           forall (f2 :: <*
                                                                                          -> *>_N).
                                                                           <Profunctor p1>_R
                                                                           -> <Functor f2>_R
                                                                           -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                        <TermF>_N
                                                                                        <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                          <TermF>_N
                                                                                                          <a>_N))
                                                                           -> <p1 (Term
                                                                                     TermF
                                                                                     a) (f2 (Term
                                                                                               TermF
                                                                                               a))>_R))@<Exchange
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))>_N)@<Identity>_N))))))
                                               ; Nth:2
                                                   ((N:Identity[0] <TermF (Term TermF) a>_R
                                                     -> N:Identity[0] <Term TermF a>_R)
                                                    ; (<TermF (Term TermF) a>_R
                                                       -> N:Term[0] <TermF>_N <a>_N))
                                               ; Nth:3
                                                   ((<TermF (Term TermF) a>_R
                                                     -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                    ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                       -> Sym (N:Identity[0] <Term TermF a>_R))))
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                              -> Sym (N:Identity[0] <Term TermF a>_R)))
                                      ; Sym
                                          (N:Tagged[0]
                                             <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                      ; Nth:3
                                          ((<Tagged Int (Identity Int)>_R
                                            -> Sym
                                                 (N:Identity[0]
                                                    (Sym (N:Identity[0] <Term TermF a>_R)
                                                     ; Sym
                                                         (N:Tagged[0]
                                                            <*>_N
                                                            <Term TermF a>_P
                                                            <Identity (Term TermF a)>_R))))
                                           ; (<Tagged Int (Identity Int)>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                           ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                               ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                              -> <Term TermF a>_R)
                                           ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                      :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                       `cast` (Sym
                                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                               ; Nth:2
                                   ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Term TermF a>_R))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> Nth:3
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                          ; Nth:2
                                              ((<TermF (Term TermF) a>_R
                                                -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                  -> Sym (N:Identity[0] <Term TermF a>_R)))
                                          ; Nth:3
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                     <TermF>_N <a>_N))))_R)
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                          ; Nth:2
                                              ((<Unwrapped (Term TermF a)>_R
                                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                               ; (<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (D:R:UnwrappedTerm[0]
                                                                  <TermF>_N <a>_N)))_R))))
                               ; Nth:3
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> Nth:2
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> (Identity
                                                  (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N <a>_N))))_R)
                                           ; (<Unwrapped (Term TermF a)>_R
                                              -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (Nth:1
                                                  (Nth:2
                                                     (Nth:3
                                                        (Nth:3
                                                           (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                              ; Sym
                                                                  (N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                              ; Nth:3
                                                                  ((<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Rewrapped[0]
                                                                         <Term TermF a>_N
                                                                         <Term TermF a>_N)
                                                                   ; (<(Term TermF a :: *)
                                                                       ~
                                                                       (Term TermF a :: *)>_R
                                                                      -> N:Wrapped[0]
                                                                           <Term TermF a>_N))
                                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                                 forall (f2 :: <* -> *>_N).
                                                                 <Profunctor p1>_R
                                                                 -> <Functor f2>_R
                                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                              <TermF>_N
                                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                <TermF>_N
                                                                                                <a>_N))
                                                                 -> <p1 (Term TermF a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))
                                                -> Nth:3
                                                     (Nth:2
                                                        (Nth:3
                                                           (Nth:3
                                                              (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                                 ; Sym
                                                                     (N:Rewrapped[0]
                                                                        <Term TermF a>_N
                                                                        <Term TermF a>_N)
                                                                 ; Nth:3
                                                                     ((<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Rewrapped[0]
                                                                            <Term TermF a>_N
                                                                            <Term TermF a>_N)
                                                                      ; (<(Term TermF a :: *)
                                                                          ~
                                                                          (Term TermF a :: *)>_R
                                                                         -> N:Wrapped[0]
                                                                              <Term TermF a>_N))
                                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                                    forall (f2 :: <* -> *>_N).
                                                                    <Profunctor p1>_R
                                                                    -> <Functor f2>_R
                                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                 <TermF>_N
                                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                   <TermF>_N
                                                                                                   <a>_N))
                                                                    -> <p1 (Term TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))))
                                        ; Nth:2
                                            ((N:Identity[0] <TermF (Term TermF) a>_R
                                              -> N:Identity[0] <Term TermF a>_R)
                                             ; (<TermF (Term TermF) a>_R
                                                -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:3
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R))))
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                       -> Sym (N:Identity[0] <Term TermF a>_R)))
                               ; Sym
                                   (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                               ; Nth:3
                                   ((<Tagged
                                        (Term TermF a, Term TermF a)
                                        (Identity (Term TermF a, Term TermF a))>_R
                                     -> Sym
                                          (N:Identity[0]
                                             (Sym (N:Identity[0] <Term TermF a>_R)
                                              ; Sym
                                                  (N:Tagged[0]
                                                     <*>_N
                                                     <Term TermF a>_P
                                                     <Identity (Term TermF a)>_R))))
                                    ; (<Tagged
                                          (Term TermF a, Term TermF a)
                                          (Identity (Term TermF a, Term TermF a))>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                    ; ((N:Tagged[0]
                                          <*>_N
                                          <(Term TermF a, Term TermF a)>_P
                                          <Identity (Term TermF a, Term TermF a)>_R
                                        ; N:Identity[0]
                                            (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                       -> <Term TermF a>_R)
                                    ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                       -> <Term TermF a>_R))
                               :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
                `cast` (Nth:3
                          (((Sym (N:Identity[0] <MulF (Term TermF) a>_R)
                             ; Sym
                                 (N:Tagged[0]
                                    <*>_N
                                    <MulF (Term TermF) a>_P
                                    <Identity (MulF (Term TermF) a)>_R))
                            -> <TermF (Term TermF) a>_R)
                           ; (<Tagged
                                 (MulF (Term TermF) a) (Identity (MulF (Term TermF) a))>_R
                              -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                 ; Sym
                                     (N:Tagged[0]
                                        <*>_N
                                        <TermF (Term TermF) a>_P
                                        <Identity (TermF (Term TermF) a)>_R)))
                        ; N:Tagged[0]
                            <*>_N
                            U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                            (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                        ; Nth:2
                            ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                              -> N:Identity[0] <Term TermF a>_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Term TermF a>_R))
                             ; (<Unwrapped (Term TermF a)>_R
                                -> Nth:3
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                   ; Nth:2
                                       ((<TermF (Term TermF) a>_R
                                         -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                           -> Sym (N:Identity[0] <Term TermF a>_R)))
                                   ; Nth:3
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> (Identity
                                               (Sub (Sym (D:R:UnwrappedTerm[0]
                                                              <TermF>_N <a>_N))))_R)
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                   ; Nth:2
                                       ((<Unwrapped (Term TermF a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; (<Unwrapped (Term TermF a)>_R
                                           -> (Identity
                                                 (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                        ; Nth:3
                            ((<Unwrapped (Term TermF a)>_R
                              -> Nth:2
                                   ((<Unwrapped (Term TermF a)>_R
                                     -> (Identity
                                           (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                    ; (<Unwrapped (Term TermF a)>_R
                                       -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; Nth:3
                                     ((<Unwrapped (Term TermF a)>_R
                                       -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                      ; (Nth:1
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                       ; Nth:3
                                                           ((<(Term TermF a :: *)
                                                              ~
                                                              (Term TermF a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term TermF a>_N <Term TermF a>_N)
                                                            ; (<(Term TermF a :: *)
                                                                ~
                                                                (Term TermF a :: *)>_R
                                                               -> N:Wrapped[0] <Term TermF a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <TermF>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term TermF a) (f2 (Term
                                                                                       TermF
                                                                                       a))>_R))@<Exchange
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))
                                                                                                   (Unwrapped
                                                                                                      (Term
                                                                                                         TermF
                                                                                                         a))>_N)@<Identity>_N))))
                                         -> Nth:3
                                              (Nth:2
                                                 (Nth:3
                                                    (Nth:3
                                                       (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                          ; Sym
                                                              (N:Rewrapped[0]
                                                                 <Term TermF a>_N <Term TermF a>_N)
                                                          ; Nth:3
                                                              ((<(Term TermF a :: *)
                                                                 ~
                                                                 (Term TermF a :: *)>_R
                                                                -> N:Rewrapped[0]
                                                                     <Term TermF a>_N
                                                                     <Term TermF a>_N)
                                                               ; (<(Term TermF a :: *)
                                                                   ~
                                                                   (Term TermF a :: *)>_R
                                                                  -> N:Wrapped[0] <Term TermF a>_N))
                                                          ; (forall (p1 :: <* -> * -> *>_N).
                                                             forall (f2 :: <* -> *>_N).
                                                             <Profunctor p1>_R
                                                             -> <Functor f2>_R
                                                             -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                          <TermF>_N
                                                                          <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                            <TermF>_N
                                                                                            <a>_N))
                                                             -> <p1 (Term TermF a) (f2 (Term
                                                                                          TermF
                                                                                          a))>_R))@<Exchange
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))
                                                                                                      (Unwrapped
                                                                                                         (Term
                                                                                                            TermF
                                                                                                            a))>_N)@<Identity>_N))))))
                                 ; Nth:2
                                     ((N:Identity[0] <TermF (Term TermF) a>_R
                                       -> N:Identity[0] <Term TermF a>_R)
                                      ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                                 ; Nth:3
                                     ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                      ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                         -> Sym (N:Identity[0] <Term TermF a>_R))))
                             ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                             ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                -> Sym (N:Identity[0] <Term TermF a>_R)))
                        ; Sym
                            (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                        ; Nth:3
                            ((<Tagged
                                 (Term TermF a, Term TermF a)
                                 (Identity (Term TermF a, Term TermF a))>_R
                              -> Sym
                                   (N:Identity[0]
                                      (Sym (N:Identity[0] <Term TermF a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                             ; (<Tagged
                                   (Term TermF a, Term TermF a)
                                   (Identity (Term TermF a, Term TermF a))>_R
                                -> N:Identity[0] <Term TermF a>_R)
                             ; ((N:Tagged[0]
                                   <*>_N
                                   <(Term TermF a, Term TermF a)>_P
                                   <Identity (Term TermF a, Term TermF a)>_R
                                 ; N:Identity[0]
                                     (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                                -> <Term TermF a>_R)
                             ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                                -> <Term TermF a>_R))
                        :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))))
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Initial.Bench"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[15 of 20] Compiling Example.Base     ( src/Example/Base.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Base.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 64, types: 187, coercions: 3,056, joins: 0/0}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
term8 :: Int
term8 = I# 8#

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
term7 :: forall a (tm :: (* -> *) -> * -> *). BaseF (Term tm) a
term7
  = \ (@ a) (@ (tm :: (* -> *) -> * -> *)) ->
      TmLit @ (Term tm) @ a term8

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
term6 :: Int
term6 = I# 1#

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
term5 :: forall a (tm :: (* -> *) -> * -> *). BaseF (Term tm) a
term5
  = \ (@ a) (@ (tm :: (* -> *) -> * -> *)) ->
      TmLit @ (Term tm) @ a term6

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
term4 :: Int
term4 = I# 2#

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
term3 :: forall a (tm :: (* -> *) -> * -> *). BaseF (Term tm) a
term3
  = \ (@ a) (@ (tm :: (* -> *) -> * -> *)) ->
      TmLit @ (Term tm) @ a term4

-- RHS size: {terms: 23, types: 59, coercions: 2,463, joins: 0/0}
term2
  :: forall (tm :: (* -> *) -> * -> *) a.
     HasBaseF tm =>
     Tagged (tm (Term tm) a) (Identity (tm (Term tm) a))
term2
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF tm) ->
      ($dHasBaseF
       `cast` (N:HasBaseF[0] <tm>_N
               :: (HasBaseF tm :: Constraint)
                  ~R#
                  ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
        @ (Term tm)
        @ a
        @ Tagged
        @ Identity
        $fChoiceTagged
        $fApplicativeIdentity
        ((TmAdd
            @ (Term tm)
            @ a
            ((($dHasBaseF
               `cast` (N:HasBaseF[0] <tm>_N
                       :: (HasBaseF tm :: Constraint)
                          ~R#
                          ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
                @ (Term tm)
                @ a
                @ Tagged
                @ Identity
                $fChoiceTagged
                $fApplicativeIdentity
                ((term7 @ a @ tm)
                 `cast` (Nth:3
                           (((Sym (N:Identity[0] <Int>_R)
                              ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                             -> <BaseF (Term tm) a>_R)
                            ; (<Tagged Int (Identity Int)>_R
                               -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                                  ; Sym
                                      (N:Tagged[0]
                                         <*>_N
                                         <BaseF (Term tm) a>_P
                                         <Identity (BaseF (Term tm) a)>_R)))
                         :: (BaseF (Term tm) a :: *)
                            ~R#
                            (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
             `cast` (N:Tagged[0]
                       <*>_N
                       U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                       (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                     ; Nth:2
                         ((N:Identity[0] <Unwrapped (Term tm a)>_R
                           -> N:Identity[0] <Term tm a>_R)
                          ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                          ; (<Unwrapped (Term tm a)>_R
                             -> Nth:3
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                ; Nth:2
                                    ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                     ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                        -> Sym (N:Identity[0] <Term tm a>_R)))
                                ; Nth:3
                                    ((<Unwrapped (Term tm a)>_R
                                      -> (Identity
                                            (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                     ; (<Unwrapped (Term tm a)>_R
                                        -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                ; Nth:2
                                    ((<Unwrapped (Term tm a)>_R
                                      -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                     ; (<Unwrapped (Term tm a)>_R
                                        -> (Identity
                                              (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
                     ; Nth:3
                         ((<Unwrapped (Term tm a)>_R
                           -> Nth:2
                                ((<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term tm a)>_R
                                    -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                              ; Nth:3
                                  ((<Unwrapped (Term tm a)>_R
                                    -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; (Nth:1
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor p1>_R
                                                       -> <Functor f2>_R
                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                    <tm>_N
                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                      <tm>_N <a>_N))
                                                       -> <p1 (Term tm a) (f2 (Term
                                                                                 tm
                                                                                 a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                      -> Nth:3
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term tm a>_N <Term tm a>_N)
                                                       ; Nth:3
                                                           ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term tm a>_N <Term tm a>_N)
                                                            ; (<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Wrapped[0] <Term tm a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <tm>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <tm>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term tm a) (f2 (Term
                                                                                    tm
                                                                                    a))>_R))@<Exchange
                                                                                                (Unwrapped
                                                                                                   (Term
                                                                                                      tm
                                                                                                      a))
                                                                                                (Unwrapped
                                                                                                   (Term
                                                                                                      tm
                                                                                                      a))>_N)@<Identity>_N))))))
                              ; Nth:2
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                              ; Nth:3
                                  ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                   ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                      -> Sym (N:Identity[0] <Term tm a>_R))))
                          ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                          ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                             -> Sym (N:Identity[0] <Term tm a>_R)))
                     ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                     ; Nth:3
                         ((<Tagged Int (Identity Int)>_R
                           -> Sym
                                (N:Identity[0]
                                   (Sym (N:Identity[0] <Term tm a>_R)
                                    ; Sym
                                        (N:Tagged[0]
                                           <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                          ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
                          ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                              ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                             -> <Term tm a>_R)
                          ; (N:Identity[0] <Int>_R -> <Term tm a>_R))
                     :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                        ~R#
                        (Term tm a :: *)))
            ((($dHasBaseF
               `cast` (N:HasBaseF[0] <tm>_N
                       :: (HasBaseF tm :: Constraint)
                          ~R#
                          ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
                @ (Term tm)
                @ a
                @ Tagged
                @ Identity
                $fChoiceTagged
                $fApplicativeIdentity
                ((TmAdd
                    @ (Term tm)
                    @ a
                    ((($dHasBaseF
                       `cast` (N:HasBaseF[0] <tm>_N
                               :: (HasBaseF tm :: Constraint)
                                  ~R#
                                  ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
                        @ (Term tm)
                        @ a
                        @ Tagged
                        @ Identity
                        $fChoiceTagged
                        $fApplicativeIdentity
                        ((term5 @ a @ tm)
                         `cast` (Nth:3
                                   (((Sym (N:Identity[0] <Int>_R)
                                      ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                                     -> <BaseF (Term tm) a>_R)
                                    ; (<Tagged Int (Identity Int)>_R
                                       -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                                          ; Sym
                                              (N:Tagged[0]
                                                 <*>_N
                                                 <BaseF (Term tm) a>_P
                                                 <Identity (BaseF (Term tm) a)>_R)))
                                 :: (BaseF (Term tm) a :: *)
                                    ~R#
                                    (Tagged
                                       (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
                     `cast` (N:Tagged[0]
                               <*>_N
                               U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                               (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                             ; Nth:2
                                 ((N:Identity[0] <Unwrapped (Term tm a)>_R
                                   -> N:Identity[0] <Term tm a>_R)
                                  ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                                  ; (<Unwrapped (Term tm a)>_R
                                     -> Nth:3
                                          ((N:Identity[0] <tm (Term tm) a>_R
                                            -> N:Identity[0] <Term tm a>_R)
                                           ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                        ; Nth:2
                                            ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                                -> Sym (N:Identity[0] <Term tm a>_R)))
                                        ; Nth:3
                                            ((<Unwrapped (Term tm a)>_R
                                              -> (Identity
                                                    (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                   <tm>_N <a>_N))))_R)
                                             ; (<Unwrapped (Term tm a)>_R
                                                -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                        ; Nth:2
                                            ((<Unwrapped (Term tm a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                             ; (<Unwrapped (Term tm a)>_R
                                                -> (Identity
                                                      (Sub (D:R:UnwrappedTerm[0]
                                                                <tm>_N <a>_N)))_R))))
                             ; Nth:3
                                 ((<Unwrapped (Term tm a)>_R
                                   -> Nth:2
                                        ((<Unwrapped (Term tm a)>_R
                                          -> (Identity
                                                (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                         ; (<Unwrapped (Term tm a)>_R
                                            -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                      ; Nth:3
                                          ((<Unwrapped (Term tm a)>_R
                                            -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                           ; (Nth:1
                                                (Nth:2
                                                   (Nth:3
                                                      (Nth:3
                                                         (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                            ; Sym
                                                                (N:Rewrapped[0]
                                                                   <Term tm a>_N <Term tm a>_N)
                                                            ; Nth:3
                                                                ((<(Term tm a :: *)
                                                                   ~
                                                                   (Term tm a :: *)>_R
                                                                  -> N:Rewrapped[0]
                                                                       <Term tm a>_N <Term tm a>_N)
                                                                 ; (<(Term tm a :: *)
                                                                     ~
                                                                     (Term tm a :: *)>_R
                                                                    -> N:Wrapped[0] <Term tm a>_N))
                                                            ; (forall (p1 :: <* -> * -> *>_N).
                                                               forall (f2 :: <* -> *>_N).
                                                               <Profunctor p1>_R
                                                               -> <Functor f2>_R
                                                               -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                            <tm>_N
                                                                            <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                              <tm>_N
                                                                                              <a>_N))
                                                               -> <p1 (Term tm a) (f2 (Term
                                                                                         tm
                                                                                         a))>_R))@<Exchange
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))>_N)@<Identity>_N))))
                                              -> Nth:3
                                                   (Nth:2
                                                      (Nth:3
                                                         (Nth:3
                                                            (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                               ; Sym
                                                                   (N:Rewrapped[0]
                                                                      <Term tm a>_N <Term tm a>_N)
                                                               ; Nth:3
                                                                   ((<(Term tm a :: *)
                                                                      ~
                                                                      (Term tm a :: *)>_R
                                                                     -> N:Rewrapped[0]
                                                                          <Term tm a>_N
                                                                          <Term tm a>_N)
                                                                    ; (<(Term tm a :: *)
                                                                        ~
                                                                        (Term tm a :: *)>_R
                                                                       -> N:Wrapped[0]
                                                                            <Term tm a>_N))
                                                               ; (forall (p1 :: <* -> * -> *>_N).
                                                                  forall (f2 :: <* -> *>_N).
                                                                  <Profunctor p1>_R
                                                                  -> <Functor f2>_R
                                                                  -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                               <tm>_N
                                                                               <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                 <tm>_N
                                                                                                 <a>_N))
                                                                  -> <p1 (Term tm a) (f2 (Term
                                                                                            tm
                                                                                            a))>_R))@<Exchange
                                                                                                        (Unwrapped
                                                                                                           (Term
                                                                                                              tm
                                                                                                              a))
                                                                                                        (Unwrapped
                                                                                                           (Term
                                                                                                              tm
                                                                                                              a))>_N)@<Identity>_N))))))
                                      ; Nth:2
                                          ((N:Identity[0] <tm (Term tm) a>_R
                                            -> N:Identity[0] <Term tm a>_R)
                                           ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                      ; Nth:3
                                          ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                           ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                              -> Sym (N:Identity[0] <Term tm a>_R))))
                                  ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                                  ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                                     -> Sym (N:Identity[0] <Term tm a>_R)))
                             ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                             ; Nth:3
                                 ((<Tagged Int (Identity Int)>_R
                                   -> Sym
                                        (N:Identity[0]
                                           (Sym (N:Identity[0] <Term tm a>_R)
                                            ; Sym
                                                (N:Tagged[0]
                                                   <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                                  ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
                                  ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                      ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                     -> <Term tm a>_R)
                                  ; (N:Identity[0] <Int>_R -> <Term tm a>_R))
                             :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                                ~R#
                                (Term tm a :: *)))
                    ((($dHasBaseF
                       `cast` (N:HasBaseF[0] <tm>_N
                               :: (HasBaseF tm :: Constraint)
                                  ~R#
                                  ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
                        @ (Term tm)
                        @ a
                        @ Tagged
                        @ Identity
                        $fChoiceTagged
                        $fApplicativeIdentity
                        ((term3 @ a @ tm)
                         `cast` (Nth:3
                                   (((Sym (N:Identity[0] <Int>_R)
                                      ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                                     -> <BaseF (Term tm) a>_R)
                                    ; (<Tagged Int (Identity Int)>_R
                                       -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                                          ; Sym
                                              (N:Tagged[0]
                                                 <*>_N
                                                 <BaseF (Term tm) a>_P
                                                 <Identity (BaseF (Term tm) a)>_R)))
                                 :: (BaseF (Term tm) a :: *)
                                    ~R#
                                    (Tagged
                                       (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
                     `cast` (N:Tagged[0]
                               <*>_N
                               U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                               (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                             ; Nth:2
                                 ((N:Identity[0] <Unwrapped (Term tm a)>_R
                                   -> N:Identity[0] <Term tm a>_R)
                                  ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                                  ; (<Unwrapped (Term tm a)>_R
                                     -> Nth:3
                                          ((N:Identity[0] <tm (Term tm) a>_R
                                            -> N:Identity[0] <Term tm a>_R)
                                           ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                        ; Nth:2
                                            ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                                -> Sym (N:Identity[0] <Term tm a>_R)))
                                        ; Nth:3
                                            ((<Unwrapped (Term tm a)>_R
                                              -> (Identity
                                                    (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                   <tm>_N <a>_N))))_R)
                                             ; (<Unwrapped (Term tm a)>_R
                                                -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                        ; Nth:2
                                            ((<Unwrapped (Term tm a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                             ; (<Unwrapped (Term tm a)>_R
                                                -> (Identity
                                                      (Sub (D:R:UnwrappedTerm[0]
                                                                <tm>_N <a>_N)))_R))))
                             ; Nth:3
                                 ((<Unwrapped (Term tm a)>_R
                                   -> Nth:2
                                        ((<Unwrapped (Term tm a)>_R
                                          -> (Identity
                                                (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                         ; (<Unwrapped (Term tm a)>_R
                                            -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                      ; Nth:3
                                          ((<Unwrapped (Term tm a)>_R
                                            -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                           ; (Nth:1
                                                (Nth:2
                                                   (Nth:3
                                                      (Nth:3
                                                         (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                            ; Sym
                                                                (N:Rewrapped[0]
                                                                   <Term tm a>_N <Term tm a>_N)
                                                            ; Nth:3
                                                                ((<(Term tm a :: *)
                                                                   ~
                                                                   (Term tm a :: *)>_R
                                                                  -> N:Rewrapped[0]
                                                                       <Term tm a>_N <Term tm a>_N)
                                                                 ; (<(Term tm a :: *)
                                                                     ~
                                                                     (Term tm a :: *)>_R
                                                                    -> N:Wrapped[0] <Term tm a>_N))
                                                            ; (forall (p1 :: <* -> * -> *>_N).
                                                               forall (f2 :: <* -> *>_N).
                                                               <Profunctor p1>_R
                                                               -> <Functor f2>_R
                                                               -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                            <tm>_N
                                                                            <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                              <tm>_N
                                                                                              <a>_N))
                                                               -> <p1 (Term tm a) (f2 (Term
                                                                                         tm
                                                                                         a))>_R))@<Exchange
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))>_N)@<Identity>_N))))
                                              -> Nth:3
                                                   (Nth:2
                                                      (Nth:3
                                                         (Nth:3
                                                            (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                               ; Sym
                                                                   (N:Rewrapped[0]
                                                                      <Term tm a>_N <Term tm a>_N)
                                                               ; Nth:3
                                                                   ((<(Term tm a :: *)
                                                                      ~
                                                                      (Term tm a :: *)>_R
                                                                     -> N:Rewrapped[0]
                                                                          <Term tm a>_N
                                                                          <Term tm a>_N)
                                                                    ; (<(Term tm a :: *)
                                                                        ~
                                                                        (Term tm a :: *)>_R
                                                                       -> N:Wrapped[0]
                                                                            <Term tm a>_N))
                                                               ; (forall (p1 :: <* -> * -> *>_N).
                                                                  forall (f2 :: <* -> *>_N).
                                                                  <Profunctor p1>_R
                                                                  -> <Functor f2>_R
                                                                  -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                               <tm>_N
                                                                               <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                 <tm>_N
                                                                                                 <a>_N))
                                                                  -> <p1 (Term tm a) (f2 (Term
                                                                                            tm
                                                                                            a))>_R))@<Exchange
                                                                                                        (Unwrapped
                                                                                                           (Term
                                                                                                              tm
                                                                                                              a))
                                                                                                        (Unwrapped
                                                                                                           (Term
                                                                                                              tm
                                                                                                              a))>_N)@<Identity>_N))))))
                                      ; Nth:2
                                          ((N:Identity[0] <tm (Term tm) a>_R
                                            -> N:Identity[0] <Term tm a>_R)
                                           ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                      ; Nth:3
                                          ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                           ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                              -> Sym (N:Identity[0] <Term tm a>_R))))
                                  ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                                  ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                                     -> Sym (N:Identity[0] <Term tm a>_R)))
                             ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                             ; Nth:3
                                 ((<Tagged Int (Identity Int)>_R
                                   -> Sym
                                        (N:Identity[0]
                                           (Sym (N:Identity[0] <Term tm a>_R)
                                            ; Sym
                                                (N:Tagged[0]
                                                   <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                                  ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
                                  ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                      ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                     -> <Term tm a>_R)
                                  ; (N:Identity[0] <Int>_R -> <Term tm a>_R))
                             :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                                ~R#
                                (Term tm a :: *))))
                 `cast` (Nth:3
                           (((Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N
                                     <(Term tm a, Term tm a)>_P
                                     <Identity (Term tm a, Term tm a)>_R))
                             -> <BaseF (Term tm) a>_R)
                            ; (<Tagged
                                  (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                               -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                                  ; Sym
                                      (N:Tagged[0]
                                         <*>_N
                                         <BaseF (Term tm) a>_P
                                         <Identity (BaseF (Term tm) a)>_R)))
                         :: (BaseF (Term tm) a :: *)
                            ~R#
                            (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
             `cast` (N:Tagged[0]
                       <*>_N
                       U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                       (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                     ; Nth:2
                         ((N:Identity[0] <Unwrapped (Term tm a)>_R
                           -> N:Identity[0] <Term tm a>_R)
                          ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                          ; (<Unwrapped (Term tm a)>_R
                             -> Nth:3
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                ; Nth:2
                                    ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                     ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                        -> Sym (N:Identity[0] <Term tm a>_R)))
                                ; Nth:3
                                    ((<Unwrapped (Term tm a)>_R
                                      -> (Identity
                                            (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                     ; (<Unwrapped (Term tm a)>_R
                                        -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                ; Nth:2
                                    ((<Unwrapped (Term tm a)>_R
                                      -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                     ; (<Unwrapped (Term tm a)>_R
                                        -> (Identity
                                              (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
                     ; Nth:3
                         ((<Unwrapped (Term tm a)>_R
                           -> Nth:2
                                ((<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term tm a)>_R
                                    -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                              ; Nth:3
                                  ((<Unwrapped (Term tm a)>_R
                                    -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; (Nth:1
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor p1>_R
                                                       -> <Functor f2>_R
                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                    <tm>_N
                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                      <tm>_N <a>_N))
                                                       -> <p1 (Term tm a) (f2 (Term
                                                                                 tm
                                                                                 a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                      -> Nth:3
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term tm a>_N <Term tm a>_N)
                                                       ; Nth:3
                                                           ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term tm a>_N <Term tm a>_N)
                                                            ; (<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Wrapped[0] <Term tm a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <tm>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <tm>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term tm a) (f2 (Term
                                                                                    tm
                                                                                    a))>_R))@<Exchange
                                                                                                (Unwrapped
                                                                                                   (Term
                                                                                                      tm
                                                                                                      a))
                                                                                                (Unwrapped
                                                                                                   (Term
                                                                                                      tm
                                                                                                      a))>_N)@<Identity>_N))))))
                              ; Nth:2
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                              ; Nth:3
                                  ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                   ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                      -> Sym (N:Identity[0] <Term tm a>_R))))
                          ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                          ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                             -> Sym (N:Identity[0] <Term tm a>_R)))
                     ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                     ; Nth:3
                         ((<Tagged
                              (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                           -> Sym
                                (N:Identity[0]
                                   (Sym (N:Identity[0] <Term tm a>_R)
                                    ; Sym
                                        (N:Tagged[0]
                                           <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                          ; (<Tagged
                                (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                             -> N:Identity[0] <Term tm a>_R)
                          ; ((N:Tagged[0]
                                <*>_N
                                <(Term tm a, Term tm a)>_P
                                <Identity (Term tm a, Term tm a)>_R
                              ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                             -> <Term tm a>_R)
                          ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
                     :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                        ~R#
                        (Term tm a :: *))))
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)
                      ; Sym
                          (N:Tagged[0]
                             <*>_N
                             <(Term tm a, Term tm a)>_P
                             <Identity (Term tm a, Term tm a)>_R))
                     -> <BaseF (Term tm) a>_R)
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N <BaseF (Term tm) a>_P <Identity (BaseF (Term tm) a)>_R)))
                 :: (BaseF (Term tm) a :: *)
                    ~R#
                    (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 593, joins: 0/0}
term1
  :: forall (tm :: (* -> *) -> * -> *) a. HasBaseF tm => Term tm a
term1
  = term2
    `cast` (forall (tm :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            <HasBaseF tm>_R
            -> N:Tagged[0]
                 <*>_N
                 U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                 (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term tm a)>_R
                     -> N:Identity[0] <Term tm a>_R)
                    ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                    ; (<Unwrapped (Term tm a)>_R
                       -> Nth:3
                            ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                             ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                          ; Nth:2
                              ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                               ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                  -> Sym (N:Identity[0] <Term tm a>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term tm a)>_R
                                -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                               ; (<Unwrapped (Term tm a)>_R
                                  -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term tm a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                               ; (<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term tm a)>_R
                     -> Nth:2
                          ((<Unwrapped (Term tm a)>_R
                            -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                           ; (<Unwrapped (Term tm a)>_R
                              -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term tm a)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term tm a>_N)
                                              ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                              ; Nth:3
                                                  ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                    -> N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                   ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                      -> N:Wrapped[0] <Term tm a>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <tm>_N
                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                <tm>_N <a>_N))
                                                 -> <p1 (Term tm a) (f2 (Term tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                 ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                 ; Nth:3
                                                     ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term tm a>_N <Term tm a>_N)
                                                      ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                         -> N:Wrapped[0] <Term tm a>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <tm>_N
                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                   <tm>_N <a>_N))
                                                    -> <p1 (Term tm a) (f2 (Term
                                                                              tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                             ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                        ; Nth:3
                            ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                             ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                -> Sym (N:Identity[0] <Term tm a>_R))))
                    ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                       -> Sym (N:Identity[0] <Term tm a>_R)))
               ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term tm a>_R)
                              ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> N:Identity[0] <Term tm a>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term tm a, Term tm a)>_P
                          <Identity (Term tm a, Term tm a)>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                       -> <Term tm a>_R)
                    ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
            :: ((forall (tm :: (* -> *) -> * -> *) a.
                 HasBaseF tm =>
                 Tagged (tm (Term tm) a) (Identity (tm (Term tm) a))) :: *)
               ~R#
               ((forall (tm :: (* -> *) -> * -> *) a.
                 HasBaseF tm =>
                 Term tm a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[16 of 20] Compiling Example.Term.Base.Print ( src/Example/Term/Base/Print.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Term/Base/Print.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 39, types: 98, coercions: 4,013, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Term.Base.Print"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 8, types: 29, coercions: 3, joins: 0/0}
print4 :: forall a. [PrintRule (Term TermF a)]
print4
  = \ (@ a) ->
      case $wprintRules
             @ TermF
             @ a
             ($fHasBaseFBaseF_$c_BaseF
              `cast` (Sym (N:HasBaseF[0] <BaseF>_N)
                      :: ((forall (f :: * -> *) a. Prism' (BaseF f a) (BaseF f a)) :: *)
                         ~R#
                         (HasBaseF BaseF :: Constraint)))
      of
      { (# ww1, ww2 #) ->
      : @ (PrintRule (Term TermF a)) ww1 ww2
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
printTerm :: forall a. Term TermF a -> Maybe String
printTerm = \ (@ a) -> mkPrint @ (Term TermF a) (print4 @ a)

-- RHS size: {terms: 3, types: 13, coercions: 1,500, joins: 0/0}
print3 :: BaseF (Term TermF) Any
print3
  = TmAdd
      @ (Term TermF)
      @ Any
      ((term5 @ Any @ TermF)
       `cast` (Nth:3
                 (((Sym (N:Identity[0] <Int>_R)
                    ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                   -> <BaseF (Term TermF) Any>_R)
                  ; (<Tagged Int (Identity Int)>_R
                     -> Sym (N:Identity[0] <BaseF (Term TermF) Any>_R)
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <BaseF (Term TermF) Any>_P
                               <Identity (BaseF (Term TermF) Any)>_R)))
               ; N:Tagged[0]
                   <*>_N
                   U(phant:<*>_N, TermF (Term TermF) Any, Unwrapped
                                                            (Term TermF Any))_P
                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (BaseF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))
      ((term3 @ Any @ TermF)
       `cast` (Nth:3
                 (((Sym (N:Identity[0] <Int>_R)
                    ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                   -> <BaseF (Term TermF) Any>_R)
                  ; (<Tagged Int (Identity Int)>_R
                     -> Sym (N:Identity[0] <BaseF (Term TermF) Any>_R)
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <BaseF (Term TermF) Any>_P
                               <Identity (BaseF (Term TermF) Any)>_R)))
               ; N:Tagged[0]
                   <*>_N
                   U(phant:<*>_N, TermF (Term TermF) Any, Unwrapped
                                                            (Term TermF Any))_P
                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (BaseF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 3, types: 9, coercions: 1,630, joins: 0/0}
print2 :: BaseF (Term TermF) Any
print2
  = TmAdd
      @ (Term TermF)
      @ Any
      ((term7 @ Any @ TermF)
       `cast` (Nth:3
                 (((Sym (N:Identity[0] <Int>_R)
                    ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                   -> <BaseF (Term TermF) Any>_R)
                  ; (<Tagged Int (Identity Int)>_R
                     -> Sym (N:Identity[0] <BaseF (Term TermF) Any>_R)
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <BaseF (Term TermF) Any>_P
                               <Identity (BaseF (Term TermF) Any)>_R)))
               ; N:Tagged[0]
                   <*>_N
                   U(phant:<*>_N, TermF (Term TermF) Any, Unwrapped
                                                            (Term TermF Any))_P
                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (BaseF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))
      (print3
       `cast` (Nth:3
                 (((Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)
                    ; Sym
                        (N:Tagged[0]
                           <*>_N
                           <(Term TermF Any, Term TermF Any)>_P
                           <Identity (Term TermF Any, Term TermF Any)>_R))
                   -> <BaseF (Term TermF) Any>_R)
                  ; (<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym (N:Identity[0] <BaseF (Term TermF) Any>_R)
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <BaseF (Term TermF) Any>_P
                               <Identity (BaseF (Term TermF) Any)>_R)))
               ; N:Tagged[0]
                   <*>_N
                   U(phant:<*>_N, TermF (Term TermF) Any, Unwrapped
                                                            (Term TermF Any))_P
                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (BaseF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 3, types: 8, coercions: 880, joins: 0/0}
print1 :: Maybe String
print1
  = mkPrint
      @ (Term TermF Any)
      (print4 @ Any)
      (print2
       `cast` (Nth:3
                 (((Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)
                    ; Sym
                        (N:Tagged[0]
                           <*>_N
                           <(Term TermF Any, Term TermF Any)>_P
                           <Identity (Term TermF Any, Term TermF Any)>_R))
                   -> <BaseF (Term TermF) Any>_R)
                  ; (<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym (N:Identity[0] <BaseF (Term TermF) Any>_R)
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <BaseF (Term TermF) Any>_P
                               <Identity (BaseF (Term TermF) Any)>_R)))
               ; N:Tagged[0]
                   <*>_N
                   U(phant:<*>_N, TermF (Term TermF) Any, Unwrapped
                                                            (Term TermF Any))_P
                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (BaseF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))



[17 of 20] Compiling Example.Term.Base.Eval ( src/Example/Term/Base/Eval.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Term/Base/Eval.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 68, types: 164, coercions: 3,702, joins: 0/0}

-- RHS size: {terms: 25, types: 59, coercions: 666, joins: 0/0}
eval6
  :: forall a.
     (Term TermF a -> Term TermF a)
     -> Term TermF a -> Maybe (Term TermF a)
eval6
  = \ (@ a)
      (e :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      case tm
           `cast` (Nth:2
                     ((<Term TermF a>_R
                       -> Sym N:First[0] <(Term TermF a, Term TermF a)>_N)
                      ; (<Term TermF a>_R
                         -> Sym
                              (N:Const[0]
                                 <*>_N <First (Term TermF a, Term TermF a)>_R <Term TermF a>_P)))
                   ; N:Term[0] <TermF>_N <a>_N
                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
      of {
        TmLit y1 -> Nothing @ (Term TermF a);
        TmAdd y1 y2 ->
          case (e y1)
               `cast` (Nth:2
                         ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                          ; (<Term TermF a>_R
                             -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                       ; N:Term[0] <TermF>_N <a>_N
                       :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
          of {
            TmLit y4 ->
              case (e y2)
                   `cast` (Nth:2
                             ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                              ; (<Term TermF a>_R
                                 -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                           ; N:Term[0] <TermF>_N <a>_N
                           :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
              of {
                TmLit y5 ->
                  Just
                    @ (Term TermF a)
                    ((TmLit @ (Term TermF) @ a ($fNumInt_$c+ y4 y5))
                     `cast` (Nth:3
                               (((Sym (N:Identity[0] <Int>_R)
                                  ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                                 -> <BaseF (Term TermF) a>_R)
                                ; (<Tagged Int (Identity Int)>_R
                                   -> Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                                      ; Sym
                                          (N:Tagged[0]
                                             <*>_N
                                             <BaseF (Term TermF) a>_P
                                             <Identity (BaseF (Term TermF) a)>_R)))
                             ; N:Tagged[0]
                                 <*>_N
                                 U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                                 (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                             ; Nth:2
                                 ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                   -> N:Identity[0] <Term TermF a>_R)
                                  ; (<Unwrapped (Term TermF a)>_R
                                     -> Sym (N:Identity[0] <Term TermF a>_R))
                                  ; (<Unwrapped (Term TermF a)>_R
                                     -> Nth:3
                                          ((N:Identity[0] <TermF (Term TermF) a>_R
                                            -> N:Identity[0] <Term TermF a>_R)
                                           ; (<TermF (Term TermF) a>_R
                                              -> N:Term[0] <TermF>_N <a>_N))
                                        ; Nth:2
                                            ((<TermF (Term TermF) a>_R
                                              -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                             ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                -> Sym (N:Identity[0] <Term TermF a>_R)))
                                        ; Nth:3
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> (Identity
                                                    (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N <a>_N))))_R)
                                             ; (<Unwrapped (Term TermF a)>_R
                                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                        ; Nth:2
                                            ((<Unwrapped (Term TermF a)>_R
                                              -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                             ; (<Unwrapped (Term TermF a)>_R
                                                -> (Identity
                                                      (Sub (D:R:UnwrappedTerm[0]
                                                                <TermF>_N <a>_N)))_R))))
                             ; Nth:3
                                 ((<Unwrapped (Term TermF a)>_R
                                   -> Nth:2
                                        ((<Unwrapped (Term TermF a)>_R
                                          -> (Identity
                                                (Sub (Sym (D:R:UnwrappedTerm[0]
                                                               <TermF>_N <a>_N))))_R)
                                         ; (<Unwrapped (Term TermF a)>_R
                                            -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                      ; Nth:3
                                          ((<Unwrapped (Term TermF a)>_R
                                            -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                           ; (Nth:1
                                                (Nth:2
                                                   (Nth:3
                                                      (Nth:3
                                                         (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                            ; Sym
                                                                (N:Rewrapped[0]
                                                                   <Term TermF a>_N
                                                                   <Term TermF a>_N)
                                                            ; Nth:3
                                                                ((<(Term TermF a :: *)
                                                                   ~
                                                                   (Term TermF a :: *)>_R
                                                                  -> N:Rewrapped[0]
                                                                       <Term TermF a>_N
                                                                       <Term TermF a>_N)
                                                                 ; (<(Term TermF a :: *)
                                                                     ~
                                                                     (Term TermF a :: *)>_R
                                                                    -> N:Wrapped[0]
                                                                         <Term TermF a>_N))
                                                            ; (forall (p1 :: <* -> * -> *>_N).
                                                               forall (f2 :: <* -> *>_N).
                                                               <Profunctor p1>_R
                                                               -> <Functor f2>_R
                                                               -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                            <TermF>_N
                                                                            <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                              <TermF>_N
                                                                                              <a>_N))
                                                               -> <p1 (Term TermF a) (f2 (Term
                                                                                            TermF
                                                                                            a))>_R))@<Exchange
                                                                                                        (Unwrapped
                                                                                                           (Term
                                                                                                              TermF
                                                                                                              a))
                                                                                                        (Unwrapped
                                                                                                           (Term
                                                                                                              TermF
                                                                                                              a))>_N)@<Identity>_N))))
                                              -> Nth:3
                                                   (Nth:2
                                                      (Nth:3
                                                         (Nth:3
                                                            (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                               ; Sym
                                                                   (N:Rewrapped[0]
                                                                      <Term TermF a>_N
                                                                      <Term TermF a>_N)
                                                               ; Nth:3
                                                                   ((<(Term TermF a :: *)
                                                                      ~
                                                                      (Term TermF a :: *)>_R
                                                                     -> N:Rewrapped[0]
                                                                          <Term TermF a>_N
                                                                          <Term TermF a>_N)
                                                                    ; (<(Term TermF a :: *)
                                                                        ~
                                                                        (Term TermF a :: *)>_R
                                                                       -> N:Wrapped[0]
                                                                            <Term TermF a>_N))
                                                               ; (forall (p1 :: <* -> * -> *>_N).
                                                                  forall (f2 :: <* -> *>_N).
                                                                  <Profunctor p1>_R
                                                                  -> <Functor f2>_R
                                                                  -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                               <TermF>_N
                                                                               <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                 <TermF>_N
                                                                                                 <a>_N))
                                                                  -> <p1 (Term TermF a) (f2 (Term
                                                                                               TermF
                                                                                               a))>_R))@<Exchange
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))>_N)@<Identity>_N))))))
                                      ; Nth:2
                                          ((N:Identity[0] <TermF (Term TermF) a>_R
                                            -> N:Identity[0] <Term TermF a>_R)
                                           ; (<TermF (Term TermF) a>_R
                                              -> N:Term[0] <TermF>_N <a>_N))
                                      ; Nth:3
                                          ((<TermF (Term TermF) a>_R
                                            -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                           ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                              -> Sym (N:Identity[0] <Term TermF a>_R))))
                                  ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                                  ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                     -> Sym (N:Identity[0] <Term TermF a>_R)))
                             ; Sym
                                 (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                             ; Nth:3
                                 ((<Tagged Int (Identity Int)>_R
                                   -> Sym
                                        (N:Identity[0]
                                           (Sym (N:Identity[0] <Term TermF a>_R)
                                            ; Sym
                                                (N:Tagged[0]
                                                   <*>_N
                                                   <Term TermF a>_P
                                                   <Identity (Term TermF a)>_R))))
                                  ; (<Tagged Int (Identity Int)>_R
                                     -> N:Identity[0] <Term TermF a>_R)
                                  ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                      ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                     -> <Term TermF a>_R)
                                  ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                             :: (BaseF (Term TermF) a :: *) ~R# (Term TermF a :: *)));
                TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
              };
            TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
          }
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval5 :: forall a. EvalRule (Term TermF a)
eval5 = \ (@ a) -> EvalRule @ (Term TermF a) (eval6 @ a)

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
eval4 :: forall a. [EvalRule (Term TermF a)]
eval4
  = \ (@ a) ->
      : @ (EvalRule (Term TermF a))
        (eval5 @ a)
        ([] @ (EvalRule (Term TermF a)))

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalTerm :: forall a. Term TermF a -> Term TermF a
evalTerm = \ (@ a) -> mkEval @ (Term TermF a) (eval4 @ a)

-- RHS size: {terms: 4, types: 9, coercions: 1,152, joins: 0/0}
eval3 :: forall a. BaseF (Term TermF) a
eval3
  = \ (@ a) ->
      TmAdd
        @ (Term TermF)
        @ a
        ((term5 @ a @ TermF)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <Int>_R)
                      ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                     -> <BaseF (Term TermF) a>_R)
                    ; (<Tagged Int (Identity Int)>_R
                       -> Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N
                                 <BaseF (Term TermF) a>_P
                                 <Identity (BaseF (Term TermF) a)>_R)))
                 ; N:Tagged[0]
                     <*>_N
                     U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                     (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (BaseF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
        ((term3 @ a @ TermF)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <Int>_R)
                      ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                     -> <BaseF (Term TermF) a>_R)
                    ; (<Tagged Int (Identity Int)>_R
                       -> Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N
                                 <BaseF (Term TermF) a>_P
                                 <Identity (BaseF (Term TermF) a)>_R)))
                 ; N:Tagged[0]
                     <*>_N
                     U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                     (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (BaseF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 4, types: 8, coercions: 1,230, joins: 0/0}
eval2 :: forall a. BaseF (Term TermF) a
eval2
  = \ (@ a) ->
      TmAdd
        @ (Term TermF)
        @ a
        ((term7 @ a @ TermF)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <Int>_R)
                      ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                     -> <BaseF (Term TermF) a>_R)
                    ; (<Tagged Int (Identity Int)>_R
                       -> Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N
                                 <BaseF (Term TermF) a>_P
                                 <Identity (BaseF (Term TermF) a)>_R)))
                 ; N:Tagged[0]
                     <*>_N
                     U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                     (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (BaseF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
        ((eval3 @ a)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)
                      ; Sym
                          (N:Tagged[0]
                             <*>_N
                             <(Term TermF a, Term TermF a)>_P
                             <Identity (Term TermF a, Term TermF a)>_R))
                     -> <BaseF (Term TermF) a>_R)
                    ; (<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N
                                 <BaseF (Term TermF) a>_P
                                 <Identity (BaseF (Term TermF) a)>_R)))
                 ; N:Tagged[0]
                     <*>_N
                     U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                     (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (BaseF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 654, joins: 0/0}
eval1 :: forall a. Term TermF a
eval1
  = \ (@ a) ->
      mkEval
        @ (Term TermF a)
        (eval4 @ a)
        ((eval2 @ a)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)
                      ; Sym
                          (N:Tagged[0]
                             <*>_N
                             <(Term TermF a, Term TermF a)>_P
                             <Identity (Term TermF a, Term TermF a)>_R))
                     -> <BaseF (Term TermF) a>_R)
                    ; (<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym (N:Identity[0] <BaseF (Term TermF) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N
                                 <BaseF (Term TermF) a>_P
                                 <Identity (BaseF (Term TermF) a)>_R)))
                 ; N:Tagged[0]
                     <*>_N
                     U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                     (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (BaseF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Term.Base.Eval"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[18 of 20] Compiling Example.Mul      ( src/Example/Mul.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Mul.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 84, types: 273, coercions: 4,023, joins: 0/0}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
term10 :: Int
term10 = I# 7#

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
term9 :: forall a (tm :: (* -> *) -> * -> *). BaseF (Term tm) a
term9
  = \ (@ a) (@ (tm :: (* -> *) -> * -> *)) ->
      TmLit @ (Term tm) @ a term10

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
term8 :: Int
term8 = I# 1#

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
term7 :: forall a (tm :: (* -> *) -> * -> *). BaseF (Term tm) a
term7
  = \ (@ a) (@ (tm :: (* -> *) -> * -> *)) ->
      TmLit @ (Term tm) @ a term8

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
term6 :: Int
term6 = I# 2#

-- RHS size: {terms: 4, types: 13, coercions: 0, joins: 0/0}
term5 :: forall a (tm :: (* -> *) -> * -> *). BaseF (Term tm) a
term5
  = \ (@ a) (@ (tm :: (* -> *) -> * -> *)) ->
      TmLit @ (Term tm) @ a term6

-- RHS size: {terms: 25, types: 63, coercions: 2,031, joins: 0/0}
term1
  :: forall (tm :: (* -> *) -> * -> *) a.
     (HasBaseF tm, HasMulF tm) =>
     Tagged (tm (Term tm) a) (Identity (tm (Term tm) a))
term1
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF tm)
      ($dHasMulF :: HasMulF tm) ->
      ($dHasBaseF
       `cast` (N:HasBaseF[0] <tm>_N
               :: (HasBaseF tm :: Constraint)
                  ~R#
                  ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
        @ (Term tm)
        @ a
        @ Tagged
        @ Identity
        $fChoiceTagged
        $fApplicativeIdentity
        ((TmAdd
            @ (Term tm)
            @ a
            ((($dHasBaseF
               `cast` (N:HasBaseF[0] <tm>_N
                       :: (HasBaseF tm :: Constraint)
                          ~R#
                          ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
                @ (Term tm)
                @ a
                @ Tagged
                @ Identity
                $fChoiceTagged
                $fApplicativeIdentity
                ((term9 @ a @ tm)
                 `cast` (Nth:3
                           (((Sym (N:Identity[0] <Int>_R)
                              ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                             -> <BaseF (Term tm) a>_R)
                            ; (<Tagged Int (Identity Int)>_R
                               -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                                  ; Sym
                                      (N:Tagged[0]
                                         <*>_N
                                         <BaseF (Term tm) a>_P
                                         <Identity (BaseF (Term tm) a)>_R)))
                         :: (BaseF (Term tm) a :: *)
                            ~R#
                            (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
             `cast` (N:Tagged[0]
                       <*>_N
                       U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                       (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                     ; Nth:2
                         ((N:Identity[0] <Unwrapped (Term tm a)>_R
                           -> N:Identity[0] <Term tm a>_R)
                          ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                          ; (<Unwrapped (Term tm a)>_R
                             -> Nth:3
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                ; Nth:2
                                    ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                     ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                        -> Sym (N:Identity[0] <Term tm a>_R)))
                                ; Nth:3
                                    ((<Unwrapped (Term tm a)>_R
                                      -> (Identity
                                            (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                     ; (<Unwrapped (Term tm a)>_R
                                        -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                ; Nth:2
                                    ((<Unwrapped (Term tm a)>_R
                                      -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                     ; (<Unwrapped (Term tm a)>_R
                                        -> (Identity
                                              (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
                     ; Nth:3
                         ((<Unwrapped (Term tm a)>_R
                           -> Nth:2
                                ((<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term tm a)>_R
                                    -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                              ; Nth:3
                                  ((<Unwrapped (Term tm a)>_R
                                    -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; (Nth:1
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor p1>_R
                                                       -> <Functor f2>_R
                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                    <tm>_N
                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                      <tm>_N <a>_N))
                                                       -> <p1 (Term tm a) (f2 (Term
                                                                                 tm
                                                                                 a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                      -> Nth:3
                                           (Nth:2
                                              (Nth:3
                                                 (Nth:3
                                                    (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                       ; Sym
                                                           (N:Rewrapped[0]
                                                              <Term tm a>_N <Term tm a>_N)
                                                       ; Nth:3
                                                           ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                             -> N:Rewrapped[0]
                                                                  <Term tm a>_N <Term tm a>_N)
                                                            ; (<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Wrapped[0] <Term tm a>_N))
                                                       ; (forall (p1 :: <* -> * -> *>_N).
                                                          forall (f2 :: <* -> *>_N).
                                                          <Profunctor p1>_R
                                                          -> <Functor f2>_R
                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                       <tm>_N
                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                         <tm>_N
                                                                                         <a>_N))
                                                          -> <p1 (Term tm a) (f2 (Term
                                                                                    tm
                                                                                    a))>_R))@<Exchange
                                                                                                (Unwrapped
                                                                                                   (Term
                                                                                                      tm
                                                                                                      a))
                                                                                                (Unwrapped
                                                                                                   (Term
                                                                                                      tm
                                                                                                      a))>_N)@<Identity>_N))))))
                              ; Nth:2
                                  ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                   ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                              ; Nth:3
                                  ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                   ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                      -> Sym (N:Identity[0] <Term tm a>_R))))
                          ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                          ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                             -> Sym (N:Identity[0] <Term tm a>_R)))
                     ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                     ; Nth:3
                         ((<Tagged Int (Identity Int)>_R
                           -> Sym
                                (N:Identity[0]
                                   (Sym (N:Identity[0] <Term tm a>_R)
                                    ; Sym
                                        (N:Tagged[0]
                                           <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                          ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
                          ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                              ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                             -> <Term tm a>_R)
                          ; (N:Identity[0] <Int>_R -> <Term tm a>_R))
                     :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                        ~R#
                        (Term tm a :: *)))
            ((_Mul
                @ tm
                @ a
                $dHasMulF
                @ Tagged
                @ Identity
                $fChoiceTagged
                $fApplicativeIdentity
                (((($dHasBaseF
                    `cast` (N:HasBaseF[0] <tm>_N
                            :: (HasBaseF tm :: Constraint)
                               ~R#
                               ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
                     @ (Term tm)
                     @ a
                     @ Tagged
                     @ Identity
                     $fChoiceTagged
                     $fApplicativeIdentity
                     ((term7 @ a @ tm)
                      `cast` (Nth:3
                                (((Sym (N:Identity[0] <Int>_R)
                                   ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                                  -> <BaseF (Term tm) a>_R)
                                 ; (<Tagged Int (Identity Int)>_R
                                    -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N
                                              <BaseF (Term tm) a>_P
                                              <Identity (BaseF (Term tm) a)>_R)))
                              :: (BaseF (Term tm) a :: *)
                                 ~R#
                                 (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
                  `cast` (N:Tagged[0]
                            <*>_N
                            U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                            (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                          ; Nth:2
                              ((N:Identity[0] <Unwrapped (Term tm a)>_R
                                -> N:Identity[0] <Term tm a>_R)
                               ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                               ; (<Unwrapped (Term tm a)>_R
                                  -> Nth:3
                                       ((N:Identity[0] <tm (Term tm) a>_R
                                         -> N:Identity[0] <Term tm a>_R)
                                        ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                     ; Nth:2
                                         ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                          ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                             -> Sym (N:Identity[0] <Term tm a>_R)))
                                     ; Nth:3
                                         ((<Unwrapped (Term tm a)>_R
                                           -> (Identity
                                                 (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                          ; (<Unwrapped (Term tm a)>_R
                                             -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                     ; Nth:2
                                         ((<Unwrapped (Term tm a)>_R
                                           -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                          ; (<Unwrapped (Term tm a)>_R
                                             -> (Identity
                                                   (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
                          ; Nth:3
                              ((<Unwrapped (Term tm a)>_R
                                -> Nth:2
                                     ((<Unwrapped (Term tm a)>_R
                                       -> (Identity
                                             (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                      ; (<Unwrapped (Term tm a)>_R
                                         -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; Nth:3
                                       ((<Unwrapped (Term tm a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                        ; (Nth:1
                                             (Nth:2
                                                (Nth:3
                                                   (Nth:3
                                                      (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                         ; Sym
                                                             (N:Rewrapped[0]
                                                                <Term tm a>_N <Term tm a>_N)
                                                         ; Nth:3
                                                             ((<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Rewrapped[0]
                                                                    <Term tm a>_N <Term tm a>_N)
                                                              ; (<(Term tm a :: *)
                                                                  ~
                                                                  (Term tm a :: *)>_R
                                                                 -> N:Wrapped[0] <Term tm a>_N))
                                                         ; (forall (p1 :: <* -> * -> *>_N).
                                                            forall (f2 :: <* -> *>_N).
                                                            <Profunctor p1>_R
                                                            -> <Functor f2>_R
                                                            -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                         <tm>_N
                                                                         <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                           <tm>_N
                                                                                           <a>_N))
                                                            -> <p1 (Term tm a) (f2 (Term
                                                                                      tm
                                                                                      a))>_R))@<Exchange
                                                                                                  (Unwrapped
                                                                                                     (Term
                                                                                                        tm
                                                                                                        a))
                                                                                                  (Unwrapped
                                                                                                     (Term
                                                                                                        tm
                                                                                                        a))>_N)@<Identity>_N))))
                                           -> Nth:3
                                                (Nth:2
                                                   (Nth:3
                                                      (Nth:3
                                                         (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                            ; Sym
                                                                (N:Rewrapped[0]
                                                                   <Term tm a>_N <Term tm a>_N)
                                                            ; Nth:3
                                                                ((<(Term tm a :: *)
                                                                   ~
                                                                   (Term tm a :: *)>_R
                                                                  -> N:Rewrapped[0]
                                                                       <Term tm a>_N <Term tm a>_N)
                                                                 ; (<(Term tm a :: *)
                                                                     ~
                                                                     (Term tm a :: *)>_R
                                                                    -> N:Wrapped[0] <Term tm a>_N))
                                                            ; (forall (p1 :: <* -> * -> *>_N).
                                                               forall (f2 :: <* -> *>_N).
                                                               <Profunctor p1>_R
                                                               -> <Functor f2>_R
                                                               -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                            <tm>_N
                                                                            <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                              <tm>_N
                                                                                              <a>_N))
                                                               -> <p1 (Term tm a) (f2 (Term
                                                                                         tm
                                                                                         a))>_R))@<Exchange
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))>_N)@<Identity>_N))))))
                                   ; Nth:2
                                       ((N:Identity[0] <tm (Term tm) a>_R
                                         -> N:Identity[0] <Term tm a>_R)
                                        ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                   ; Nth:3
                                       ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                           -> Sym (N:Identity[0] <Term tm a>_R))))
                               ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                               ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                                  -> Sym (N:Identity[0] <Term tm a>_R)))
                          ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                          ; Nth:3
                              ((<Tagged Int (Identity Int)>_R
                                -> Sym
                                     (N:Identity[0]
                                        (Sym (N:Identity[0] <Term tm a>_R)
                                         ; Sym
                                             (N:Tagged[0]
                                                <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                               ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
                               ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                   ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                  -> <Term tm a>_R)
                               ; (N:Identity[0] <Int>_R -> <Term tm a>_R))
                          :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                             ~R#
                             (Term tm a :: *)),
                  (($dHasBaseF
                    `cast` (N:HasBaseF[0] <tm>_N
                            :: (HasBaseF tm :: Constraint)
                               ~R#
                               ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
                     @ (Term tm)
                     @ a
                     @ Tagged
                     @ Identity
                     $fChoiceTagged
                     $fApplicativeIdentity
                     ((term5 @ a @ tm)
                      `cast` (Nth:3
                                (((Sym (N:Identity[0] <Int>_R)
                                   ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                                  -> <BaseF (Term tm) a>_R)
                                 ; (<Tagged Int (Identity Int)>_R
                                    -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                                       ; Sym
                                           (N:Tagged[0]
                                              <*>_N
                                              <BaseF (Term tm) a>_P
                                              <Identity (BaseF (Term tm) a)>_R)))
                              :: (BaseF (Term tm) a :: *)
                                 ~R#
                                 (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
                  `cast` (N:Tagged[0]
                            <*>_N
                            U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                            (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                          ; Nth:2
                              ((N:Identity[0] <Unwrapped (Term tm a)>_R
                                -> N:Identity[0] <Term tm a>_R)
                               ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                               ; (<Unwrapped (Term tm a)>_R
                                  -> Nth:3
                                       ((N:Identity[0] <tm (Term tm) a>_R
                                         -> N:Identity[0] <Term tm a>_R)
                                        ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                     ; Nth:2
                                         ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                          ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                             -> Sym (N:Identity[0] <Term tm a>_R)))
                                     ; Nth:3
                                         ((<Unwrapped (Term tm a)>_R
                                           -> (Identity
                                                 (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                          ; (<Unwrapped (Term tm a)>_R
                                             -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                     ; Nth:2
                                         ((<Unwrapped (Term tm a)>_R
                                           -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                          ; (<Unwrapped (Term tm a)>_R
                                             -> (Identity
                                                   (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
                          ; Nth:3
                              ((<Unwrapped (Term tm a)>_R
                                -> Nth:2
                                     ((<Unwrapped (Term tm a)>_R
                                       -> (Identity
                                             (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                      ; (<Unwrapped (Term tm a)>_R
                                         -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                                   ; Nth:3
                                       ((<Unwrapped (Term tm a)>_R
                                         -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                        ; (Nth:1
                                             (Nth:2
                                                (Nth:3
                                                   (Nth:3
                                                      (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                         ; Sym
                                                             (N:Rewrapped[0]
                                                                <Term tm a>_N <Term tm a>_N)
                                                         ; Nth:3
                                                             ((<(Term tm a :: *)
                                                                ~
                                                                (Term tm a :: *)>_R
                                                               -> N:Rewrapped[0]
                                                                    <Term tm a>_N <Term tm a>_N)
                                                              ; (<(Term tm a :: *)
                                                                  ~
                                                                  (Term tm a :: *)>_R
                                                                 -> N:Wrapped[0] <Term tm a>_N))
                                                         ; (forall (p1 :: <* -> * -> *>_N).
                                                            forall (f2 :: <* -> *>_N).
                                                            <Profunctor p1>_R
                                                            -> <Functor f2>_R
                                                            -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                         <tm>_N
                                                                         <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                           <tm>_N
                                                                                           <a>_N))
                                                            -> <p1 (Term tm a) (f2 (Term
                                                                                      tm
                                                                                      a))>_R))@<Exchange
                                                                                                  (Unwrapped
                                                                                                     (Term
                                                                                                        tm
                                                                                                        a))
                                                                                                  (Unwrapped
                                                                                                     (Term
                                                                                                        tm
                                                                                                        a))>_N)@<Identity>_N))))
                                           -> Nth:3
                                                (Nth:2
                                                   (Nth:3
                                                      (Nth:3
                                                         (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                            ; Sym
                                                                (N:Rewrapped[0]
                                                                   <Term tm a>_N <Term tm a>_N)
                                                            ; Nth:3
                                                                ((<(Term tm a :: *)
                                                                   ~
                                                                   (Term tm a :: *)>_R
                                                                  -> N:Rewrapped[0]
                                                                       <Term tm a>_N <Term tm a>_N)
                                                                 ; (<(Term tm a :: *)
                                                                     ~
                                                                     (Term tm a :: *)>_R
                                                                    -> N:Wrapped[0] <Term tm a>_N))
                                                            ; (forall (p1 :: <* -> * -> *>_N).
                                                               forall (f2 :: <* -> *>_N).
                                                               <Profunctor p1>_R
                                                               -> <Functor f2>_R
                                                               -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                            <tm>_N
                                                                            <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                              <tm>_N
                                                                                              <a>_N))
                                                               -> <p1 (Term tm a) (f2 (Term
                                                                                         tm
                                                                                         a))>_R))@<Exchange
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))
                                                                                                     (Unwrapped
                                                                                                        (Term
                                                                                                           tm
                                                                                                           a))>_N)@<Identity>_N))))))
                                   ; Nth:2
                                       ((N:Identity[0] <tm (Term tm) a>_R
                                         -> N:Identity[0] <Term tm a>_R)
                                        ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                                   ; Nth:3
                                       ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                        ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                           -> Sym (N:Identity[0] <Term tm a>_R))))
                               ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                               ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                                  -> Sym (N:Identity[0] <Term tm a>_R)))
                          ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                          ; Nth:3
                              ((<Tagged Int (Identity Int)>_R
                                -> Sym
                                     (N:Identity[0]
                                        (Sym (N:Identity[0] <Term tm a>_R)
                                         ; Sym
                                             (N:Tagged[0]
                                                <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                               ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
                               ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                   ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                  -> <Term tm a>_R)
                               ; (N:Identity[0] <Int>_R -> <Term tm a>_R))
                          :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                             ~R#
                             (Term tm a :: *)))
                 `cast` (Nth:2
                           ((Sym (N:Identity[0] <(Term tm a, Term tm a)>_R) -> <Term tm a>_R)
                            ; ((Sym
                                  (N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N
                                       <(Term tm a, Term tm a)>_P
                                       <Identity (Term tm a, Term tm a)>_R))
                               -> <Term tm a>_R)
                            ; (<Tagged
                                  (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                               -> Sym (N:Identity[0] <Term tm a>_R))
                            ; (<Tagged
                                  (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                               -> N:Identity[0]
                                    (Sym (N:Identity[0] <Term tm a>_R)
                                     ; Sym
                                         (N:Tagged[0]
                                            <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                         :: ((Term tm a, Term tm a) :: *)
                            ~R#
                            (Tagged
                               (Term tm a, Term tm a) (Identity (Term tm a, Term tm a)) :: *))))
             `cast` (Nth:3
                       ((<Tagged
                            (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                         -> Sym
                              (N:Identity[0]
                                 (Sym (N:Identity[0] <Term tm a>_R)
                                  ; Sym
                                      (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                        ; (<Tagged
                              (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                           -> N:Identity[0] <Term tm a>_R)
                        ; ((N:Tagged[0]
                              <*>_N
                              <(Term tm a, Term tm a)>_P
                              <Identity (Term tm a, Term tm a)>_R
                            ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                           -> <Term tm a>_R)
                        ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
                     :: (Tagged (Term tm a) (Identity (Term tm a)) :: *)
                        ~R#
                        (Term tm a :: *))))
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)
                      ; Sym
                          (N:Tagged[0]
                             <*>_N
                             <(Term tm a, Term tm a)>_P
                             <Identity (Term tm a, Term tm a)>_R))
                     -> <BaseF (Term tm) a>_R)
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N <BaseF (Term tm) a>_P <Identity (BaseF (Term tm) a)>_R)))
                 :: (BaseF (Term tm) a :: *)
                    ~R#
                    (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 596, joins: 0/0}
term2
  :: forall (tm :: (* -> *) -> * -> *) a.
     (HasBaseF tm, HasMulF tm) =>
     Term tm a
term2
  = term1
    `cast` (forall (tm :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            <HasBaseF tm>_R
            -> <HasMulF tm>_R
            -> N:Tagged[0]
                 <*>_N
                 U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                 (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term tm a)>_R
                     -> N:Identity[0] <Term tm a>_R)
                    ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                    ; (<Unwrapped (Term tm a)>_R
                       -> Nth:3
                            ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                             ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                          ; Nth:2
                              ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                               ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                  -> Sym (N:Identity[0] <Term tm a>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term tm a)>_R
                                -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                               ; (<Unwrapped (Term tm a)>_R
                                  -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term tm a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                               ; (<Unwrapped (Term tm a)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term tm a)>_R
                     -> Nth:2
                          ((<Unwrapped (Term tm a)>_R
                            -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                           ; (<Unwrapped (Term tm a)>_R
                              -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term tm a)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term tm a>_N)
                                              ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                              ; Nth:3
                                                  ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                    -> N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                   ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                      -> N:Wrapped[0] <Term tm a>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <tm>_N
                                                              <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                <tm>_N <a>_N))
                                                 -> <p1 (Term tm a) (f2 (Term tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                 ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                 ; Nth:3
                                                     ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term tm a>_N <Term tm a>_N)
                                                      ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                         -> N:Wrapped[0] <Term tm a>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <tm>_N
                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                   <tm>_N <a>_N))
                                                    -> <p1 (Term tm a) (f2 (Term
                                                                              tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                             ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                        ; Nth:3
                            ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                             ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                -> Sym (N:Identity[0] <Term tm a>_R))))
                    ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                       -> Sym (N:Identity[0] <Term tm a>_R)))
               ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term tm a>_R)
                              ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> N:Identity[0] <Term tm a>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term tm a, Term tm a)>_P
                          <Identity (Term tm a, Term tm a)>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                       -> <Term tm a>_R)
                    ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
            :: ((forall (tm :: (* -> *) -> * -> *) a.
                 (HasBaseF tm, HasMulF tm) =>
                 Tagged (tm (Term tm) a) (Identity (tm (Term tm) a))) :: *)
               ~R#
               ((forall (tm :: (* -> *) -> * -> *) a.
                 (HasBaseF tm, HasMulF tm) =>
                 Term tm a) :: *))

-- RHS size: {terms: 15, types: 37, coercions: 1,268, joins: 0/0}
term11
  :: forall (tm :: (* -> *) -> * -> *) a.
     (HasBaseF tm, HasMulF tm) =>
     Tagged (Term tm a) (Identity (Term tm a))
term11
  = \ (@ (tm :: (* -> *) -> * -> *))
      (@ a)
      ($dHasBaseF :: HasBaseF tm)
      ($dHasMulF :: HasMulF tm) ->
      _Mul
        @ tm
        @ a
        $dHasMulF
        @ Tagged
        @ Identity
        $fChoiceTagged
        $fApplicativeIdentity
        (((($dHasBaseF
            `cast` (N:HasBaseF[0] <tm>_N
                    :: (HasBaseF tm :: Constraint)
                       ~R#
                       ((forall (f :: * -> *) a. Prism' (tm f a) (BaseF f a)) :: *)))
             @ (Term tm)
             @ a
             @ Tagged
             @ Identity
             $fChoiceTagged
             $fApplicativeIdentity
             ((term9 @ a @ tm)
              `cast` (Nth:3
                        (((Sym (N:Identity[0] <Int>_R)
                           ; Sym (N:Tagged[0] <*>_N <Int>_P <Identity Int>_R))
                          -> <BaseF (Term tm) a>_R)
                         ; (<Tagged Int (Identity Int)>_R
                            -> Sym (N:Identity[0] <BaseF (Term tm) a>_R)
                               ; Sym
                                   (N:Tagged[0]
                                      <*>_N
                                      <BaseF (Term tm) a>_P
                                      <Identity (BaseF (Term tm) a)>_R)))
                      :: (BaseF (Term tm) a :: *)
                         ~R#
                         (Tagged (BaseF (Term tm) a) (Identity (BaseF (Term tm) a)) :: *))))
          `cast` (N:Tagged[0]
                    <*>_N
                    U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                    (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                  ; Nth:2
                      ((N:Identity[0] <Unwrapped (Term tm a)>_R
                        -> N:Identity[0] <Term tm a>_R)
                       ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                       ; (<Unwrapped (Term tm a)>_R
                          -> Nth:3
                               ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                             ; Nth:2
                                 ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                  ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                     -> Sym (N:Identity[0] <Term tm a>_R)))
                             ; Nth:3
                                 ((<Unwrapped (Term tm a)>_R
                                   -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                  ; (<Unwrapped (Term tm a)>_R
                                     -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                             ; Nth:2
                                 ((<Unwrapped (Term tm a)>_R
                                   -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                  ; (<Unwrapped (Term tm a)>_R
                                     -> (Identity (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
                  ; Nth:3
                      ((<Unwrapped (Term tm a)>_R
                        -> Nth:2
                             ((<Unwrapped (Term tm a)>_R
                               -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                              ; (<Unwrapped (Term tm a)>_R
                                 -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                           ; Nth:3
                               ((<Unwrapped (Term tm a)>_R
                                 -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                ; (Nth:1
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                 ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                 ; Nth:3
                                                     ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term tm a>_N <Term tm a>_N)
                                                      ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                         -> N:Wrapped[0] <Term tm a>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <tm>_N
                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                   <tm>_N <a>_N))
                                                    -> <p1 (Term tm a) (f2 (Term
                                                                              tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                   -> Nth:3
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor p1>_R
                                                       -> <Functor f2>_R
                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                    <tm>_N
                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                      <tm>_N <a>_N))
                                                       -> <p1 (Term tm a) (f2 (Term
                                                                                 tm
                                                                                 a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))))
                           ; Nth:2
                               ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                           ; Nth:3
                               ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                   -> Sym (N:Identity[0] <Term tm a>_R))))
                       ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                       ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                          -> Sym (N:Identity[0] <Term tm a>_R)))
                  ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                  ; Nth:3
                      ((<Tagged Int (Identity Int)>_R
                        -> Sym
                             (N:Identity[0]
                                (Sym (N:Identity[0] <Term tm a>_R)
                                 ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                       ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term tm a>_R)
                       ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                           ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                          -> <Term tm a>_R)
                       ; (N:Identity[0] <Int>_R -> <Term tm a>_R))
                  :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                     ~R#
                     (Term tm a :: *)),
          (term2 @ tm @ a $dHasBaseF)
          `cast` (N:Tagged[0]
                    <*>_N
                    U(phant:<*>_N, tm (Term tm) a, Unwrapped (Term tm a))_P
                    (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R
                  ; Nth:2
                      ((N:Identity[0] <Unwrapped (Term tm a)>_R
                        -> N:Identity[0] <Term tm a>_R)
                       ; (<Unwrapped (Term tm a)>_R -> Sym (N:Identity[0] <Term tm a>_R))
                       ; (<Unwrapped (Term tm a)>_R
                          -> Nth:3
                               ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                             ; Nth:2
                                 ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                  ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                     -> Sym (N:Identity[0] <Term tm a>_R)))
                             ; Nth:3
                                 ((<Unwrapped (Term tm a)>_R
                                   -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                                  ; (<Unwrapped (Term tm a)>_R
                                     -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                             ; Nth:2
                                 ((<Unwrapped (Term tm a)>_R
                                   -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                  ; (<Unwrapped (Term tm a)>_R
                                     -> (Identity (Sub (D:R:UnwrappedTerm[0] <tm>_N <a>_N)))_R))))
                  ; Nth:3
                      ((<Unwrapped (Term tm a)>_R
                        -> Nth:2
                             ((<Unwrapped (Term tm a)>_R
                               -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <tm>_N <a>_N))))_R)
                              ; (<Unwrapped (Term tm a)>_R
                                 -> N:Identity[0] <Unwrapped (Term tm a)>_R))
                           ; Nth:3
                               ((<Unwrapped (Term tm a)>_R
                                 -> Sym (N:Identity[0] <Unwrapped (Term tm a)>_R))
                                ; (Nth:1
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                 ; Sym (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                 ; Nth:3
                                                     ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term tm a>_N <Term tm a>_N)
                                                      ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                         -> N:Wrapped[0] <Term tm a>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <tm>_N
                                                                 <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                   <tm>_N <a>_N))
                                                    -> <p1 (Term tm a) (f2 (Term
                                                                              tm a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))
                                   -> Nth:3
                                        (Nth:2
                                           (Nth:3
                                              (Nth:3
                                                 (((Sym (N:Wrapped[0] <Term tm a>_N)
                                                    ; Sym
                                                        (N:Rewrapped[0] <Term tm a>_N <Term tm a>_N)
                                                    ; Nth:3
                                                        ((<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                          -> N:Rewrapped[0]
                                                               <Term tm a>_N <Term tm a>_N)
                                                         ; (<(Term tm a :: *) ~ (Term tm a :: *)>_R
                                                            -> N:Wrapped[0] <Term tm a>_N))
                                                    ; (forall (p1 :: <* -> * -> *>_N).
                                                       forall (f2 :: <* -> *>_N).
                                                       <Profunctor p1>_R
                                                       -> <Functor f2>_R
                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                    <tm>_N
                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                      <tm>_N <a>_N))
                                                       -> <p1 (Term tm a) (f2 (Term
                                                                                 tm
                                                                                 a))>_R))@<Exchange
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))
                                                                                             (Unwrapped
                                                                                                (Term
                                                                                                   tm
                                                                                                   a))>_N)@<Identity>_N))))))
                           ; Nth:2
                               ((N:Identity[0] <tm (Term tm) a>_R -> N:Identity[0] <Term tm a>_R)
                                ; (<tm (Term tm) a>_R -> N:Term[0] <tm>_N <a>_N))
                           ; Nth:3
                               ((<tm (Term tm) a>_R -> Sym (N:Term[0] <tm>_N) <a>_N)
                                ; (Sym (N:Identity[0] <tm (Term tm) a>_R)
                                   -> Sym (N:Identity[0] <Term tm a>_R))))
                       ; (<Unwrapped (Term tm a)>_R -> N:Identity[0] <Term tm a>_R)
                       ; (Sym (N:Identity[0] <Unwrapped (Term tm a)>_R)
                          -> Sym (N:Identity[0] <Term tm a>_R)))
                  ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R)
                  ; Nth:3
                      ((<Tagged
                           (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                        -> Sym
                             (N:Identity[0]
                                (Sym (N:Identity[0] <Term tm a>_R)
                                 ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                       ; (<Tagged
                             (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                          -> N:Identity[0] <Term tm a>_R)
                       ; ((N:Tagged[0]
                             <*>_N
                             <(Term tm a, Term tm a)>_P
                             <Identity (Term tm a, Term tm a)>_R
                           ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                          -> <Term tm a>_R)
                       ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
                  :: (Tagged (tm (Term tm) a) (Identity (tm (Term tm) a)) :: *)
                     ~R#
                     (Term tm a :: *)))
         `cast` (Nth:2
                   ((Sym (N:Identity[0] <(Term tm a, Term tm a)>_R) -> <Term tm a>_R)
                    ; ((Sym
                          (N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <(Term tm a, Term tm a)>_P
                               <Identity (Term tm a, Term tm a)>_R))
                       -> <Term tm a>_R)
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> Sym (N:Identity[0] <Term tm a>_R))
                    ; (<Tagged
                          (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                       -> N:Identity[0]
                            (Sym (N:Identity[0] <Term tm a>_R)
                             ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                 :: ((Term tm a, Term tm a) :: *)
                    ~R#
                    (Tagged
                       (Term tm a, Term tm a) (Identity (Term tm a, Term tm a)) :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 128, joins: 0/0}
term3
  :: forall (tm :: (* -> *) -> * -> *) a.
     (HasBaseF tm, HasMulF tm) =>
     Term tm a
term3
  = term11
    `cast` (forall (tm :: <(* -> *) -> * -> *>_N).
            forall (a :: <*>_N).
            <HasBaseF tm>_R
            -> <HasMulF tm>_R
            -> Nth:3
                 ((<Tagged
                      (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                   -> Sym
                        (N:Identity[0]
                           (Sym (N:Identity[0] <Term tm a>_R)
                            ; Sym (N:Tagged[0] <*>_N <Term tm a>_P <Identity (Term tm a)>_R))))
                  ; (<Tagged
                        (Term tm a, Term tm a) (Identity (Term tm a, Term tm a))>_R
                     -> N:Identity[0] <Term tm a>_R)
                  ; ((N:Tagged[0]
                        <*>_N
                        <(Term tm a, Term tm a)>_P
                        <Identity (Term tm a, Term tm a)>_R
                      ; N:Identity[0] (Sym (N:Identity[0] <(Term tm a, Term tm a)>_R)))
                     -> <Term tm a>_R)
                  ; (N:Identity[0] <(Term tm a, Term tm a)>_R -> <Term tm a>_R))
            :: ((forall (tm :: (* -> *) -> * -> *) a.
                 (HasBaseF tm, HasMulF tm) =>
                 Tagged (Term tm a) (Identity (Term tm a))) :: *)
               ~R#
               ((forall (tm :: (* -> *) -> * -> *) a.
                 (HasBaseF tm, HasMulF tm) =>
                 Term tm a) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Mul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



[19 of 20] Compiling Example.Term.BaseMul.Print ( src/Example/Term/BaseMul/Print.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Term/BaseMul/Print.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 103, types: 325, coercions: 9,483, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Term.BaseMul.Print"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 8, types: 29, coercions: 3, joins: 0/0}
print12 :: forall a. [PrintRule (Term TermF a)]
print12
  = \ (@ a) ->
      case $wprintRules
             @ TermF
             @ a
             (_BMMul
              `cast` (Sym (N:HasMulF[0] <TermF>_N)
                      :: ((forall (f :: * -> *) a. Prism' (TermF f a) (MulF f a)) :: *)
                         ~R#
                         (HasMulF TermF :: Constraint)))
      of
      { (# ww1, ww2 #) ->
      : @ (PrintRule (Term TermF a)) ww1 ww2
      }

-- RHS size: {terms: 10, types: 34, coercions: 3, joins: 0/0}
print11 :: forall a. [PrintRule (Term TermF a)]
print11
  = \ (@ a) ->
      case $wprintRules
             @ TermF
             @ a
             (_BMBase
              `cast` (Sym (N:HasBaseF[0] <TermF>_N)
                      :: ((forall (f :: * -> *) a. Prism' (TermF f a) (BaseF f a)) :: *)
                         ~R#
                         (HasBaseF TermF :: Constraint)))
      of
      { (# ww1, ww2 #) ->
      ++
        @ (PrintRule (Term TermF a))
        (: @ (PrintRule (Term TermF a)) ww1 ww2)
        (print12 @ a)
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
printTerm :: forall a. Term TermF a -> Maybe String
printTerm = \ (@ a) -> mkPrint @ (Term TermF a) (print11 @ a)

-- RHS size: {terms: 2, types: 9, coercions: 0, joins: 0/0}
print10 :: TermF (Term TermF) Any
print10 = BMBase @ (Term TermF) @ Any (term7 @ Any @ TermF)

-- RHS size: {terms: 2, types: 9, coercions: 0, joins: 0/0}
print9 :: TermF (Term TermF) Any
print9 = BMBase @ (Term TermF) @ Any (term5 @ Any @ TermF)

-- RHS size: {terms: 2, types: 9, coercions: 0, joins: 0/0}
print8 :: TermF (Term TermF) Any
print8 = BMBase @ (Term TermF) @ Any (term3 @ Any @ TermF)

-- RHS size: {terms: 3, types: 5, coercions: 1,354, joins: 0/0}
print7 :: BaseF (Term TermF) Any
print7
  = TmAdd
      @ (Term TermF)
      @ Any
      (print9
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))
      (print8
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
print6 :: TermF (Term TermF) Any
print6 = BMBase @ (Term TermF) @ Any print7

-- RHS size: {terms: 3, types: 5, coercions: 1,434, joins: 0/0}
print5 :: BaseF (Term TermF) Any
print5
  = TmAdd
      @ (Term TermF)
      @ Any
      (print10
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))
      (print6
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
print4 :: TermF (Term TermF) Any
print4 = BMBase @ (Term TermF) @ Any print5

-- RHS size: {terms: 3, types: 8, coercions: 757, joins: 0/0}
print1 :: Maybe String
print1
  = mkPrint
      @ (Term TermF Any)
      (print11 @ Any)
      (print4
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 2, types: 9, coercions: 0, joins: 0/0}
print19 :: TermF (Term TermF) Any
print19 = BMBase @ (Term TermF) @ Any (term9 @ Any @ TermF)

-- RHS size: {terms: 2, types: 9, coercions: 0, joins: 0/0}
print18 :: TermF (Term TermF) Any
print18 = BMBase @ (Term TermF) @ Any (term7 @ Any @ TermF)

-- RHS size: {terms: 2, types: 9, coercions: 0, joins: 0/0}
print17 :: TermF (Term TermF) Any
print17 = BMBase @ (Term TermF) @ Any (term5 @ Any @ TermF)

-- RHS size: {terms: 3, types: 5, coercions: 1,354, joins: 0/0}
print16 :: MulF (Term TermF) Any
print16
  = TmMul
      @ (Term TermF)
      @ Any
      (print18
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))
      (print17
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
print15 :: TermF (Term TermF) Any
print15 = BMMul @ (Term TermF) @ Any print16

-- RHS size: {terms: 3, types: 5, coercions: 1,532, joins: 0/0}
print14 :: BaseF (Term TermF) Any
print14
  = TmAdd
      @ (Term TermF)
      @ Any
      (print19
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))
      (print15
       `cast` (Nth:3
                 (((Sym (N:Identity[0] <MulF (Term TermF) Any>_R)
                    ; Sym
                        (N:Tagged[0]
                           <*>_N
                           <MulF (Term TermF) Any>_P
                           <Identity (MulF (Term TermF) Any)>_R))
                   -> <TermF (Term TermF) Any>_R)
                  ; (<Tagged
                        (MulF (Term TermF) Any) (Identity (MulF (Term TermF) Any))>_R
                     -> Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <TermF (Term TermF) Any>_P
                               <Identity (TermF (Term TermF) Any)>_R)))
               ; N:Tagged[0]
                   <*>_N
                   U(phant:<*>_N, TermF (Term TermF) Any, Unwrapped
                                                            (Term TermF Any))_P
                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
print13 :: TermF (Term TermF) Any
print13 = BMBase @ (Term TermF) @ Any print14

-- RHS size: {terms: 3, types: 8, coercions: 757, joins: 0/0}
print2 :: Maybe String
print2
  = mkPrint
      @ (Term TermF Any)
      (print11 @ Any)
      (print13
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 3, types: 5, coercions: 1,434, joins: 0/0}
print21 :: MulF (Term TermF) Any
print21
  = TmMul
      @ (Term TermF)
      @ Any
      (print19
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged Int (Identity Int)>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged Int (Identity Int)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                        ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <Int>_R -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))
      (print4
       `cast` (Sym
                 (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))

-- RHS size: {terms: 2, types: 5, coercions: 0, joins: 0/0}
print20 :: TermF (Term TermF) Any
print20 = BMMul @ (Term TermF) @ Any print21

-- RHS size: {terms: 3, types: 8, coercions: 855, joins: 0/0}
print3 :: Maybe String
print3
  = mkPrint
      @ (Term TermF Any)
      (print11 @ Any)
      (print20
       `cast` (Nth:3
                 (((Sym (N:Identity[0] <MulF (Term TermF) Any>_R)
                    ; Sym
                        (N:Tagged[0]
                           <*>_N
                           <MulF (Term TermF) Any>_P
                           <Identity (MulF (Term TermF) Any)>_R))
                   -> <TermF (Term TermF) Any>_R)
                  ; (<Tagged
                        (MulF (Term TermF) Any) (Identity (MulF (Term TermF) Any))>_R
                     -> Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                        ; Sym
                            (N:Tagged[0]
                               <*>_N
                               <TermF (Term TermF) Any>_P
                               <Identity (TermF (Term TermF) Any)>_R)))
               ; N:Tagged[0]
                   <*>_N
                   U(phant:<*>_N, TermF (Term TermF) Any, Unwrapped
                                                            (Term TermF Any))_P
                   (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R
               ; Nth:2
                   ((N:Identity[0] <Unwrapped (Term TermF Any)>_R
                     -> N:Identity[0] <Term TermF Any>_R)
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Sym (N:Identity[0] <Term TermF Any>_R))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> Nth:3
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                          ; Nth:2
                              ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                  -> Sym (N:Identity[0] <Term TermF Any>_R)))
                          ; Nth:3
                              ((<Unwrapped (Term TermF Any)>_R
                                -> (Identity
                                      (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                          ; Nth:2
                              ((<Unwrapped (Term TermF Any)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                               ; (<Unwrapped (Term TermF Any)>_R
                                  -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N)))_R))))
               ; Nth:3
                   ((<Unwrapped (Term TermF Any)>_R
                     -> Nth:2
                          ((<Unwrapped (Term TermF Any)>_R
                            -> (Identity
                                  (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <Any>_N))))_R)
                           ; (<Unwrapped (Term TermF Any)>_R
                              -> N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                        ; Nth:3
                            ((<Unwrapped (Term TermF Any)>_R
                              -> Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R))
                             ; (Nth:1
                                  (Nth:2
                                     (Nth:3
                                        (Nth:3
                                           (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                              ; Sym
                                                  (N:Rewrapped[0]
                                                     <Term TermF Any>_N <Term TermF Any>_N)
                                              ; Nth:3
                                                  ((<(Term TermF Any :: *)
                                                     ~
                                                     (Term TermF Any :: *)>_R
                                                    -> N:Rewrapped[0]
                                                         <Term TermF Any>_N <Term TermF Any>_N)
                                                   ; (<(Term TermF Any :: *)
                                                       ~
                                                       (Term TermF Any :: *)>_R
                                                      -> N:Wrapped[0] <Term TermF Any>_N))
                                              ; (forall (p1 :: <* -> * -> *>_N).
                                                 forall (f2 :: <* -> *>_N).
                                                 <Profunctor p1>_R
                                                 -> <Functor f2>_R
                                                 -> <p1>_R (D:R:UnwrappedTerm[0]
                                                              <TermF>_N
                                                              <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N
                                                                                  <Any>_N))
                                                 -> <p1 (Term TermF Any) (f2 (Term
                                                                                TermF
                                                                                Any))>_R))@<Exchange
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))
                                                                                              (Unwrapped
                                                                                                 (Term
                                                                                                    TermF
                                                                                                    Any))>_N)@<Identity>_N))))
                                -> Nth:3
                                     (Nth:2
                                        (Nth:3
                                           (Nth:3
                                              (((Sym (N:Wrapped[0] <Term TermF Any>_N)
                                                 ; Sym
                                                     (N:Rewrapped[0]
                                                        <Term TermF Any>_N <Term TermF Any>_N)
                                                 ; Nth:3
                                                     ((<(Term TermF Any :: *)
                                                        ~
                                                        (Term TermF Any :: *)>_R
                                                       -> N:Rewrapped[0]
                                                            <Term TermF Any>_N <Term TermF Any>_N)
                                                      ; (<(Term TermF Any :: *)
                                                          ~
                                                          (Term TermF Any :: *)>_R
                                                         -> N:Wrapped[0] <Term TermF Any>_N))
                                                 ; (forall (p1 :: <* -> * -> *>_N).
                                                    forall (f2 :: <* -> *>_N).
                                                    <Profunctor p1>_R
                                                    -> <Functor f2>_R
                                                    -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                 <TermF>_N
                                                                 <Any>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <Any>_N))
                                                    -> <p1 (Term TermF Any) (f2 (Term
                                                                                   TermF
                                                                                   Any))>_R))@<Exchange
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))
                                                                                                 (Unwrapped
                                                                                                    (Term
                                                                                                       TermF
                                                                                                       Any))>_N)@<Identity>_N))))))
                        ; Nth:2
                            ((N:Identity[0] <TermF (Term TermF) Any>_R
                              -> N:Identity[0] <Term TermF Any>_R)
                             ; (<TermF (Term TermF) Any>_R -> N:Term[0] <TermF>_N <Any>_N))
                        ; Nth:3
                            ((<TermF (Term TermF) Any>_R -> Sym (N:Term[0] <TermF>_N) <Any>_N)
                             ; (Sym (N:Identity[0] <TermF (Term TermF) Any>_R)
                                -> Sym (N:Identity[0] <Term TermF Any>_R))))
                    ; (<Unwrapped (Term TermF Any)>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; (Sym (N:Identity[0] <Unwrapped (Term TermF Any)>_R)
                       -> Sym (N:Identity[0] <Term TermF Any>_R)))
               ; Sym
                   (N:Tagged[0]
                      <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R)
               ; Nth:3
                   ((<Tagged
                        (Term TermF Any, Term TermF Any)
                        (Identity (Term TermF Any, Term TermF Any))>_R
                     -> Sym
                          (N:Identity[0]
                             (Sym (N:Identity[0] <Term TermF Any>_R)
                              ; Sym
                                  (N:Tagged[0]
                                     <*>_N <Term TermF Any>_P <Identity (Term TermF Any)>_R))))
                    ; (<Tagged
                          (Term TermF Any, Term TermF Any)
                          (Identity (Term TermF Any, Term TermF Any))>_R
                       -> N:Identity[0] <Term TermF Any>_R)
                    ; ((N:Tagged[0]
                          <*>_N
                          <(Term TermF Any, Term TermF Any)>_P
                          <Identity (Term TermF Any, Term TermF Any)>_R
                        ; N:Identity[0]
                            (Sym (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R)))
                       -> <Term TermF Any>_R)
                    ; (N:Identity[0] <(Term TermF Any, Term TermF Any)>_R
                       -> <Term TermF Any>_R))
               :: (TermF (Term TermF) Any :: *) ~R# (Term TermF Any :: *)))



[20 of 20] Compiling Example.Term.BaseMul.Eval ( src/Example/Term/BaseMul/Eval.hs, /home/dave/work/github.com/dalaing/initial-final/dist-newstyle/build/x86_64-linux/ghc-8.2.2/initial-0.1.0.0/build/Example/Term/BaseMul/Eval.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 202, types: 555, coercions: 8,310, joins: 0/0}

-- RHS size: {terms: 41, types: 107, coercions: 605, joins: 0/0}
eval16
  :: forall a.
     (Term TermF a -> Term TermF a)
     -> Term TermF a -> Maybe (Term TermF a)
eval16
  = \ (@ a)
      (e :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      case tm
           `cast` (Nth:2
                     ((<Term TermF a>_R
                       -> Sym N:First[0] <(Term TermF a, Term TermF a)>_N)
                      ; (<Term TermF a>_R
                         -> Sym
                              (N:Const[0]
                                 <*>_N <First (Term TermF a, Term TermF a)>_R <Term TermF a>_P)))
                   ; N:Term[0] <TermF>_N <a>_N
                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
      of {
        BMBase y1 ->
          case y1 of {
            TmLit y2 -> Nothing @ (Term TermF a);
            TmAdd y2 y3 ->
              case (e y2)
                   `cast` (Nth:2
                             ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                              ; (<Term TermF a>_R
                                 -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                           ; N:Term[0] <TermF>_N <a>_N
                           :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
              of {
                BMBase y4 ->
                  case y4 of {
                    TmLit y5 ->
                      case (e y3)
                           `cast` (Nth:2
                                     ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                                      ; (<Term TermF a>_R
                                         -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                                   ; N:Term[0] <TermF>_N <a>_N
                                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
                      of {
                        BMBase y6 ->
                          case y6 of {
                            TmLit y7 ->
                              Just
                                @ (Term TermF a)
                                ((BMBase
                                    @ (Term TermF)
                                    @ a
                                    (TmLit @ (Term TermF) @ a ($fNumInt_$c+ y5 y7)))
                                 `cast` (Sym
                                           (N:Identity[0]
                                              (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                                         ; Nth:2
                                             ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                               -> N:Identity[0] <Term TermF a>_R)
                                              ; (<Unwrapped (Term TermF a)>_R
                                                 -> Sym (N:Identity[0] <Term TermF a>_R))
                                              ; (<Unwrapped (Term TermF a)>_R
                                                 -> Nth:3
                                                      ((N:Identity[0] <TermF (Term TermF) a>_R
                                                        -> N:Identity[0] <Term TermF a>_R)
                                                       ; (<TermF (Term TermF) a>_R
                                                          -> N:Term[0] <TermF>_N <a>_N))
                                                    ; Nth:2
                                                        ((<TermF (Term TermF) a>_R
                                                          -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                         ; (Sym
                                                              (N:Identity[0]
                                                                 <TermF (Term TermF) a>_R)
                                                            -> Sym
                                                                 (N:Identity[0] <Term TermF a>_R)))
                                                    ; Nth:3
                                                        ((<Unwrapped (Term TermF a)>_R
                                                          -> (Identity
                                                                (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                               <TermF>_N
                                                                               <a>_N))))_R)
                                                         ; (<Unwrapped (Term TermF a)>_R
                                                            -> N:Identity[0]
                                                                 <Unwrapped (Term TermF a)>_R))
                                                    ; Nth:2
                                                        ((<Unwrapped (Term TermF a)>_R
                                                          -> Sym
                                                               (N:Identity[0]
                                                                  <Unwrapped (Term TermF a)>_R))
                                                         ; (<Unwrapped (Term TermF a)>_R
                                                            -> (Identity
                                                                  (Sub (D:R:UnwrappedTerm[0]
                                                                            <TermF>_N <a>_N)))_R))))
                                         ; Nth:3
                                             ((<Unwrapped (Term TermF a)>_R
                                               -> Nth:2
                                                    ((<Unwrapped (Term TermF a)>_R
                                                      -> (Identity
                                                            (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                           <TermF>_N <a>_N))))_R)
                                                     ; (<Unwrapped (Term TermF a)>_R
                                                        -> N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                  ; Nth:3
                                                      ((<Unwrapped (Term TermF a)>_R
                                                        -> Sym
                                                             (N:Identity[0]
                                                                <Unwrapped (Term TermF a)>_R))
                                                       ; (Nth:1
                                                            (Nth:2
                                                               (Nth:3
                                                                  (Nth:3
                                                                     (((Sym
                                                                          (N:Wrapped[0]
                                                                             <Term TermF a>_N)
                                                                        ; Sym
                                                                            (N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                        ; Nth:3
                                                                            ((<(Term TermF a :: *)
                                                                               ~
                                                                               (Term
                                                                                  TermF a :: *)>_R
                                                                              -> N:Rewrapped[0]
                                                                                   <Term TermF a>_N
                                                                                   <Term TermF a>_N)
                                                                             ; (<(Term TermF a :: *)
                                                                                 ~
                                                                                 (Term
                                                                                    TermF a :: *)>_R
                                                                                -> N:Wrapped[0]
                                                                                     <Term
                                                                                        TermF a>_N))
                                                                        ; (forall (p1 :: <*
                                                                                          -> *
                                                                                          -> *>_N).
                                                                           forall (f2 :: <*
                                                                                          -> *>_N).
                                                                           <Profunctor p1>_R
                                                                           -> <Functor f2>_R
                                                                           -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                        <TermF>_N
                                                                                        <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                          <TermF>_N
                                                                                                          <a>_N))
                                                                           -> <p1 (Term
                                                                                     TermF
                                                                                     a) (f2 (Term
                                                                                               TermF
                                                                                               a))>_R))@<Exchange
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))
                                                                                                           (Unwrapped
                                                                                                              (Term
                                                                                                                 TermF
                                                                                                                 a))>_N)@<Identity>_N))))
                                                          -> Nth:3
                                                               (Nth:2
                                                                  (Nth:3
                                                                     (Nth:3
                                                                        (((Sym
                                                                             (N:Wrapped[0]
                                                                                <Term TermF a>_N)
                                                                           ; Sym
                                                                               (N:Rewrapped[0]
                                                                                  <Term TermF a>_N
                                                                                  <Term TermF a>_N)
                                                                           ; Nth:3
                                                                               ((<(Term
                                                                                     TermF a :: *)
                                                                                  ~
                                                                                  (Term
                                                                                     TermF
                                                                                     a :: *)>_R
                                                                                 -> N:Rewrapped[0]
                                                                                      <Term
                                                                                         TermF a>_N
                                                                                      <Term
                                                                                         TermF a>_N)
                                                                                ; (<(Term
                                                                                       TermF a :: *)
                                                                                    ~
                                                                                    (Term
                                                                                       TermF
                                                                                       a :: *)>_R
                                                                                   -> N:Wrapped[0]
                                                                                        <Term
                                                                                           TermF
                                                                                           a>_N))
                                                                           ; (forall (p1 :: <*
                                                                                             -> *
                                                                                             -> *>_N).
                                                                              forall (f2 :: <*
                                                                                             -> *>_N).
                                                                              <Profunctor p1>_R
                                                                              -> <Functor f2>_R
                                                                              -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                           <TermF>_N
                                                                                           <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                             <TermF>_N
                                                                                                             <a>_N))
                                                                              -> <p1 (Term
                                                                                        TermF
                                                                                        a) (f2 (Term
                                                                                                  TermF
                                                                                                  a))>_R))@<Exchange
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))
                                                                                                              (Unwrapped
                                                                                                                 (Term
                                                                                                                    TermF
                                                                                                                    a))>_N)@<Identity>_N))))))
                                                  ; Nth:2
                                                      ((N:Identity[0] <TermF (Term TermF) a>_R
                                                        -> N:Identity[0] <Term TermF a>_R)
                                                       ; (<TermF (Term TermF) a>_R
                                                          -> N:Term[0] <TermF>_N <a>_N))
                                                  ; Nth:3
                                                      ((<TermF (Term TermF) a>_R
                                                        -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                       ; (Sym
                                                            (N:Identity[0] <TermF (Term TermF) a>_R)
                                                          -> Sym (N:Identity[0] <Term TermF a>_R))))
                                              ; (<Unwrapped (Term TermF a)>_R
                                                 -> N:Identity[0] <Term TermF a>_R)
                                              ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                                 -> Sym (N:Identity[0] <Term TermF a>_R)))
                                         ; Sym
                                             (N:Tagged[0]
                                                <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                         ; Nth:3
                                             ((<Tagged Int (Identity Int)>_R
                                               -> Sym
                                                    (N:Identity[0]
                                                       (Sym (N:Identity[0] <Term TermF a>_R)
                                                        ; Sym
                                                            (N:Tagged[0]
                                                               <*>_N
                                                               <Term TermF a>_P
                                                               <Identity (Term TermF a)>_R))))
                                              ; (<Tagged Int (Identity Int)>_R
                                                 -> N:Identity[0] <Term TermF a>_R)
                                              ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                                  ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                                 -> <Term TermF a>_R)
                                              ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                         :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)));
                            TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
                          };
                        BMMul ipv -> Nothing @ (Term TermF a)
                      };
                    TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
                  };
                BMMul ipv -> Nothing @ (Term TermF a)
              }
          };
        BMMul ipv -> Nothing @ (Term TermF a)
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval15 :: forall a. EvalRule (Term TermF a)
eval15 = \ (@ a) -> EvalRule @ (Term TermF a) (eval16 @ a)

-- RHS size: {terms: 39, types: 103, coercions: 570, joins: 0/0}
eval14
  :: forall a.
     (Term TermF a -> Term TermF a)
     -> Term TermF a -> Maybe (Term TermF a)
eval14
  = \ (@ a)
      (e :: Term TermF a -> Term TermF a)
      (tm :: Term TermF a) ->
      case tm
           `cast` (N:Term[0] <TermF>_N <a>_N
                   :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
      of {
        BMBase ipv -> Nothing @ (Term TermF a);
        BMMul y1 ->
          case y1 of { TmMul x1 x2 ->
          case (e x1)
               `cast` (Nth:2
                         ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                          ; (<Term TermF a>_R
                             -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                       ; N:Term[0] <TermF>_N <a>_N
                       :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
          of {
            BMBase y2 ->
              case y2 of {
                TmLit y3 ->
                  case (e x2)
                       `cast` (Nth:2
                                 ((<Term TermF a>_R -> Sym N:First[0] <Int>_N)
                                  ; (<Term TermF a>_R
                                     -> Sym (N:Const[0] <*>_N <First Int>_R <Term TermF a>_P)))
                               ; N:Term[0] <TermF>_N <a>_N
                               :: (Term TermF a :: *) ~R# (TermF (Term TermF) a :: *))
                  of {
                    BMBase y4 ->
                      case y4 of {
                        TmLit y5 ->
                          Just
                            @ (Term TermF a)
                            ((BMBase
                                @ (Term TermF) @ a (TmLit @ (Term TermF) @ a ($fNumInt_$c* y3 y5)))
                             `cast` (Sym
                                       (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                                     ; Nth:2
                                         ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                                           -> N:Identity[0] <Term TermF a>_R)
                                          ; (<Unwrapped (Term TermF a)>_R
                                             -> Sym (N:Identity[0] <Term TermF a>_R))
                                          ; (<Unwrapped (Term TermF a)>_R
                                             -> Nth:3
                                                  ((N:Identity[0] <TermF (Term TermF) a>_R
                                                    -> N:Identity[0] <Term TermF a>_R)
                                                   ; (<TermF (Term TermF) a>_R
                                                      -> N:Term[0] <TermF>_N <a>_N))
                                                ; Nth:2
                                                    ((<TermF (Term TermF) a>_R
                                                      -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                     ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                        -> Sym (N:Identity[0] <Term TermF a>_R)))
                                                ; Nth:3
                                                    ((<Unwrapped (Term TermF a)>_R
                                                      -> (Identity
                                                            (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                           <TermF>_N <a>_N))))_R)
                                                     ; (<Unwrapped (Term TermF a)>_R
                                                        -> N:Identity[0]
                                                             <Unwrapped (Term TermF a)>_R))
                                                ; Nth:2
                                                    ((<Unwrapped (Term TermF a)>_R
                                                      -> Sym
                                                           (N:Identity[0]
                                                              <Unwrapped (Term TermF a)>_R))
                                                     ; (<Unwrapped (Term TermF a)>_R
                                                        -> (Identity
                                                              (Sub (D:R:UnwrappedTerm[0]
                                                                        <TermF>_N <a>_N)))_R))))
                                     ; Nth:3
                                         ((<Unwrapped (Term TermF a)>_R
                                           -> Nth:2
                                                ((<Unwrapped (Term TermF a)>_R
                                                  -> (Identity
                                                        (Sub (Sym (D:R:UnwrappedTerm[0]
                                                                       <TermF>_N <a>_N))))_R)
                                                 ; (<Unwrapped (Term TermF a)>_R
                                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                              ; Nth:3
                                                  ((<Unwrapped (Term TermF a)>_R
                                                    -> Sym
                                                         (N:Identity[0]
                                                            <Unwrapped (Term TermF a)>_R))
                                                   ; (Nth:1
                                                        (Nth:2
                                                           (Nth:3
                                                              (Nth:3
                                                                 (((Sym
                                                                      (N:Wrapped[0]
                                                                         <Term TermF a>_N)
                                                                    ; Sym
                                                                        (N:Rewrapped[0]
                                                                           <Term TermF a>_N
                                                                           <Term TermF a>_N)
                                                                    ; Nth:3
                                                                        ((<(Term TermF a :: *)
                                                                           ~
                                                                           (Term TermF a :: *)>_R
                                                                          -> N:Rewrapped[0]
                                                                               <Term TermF a>_N
                                                                               <Term TermF a>_N)
                                                                         ; (<(Term TermF a :: *)
                                                                             ~
                                                                             (Term TermF a :: *)>_R
                                                                            -> N:Wrapped[0]
                                                                                 <Term TermF a>_N))
                                                                    ; (forall (p1 :: <*
                                                                                      -> * -> *>_N).
                                                                       forall (f2 :: <* -> *>_N).
                                                                       <Profunctor p1>_R
                                                                       -> <Functor f2>_R
                                                                       -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                    <TermF>_N
                                                                                    <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                      <TermF>_N
                                                                                                      <a>_N))
                                                                       -> <p1 (Term
                                                                                 TermF a) (f2 (Term
                                                                                                 TermF
                                                                                                 a))>_R))@<Exchange
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))
                                                                                                             (Unwrapped
                                                                                                                (Term
                                                                                                                   TermF
                                                                                                                   a))>_N)@<Identity>_N))))
                                                      -> Nth:3
                                                           (Nth:2
                                                              (Nth:3
                                                                 (Nth:3
                                                                    (((Sym
                                                                         (N:Wrapped[0]
                                                                            <Term TermF a>_N)
                                                                       ; Sym
                                                                           (N:Rewrapped[0]
                                                                              <Term TermF a>_N
                                                                              <Term TermF a>_N)
                                                                       ; Nth:3
                                                                           ((<(Term TermF a :: *)
                                                                              ~
                                                                              (Term TermF a :: *)>_R
                                                                             -> N:Rewrapped[0]
                                                                                  <Term TermF a>_N
                                                                                  <Term TermF a>_N)
                                                                            ; (<(Term TermF a :: *)
                                                                                ~
                                                                                (Term
                                                                                   TermF a :: *)>_R
                                                                               -> N:Wrapped[0]
                                                                                    <Term
                                                                                       TermF a>_N))
                                                                       ; (forall (p1 :: <*
                                                                                         -> *
                                                                                         -> *>_N).
                                                                          forall (f2 :: <* -> *>_N).
                                                                          <Profunctor p1>_R
                                                                          -> <Functor f2>_R
                                                                          -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                                       <TermF>_N
                                                                                       <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                                         <TermF>_N
                                                                                                         <a>_N))
                                                                          -> <p1 (Term
                                                                                    TermF
                                                                                    a) (f2 (Term
                                                                                              TermF
                                                                                              a))>_R))@<Exchange
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))
                                                                                                          (Unwrapped
                                                                                                             (Term
                                                                                                                TermF
                                                                                                                a))>_N)@<Identity>_N))))))
                                              ; Nth:2
                                                  ((N:Identity[0] <TermF (Term TermF) a>_R
                                                    -> N:Identity[0] <Term TermF a>_R)
                                                   ; (<TermF (Term TermF) a>_R
                                                      -> N:Term[0] <TermF>_N <a>_N))
                                              ; Nth:3
                                                  ((<TermF (Term TermF) a>_R
                                                    -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                                   ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                                      -> Sym (N:Identity[0] <Term TermF a>_R))))
                                          ; (<Unwrapped (Term TermF a)>_R
                                             -> N:Identity[0] <Term TermF a>_R)
                                          ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                                             -> Sym (N:Identity[0] <Term TermF a>_R)))
                                     ; Sym
                                         (N:Tagged[0]
                                            <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                                     ; Nth:3
                                         ((<Tagged Int (Identity Int)>_R
                                           -> Sym
                                                (N:Identity[0]
                                                   (Sym (N:Identity[0] <Term TermF a>_R)
                                                    ; Sym
                                                        (N:Tagged[0]
                                                           <*>_N
                                                           <Term TermF a>_P
                                                           <Identity (Term TermF a)>_R))))
                                          ; (<Tagged Int (Identity Int)>_R
                                             -> N:Identity[0] <Term TermF a>_R)
                                          ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                                              ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                                             -> <Term TermF a>_R)
                                          ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                                     :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)));
                        TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
                      };
                    BMMul ipv -> Nothing @ (Term TermF a)
                  };
                TmAdd ipv ipv1 -> Nothing @ (Term TermF a)
              };
            BMMul ipv -> Nothing @ (Term TermF a)
          }
          }
      }

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval13 :: forall a. EvalRule (Term TermF a)
eval13 = \ (@ a) -> EvalRule @ (Term TermF a) (eval14 @ a)

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
eval12 :: forall a. [EvalRule (Term TermF a)]
eval12
  = \ (@ a) ->
      : @ (EvalRule (Term TermF a))
        (eval13 @ a)
        ([] @ (EvalRule (Term TermF a)))

-- RHS size: {terms: 4, types: 8, coercions: 0, joins: 0/0}
eval11 :: forall a. [EvalRule (Term TermF a)]
eval11
  = \ (@ a) ->
      : @ (EvalRule (Term TermF a)) (eval15 @ a) (eval12 @ a)

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
evalTerm :: forall a. Term TermF a -> Term TermF a
evalTerm = \ (@ a) -> mkEval @ (Term TermF a) (eval11 @ a)

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
eval10 :: forall a. TermF (Term TermF) a
eval10 = \ (@ a) -> BMBase @ (Term TermF) @ a (term7 @ a @ TermF)

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
eval9 :: forall a. TermF (Term TermF) a
eval9 = \ (@ a) -> BMBase @ (Term TermF) @ a (term5 @ a @ TermF)

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
eval8 :: forall a. TermF (Term TermF) a
eval8 = \ (@ a) -> BMBase @ (Term TermF) @ a (term3 @ a @ TermF)

-- RHS size: {terms: 4, types: 7, coercions: 1,030, joins: 0/0}
eval7 :: forall a. BaseF (Term TermF) a
eval7
  = \ (@ a) ->
      TmAdd
        @ (Term TermF)
        @ a
        ((eval9 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
        ((eval8 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval6 :: forall a. TermF (Term TermF) a
eval6 = \ (@ a) -> BMBase @ (Term TermF) @ a (eval7 @ a)

-- RHS size: {terms: 4, types: 7, coercions: 1,078, joins: 0/0}
eval5 :: forall a. BaseF (Term TermF) a
eval5
  = \ (@ a) ->
      TmAdd
        @ (Term TermF)
        @ a
        ((eval10 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
        ((eval6 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval4 :: forall a. TermF (Term TermF) a
eval4 = \ (@ a) -> BMBase @ (Term TermF) @ a (eval5 @ a)

-- RHS size: {terms: 4, types: 7, coercions: 563, joins: 0/0}
eval1 :: forall a. Term TermF a
eval1
  = \ (@ a) ->
      mkEval
        @ (Term TermF a)
        (eval11 @ a)
        ((eval4 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
eval23 :: forall a. TermF (Term TermF) a
eval23 = \ (@ a) -> BMBase @ (Term TermF) @ a (term9 @ a @ TermF)

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
eval22 :: forall a. TermF (Term TermF) a
eval22 = \ (@ a) -> BMBase @ (Term TermF) @ a (term7 @ a @ TermF)

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
eval21 :: forall a. TermF (Term TermF) a
eval21 = \ (@ a) -> BMBase @ (Term TermF) @ a (term5 @ a @ TermF)

-- RHS size: {terms: 4, types: 7, coercions: 1,030, joins: 0/0}
eval20 :: forall a. MulF (Term TermF) a
eval20
  = \ (@ a) ->
      TmMul
        @ (Term TermF)
        @ a
        ((eval22 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
        ((eval21 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval19 :: forall a. TermF (Term TermF) a
eval19 = \ (@ a) -> BMMul @ (Term TermF) @ a (eval20 @ a)

-- RHS size: {terms: 4, types: 7, coercions: 1,154, joins: 0/0}
eval18 :: forall a. BaseF (Term TermF) a
eval18
  = \ (@ a) ->
      TmAdd
        @ (Term TermF)
        @ a
        ((eval23 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
        ((eval19 @ a)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <MulF (Term TermF) a>_R)
                      ; Sym
                          (N:Tagged[0]
                             <*>_N <MulF (Term TermF) a>_P <Identity (MulF (Term TermF) a)>_R))
                     -> <TermF (Term TermF) a>_R)
                    ; (<Tagged
                          (MulF (Term TermF) a) (Identity (MulF (Term TermF) a))>_R
                       -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N
                                 <TermF (Term TermF) a>_P
                                 <Identity (TermF (Term TermF) a)>_R)))
                 ; N:Tagged[0]
                     <*>_N
                     U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                     (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval17 :: forall a. TermF (Term TermF) a
eval17 = \ (@ a) -> BMBase @ (Term TermF) @ a (eval18 @ a)

-- RHS size: {terms: 4, types: 7, coercions: 563, joins: 0/0}
eval2 :: forall a. Term TermF a
eval2
  = \ (@ a) ->
      mkEval
        @ (Term TermF a)
        (eval11 @ a)
        ((eval17 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 4, types: 7, coercions: 1,078, joins: 0/0}
eval25 :: forall a. MulF (Term TermF) a
eval25
  = \ (@ a) ->
      TmMul
        @ (Term TermF)
        @ a
        ((eval23 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged Int (Identity Int)>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged Int (Identity Int)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0] <*>_N <Int>_P <Identity Int>_R
                          ; N:Identity[0] (Sym (N:Identity[0] <Int>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <Int>_R -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))
        ((eval4 @ a)
         `cast` (Sym
                   (N:Identity[0] (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
eval24 :: forall a. TermF (Term TermF) a
eval24 = \ (@ a) -> BMMul @ (Term TermF) @ a (eval25 @ a)

-- RHS size: {terms: 4, types: 7, coercions: 639, joins: 0/0}
eval3 :: forall a. Term TermF a
eval3
  = \ (@ a) ->
      mkEval
        @ (Term TermF a)
        (eval11 @ a)
        ((eval24 @ a)
         `cast` (Nth:3
                   (((Sym (N:Identity[0] <MulF (Term TermF) a>_R)
                      ; Sym
                          (N:Tagged[0]
                             <*>_N <MulF (Term TermF) a>_P <Identity (MulF (Term TermF) a)>_R))
                     -> <TermF (Term TermF) a>_R)
                    ; (<Tagged
                          (MulF (Term TermF) a) (Identity (MulF (Term TermF) a))>_R
                       -> Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                          ; Sym
                              (N:Tagged[0]
                                 <*>_N
                                 <TermF (Term TermF) a>_P
                                 <Identity (TermF (Term TermF) a)>_R)))
                 ; N:Tagged[0]
                     <*>_N
                     U(phant:<*>_N, TermF (Term TermF) a, Unwrapped (Term TermF a))_P
                     (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R
                 ; Nth:2
                     ((N:Identity[0] <Unwrapped (Term TermF a)>_R
                       -> N:Identity[0] <Term TermF a>_R)
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Sym (N:Identity[0] <Term TermF a>_R))
                      ; (<Unwrapped (Term TermF a)>_R
                         -> Nth:3
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                            ; Nth:2
                                ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                                 ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                    -> Sym (N:Identity[0] <Term TermF a>_R)))
                            ; Nth:3
                                ((<Unwrapped (Term TermF a)>_R
                                  -> (Identity
                                        (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                            ; Nth:2
                                ((<Unwrapped (Term TermF a)>_R
                                  -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                                 ; (<Unwrapped (Term TermF a)>_R
                                    -> (Identity (Sub (D:R:UnwrappedTerm[0] <TermF>_N <a>_N)))_R))))
                 ; Nth:3
                     ((<Unwrapped (Term TermF a)>_R
                       -> Nth:2
                            ((<Unwrapped (Term TermF a)>_R
                              -> (Identity (Sub (Sym (D:R:UnwrappedTerm[0] <TermF>_N <a>_N))))_R)
                             ; (<Unwrapped (Term TermF a)>_R
                                -> N:Identity[0] <Unwrapped (Term TermF a)>_R))
                          ; Nth:3
                              ((<Unwrapped (Term TermF a)>_R
                                -> Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R))
                               ; (Nth:1
                                    (Nth:2
                                       (Nth:3
                                          (Nth:3
                                             (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                ; Sym
                                                    (N:Rewrapped[0]
                                                       <Term TermF a>_N <Term TermF a>_N)
                                                ; Nth:3
                                                    ((<(Term TermF a :: *) ~ (Term TermF a :: *)>_R
                                                      -> N:Rewrapped[0]
                                                           <Term TermF a>_N <Term TermF a>_N)
                                                     ; (<(Term TermF a :: *)
                                                         ~
                                                         (Term TermF a :: *)>_R
                                                        -> N:Wrapped[0] <Term TermF a>_N))
                                                ; (forall (p1 :: <* -> * -> *>_N).
                                                   forall (f2 :: <* -> *>_N).
                                                   <Profunctor p1>_R
                                                   -> <Functor f2>_R
                                                   -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                <TermF>_N
                                                                <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                  <TermF>_N <a>_N))
                                                   -> <p1 (Term TermF a) (f2 (Term
                                                                                TermF
                                                                                a))>_R))@<Exchange
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))
                                                                                            (Unwrapped
                                                                                               (Term
                                                                                                  TermF
                                                                                                  a))>_N)@<Identity>_N))))
                                  -> Nth:3
                                       (Nth:2
                                          (Nth:3
                                             (Nth:3
                                                (((Sym (N:Wrapped[0] <Term TermF a>_N)
                                                   ; Sym
                                                       (N:Rewrapped[0]
                                                          <Term TermF a>_N <Term TermF a>_N)
                                                   ; Nth:3
                                                       ((<(Term TermF a :: *)
                                                          ~
                                                          (Term TermF a :: *)>_R
                                                         -> N:Rewrapped[0]
                                                              <Term TermF a>_N <Term TermF a>_N)
                                                        ; (<(Term TermF a :: *)
                                                            ~
                                                            (Term TermF a :: *)>_R
                                                           -> N:Wrapped[0] <Term TermF a>_N))
                                                   ; (forall (p1 :: <* -> * -> *>_N).
                                                      forall (f2 :: <* -> *>_N).
                                                      <Profunctor p1>_R
                                                      -> <Functor f2>_R
                                                      -> <p1>_R (D:R:UnwrappedTerm[0]
                                                                   <TermF>_N
                                                                   <a>_N) (<f2>_N (D:R:UnwrappedTerm[0]
                                                                                     <TermF>_N
                                                                                     <a>_N))
                                                      -> <p1 (Term TermF a) (f2 (Term
                                                                                   TermF
                                                                                   a))>_R))@<Exchange
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))
                                                                                               (Unwrapped
                                                                                                  (Term
                                                                                                     TermF
                                                                                                     a))>_N)@<Identity>_N))))))
                          ; Nth:2
                              ((N:Identity[0] <TermF (Term TermF) a>_R
                                -> N:Identity[0] <Term TermF a>_R)
                               ; (<TermF (Term TermF) a>_R -> N:Term[0] <TermF>_N <a>_N))
                          ; Nth:3
                              ((<TermF (Term TermF) a>_R -> Sym (N:Term[0] <TermF>_N) <a>_N)
                               ; (Sym (N:Identity[0] <TermF (Term TermF) a>_R)
                                  -> Sym (N:Identity[0] <Term TermF a>_R))))
                      ; (<Unwrapped (Term TermF a)>_R -> N:Identity[0] <Term TermF a>_R)
                      ; (Sym (N:Identity[0] <Unwrapped (Term TermF a)>_R)
                         -> Sym (N:Identity[0] <Term TermF a>_R)))
                 ; Sym
                     (N:Tagged[0] <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R)
                 ; Nth:3
                     ((<Tagged
                          (Term TermF a, Term TermF a)
                          (Identity (Term TermF a, Term TermF a))>_R
                       -> Sym
                            (N:Identity[0]
                               (Sym (N:Identity[0] <Term TermF a>_R)
                                ; Sym
                                    (N:Tagged[0]
                                       <*>_N <Term TermF a>_P <Identity (Term TermF a)>_R))))
                      ; (<Tagged
                            (Term TermF a, Term TermF a)
                            (Identity (Term TermF a, Term TermF a))>_R
                         -> N:Identity[0] <Term TermF a>_R)
                      ; ((N:Tagged[0]
                            <*>_N
                            <(Term TermF a, Term TermF a)>_P
                            <Identity (Term TermF a, Term TermF a)>_R
                          ; N:Identity[0]
                              (Sym (N:Identity[0] <(Term TermF a, Term TermF a)>_R)))
                         -> <Term TermF a>_R)
                      ; (N:Identity[0] <(Term TermF a, Term TermF a)>_R
                         -> <Term TermF a>_R))
                 :: (TermF (Term TermF) a :: *) ~R# (Term TermF a :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 :: Addr#
$trModule4 = "initial-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 :: TrName
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 :: Addr#
$trModule2 = "Example.Term.BaseMul.Eval"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 :: TrName
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule :: Module
$trModule = Module $trModule3 $trModule1



